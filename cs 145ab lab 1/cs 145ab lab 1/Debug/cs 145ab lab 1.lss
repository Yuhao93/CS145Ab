
cs 145ab lab 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000009a  0000010e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000078  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000026a  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001ac  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000096c  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000ac  00000000  00000000  00000f38  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000c45d  00000000  00000000  00000fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000090  00000000  00000000  0000d441  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  0000d4d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00002e50  00000000  00000000  0000d531  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	2f c0       	rjmp	.+94     	; 0x64 <__bad_interrupt>
   6:	00 00       	nop
   8:	2d c0       	rjmp	.+90     	; 0x64 <__bad_interrupt>
   a:	00 00       	nop
   c:	2b c0       	rjmp	.+86     	; 0x64 <__bad_interrupt>
   e:	00 00       	nop
  10:	29 c0       	rjmp	.+82     	; 0x64 <__bad_interrupt>
  12:	00 00       	nop
  14:	27 c0       	rjmp	.+78     	; 0x64 <__bad_interrupt>
  16:	00 00       	nop
  18:	25 c0       	rjmp	.+74     	; 0x64 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	23 c0       	rjmp	.+70     	; 0x64 <__bad_interrupt>
  1e:	00 00       	nop
  20:	21 c0       	rjmp	.+66     	; 0x64 <__bad_interrupt>
  22:	00 00       	nop
  24:	1f c0       	rjmp	.+62     	; 0x64 <__bad_interrupt>
  26:	00 00       	nop
  28:	1d c0       	rjmp	.+58     	; 0x64 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	1b c0       	rjmp	.+54     	; 0x64 <__bad_interrupt>
  2e:	00 00       	nop
  30:	19 c0       	rjmp	.+50     	; 0x64 <__bad_interrupt>
  32:	00 00       	nop
  34:	17 c0       	rjmp	.+46     	; 0x64 <__bad_interrupt>
  36:	00 00       	nop
  38:	15 c0       	rjmp	.+42     	; 0x64 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	13 c0       	rjmp	.+38     	; 0x64 <__bad_interrupt>
  3e:	00 00       	nop
  40:	11 c0       	rjmp	.+34     	; 0x64 <__bad_interrupt>
  42:	00 00       	nop
  44:	0f c0       	rjmp	.+30     	; 0x64 <__bad_interrupt>
  46:	00 00       	nop
  48:	0d c0       	rjmp	.+26     	; 0x64 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0b c0       	rjmp	.+22     	; 0x64 <__bad_interrupt>
  4e:	00 00       	nop
  50:	09 c0       	rjmp	.+18     	; 0x64 <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e d0       	rcall	.+28     	; 0x7e <main>
  62:	19 c0       	rjmp	.+50     	; 0x96 <_exit>

00000064 <__bad_interrupt>:
  64:	cd cf       	rjmp	.-102    	; 0x0 <__vectors>

00000066 <board_init>:
#include <compiler.h>
#include <conf_board.h>


void board_init(void)
{
  66:	08 95       	ret

00000068 <internalTimer500>:
	}
	
}
void internalTimer500()
{
	TCCR0 = 5;
  68:	85 e0       	ldi	r24, 0x05	; 5
  6a:	83 bf       	out	0x33, r24	; 51
	for(int i = 0; i < 2; i++){
		TCNT0 = 0;
  6c:	12 be       	out	0x32, r1	; 50
		while(true){
			unsigned char val = TCNT0;
  6e:	82 b7       	in	r24, 0x32	; 50
			if(val >= 255)
  70:	8f 3f       	cpi	r24, 0xFF	; 255
  72:	e9 f7       	brne	.-6      	; 0x6e <internalTimer500+0x6>
}
void internalTimer500()
{
	TCCR0 = 5;
	for(int i = 0; i < 2; i++){
		TCNT0 = 0;
  74:	12 be       	out	0x32, r1	; 50
		while(true){
			unsigned char val = TCNT0;
  76:	82 b7       	in	r24, 0x32	; 50
			if(val >= 255)
  78:	8f 3f       	cpi	r24, 0xFF	; 255
  7a:	e9 f7       	brne	.-6      	; 0x76 <internalTimer500+0xe>
			{
				break;
			}
		}
	}
}
  7c:	08 95       	ret

0000007e <main>:
int main (void)
{
	unsigned short t = 60;
	board_init();
  7e:	f3 df       	rcall	.-26     	; 0x66 <board_init>
	SET_BIT(DDRB,0);
  80:	b8 9a       	sbi	0x17, 0	; 23
	CLR_BIT(DDRB,1);
  82:	b9 98       	cbi	0x17, 1	; 23
	
	for(;;)
	{
		
		if(GET_BIT(PINB,1) == 0)
  84:	b1 99       	sbic	0x16, 1	; 22
  86:	05 c0       	rjmp	.+10     	; 0x92 <main+0x14>
		{
			
			SET_BIT(PORTB, 0);
  88:	c0 9a       	sbi	0x18, 0	; 24
			//sleep500();
			//wait_avr(t);
			internalTimer500();
  8a:	ee df       	rcall	.-36     	; 0x68 <internalTimer500>
			CLR_BIT(PORTB, 0);
  8c:	c0 98       	cbi	0x18, 0	; 24
			//sleep500();
			//wait_avr(t);
			internalTimer500();
  8e:	ec df       	rcall	.-40     	; 0x68 <internalTimer500>
  90:	f9 cf       	rjmp	.-14     	; 0x84 <main+0x6>
		}
		else
		{
			
			CLR_BIT(PORTB,0);
  92:	c0 98       	cbi	0x18, 0	; 24
  94:	f7 cf       	rjmp	.-18     	; 0x84 <main+0x6>

00000096 <_exit>:
  96:	f8 94       	cli

00000098 <__stop_program>:
  98:	ff cf       	rjmp	.-2      	; 0x98 <__stop_program>
