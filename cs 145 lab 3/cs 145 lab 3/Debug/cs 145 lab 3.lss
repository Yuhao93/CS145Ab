
cs 145 lab 3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000770  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000051e  00800060  00000770  000007e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000d02  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000108  00000000  00000000  00000d32  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b55  00000000  00000000  00000e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000004eb  00000000  00000000  0000198f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000011cc  00000000  00000000  00001e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000002c8  00000000  00000000  00003048  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000cf72  00000000  00000000  00003310  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000acc  00000000  00000000  00010282  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000f8  00000000  00000000  00010d4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00003279  00000000  00000000  00010e46  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	15 e0       	ldi	r17, 0x05	; 5
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e7       	ldi	r30, 0x70	; 112
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	25 e0       	ldi	r18, 0x05	; 5
  78:	ae e7       	ldi	r26, 0x7E	; 126
  7a:	b5 e0       	ldi	r27, 0x05	; 5
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	3a d3       	rcall	.+1652   	; 0x6fc <main>
  88:	71 c3       	rjmp	.+1762   	; 0x76c <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <wait_avr>:
}

void
wait_avr(unsigned short msec)
{
	TCCR0 = 3;
  8c:	23 e0       	ldi	r18, 0x03	; 3
  8e:	23 bf       	out	0x33, r18	; 51
	while (msec--) {
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.00001);
  90:	3e ef       	ldi	r19, 0xFE	; 254

void
wait_avr(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
  92:	08 c0       	rjmp	.+16     	; 0xa4 <wait_avr+0x18>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.00001);
  94:	32 bf       	out	0x32, r19	; 50
		SET_BIT(TIFR, TOV0);
  96:	28 b7       	in	r18, 0x38	; 56
  98:	21 60       	ori	r18, 0x01	; 1
  9a:	28 bf       	out	0x38, r18	; 56
		WDR();
  9c:	a8 95       	wdr
		while (!GET_BIT(TIFR, TOV0));
  9e:	08 b6       	in	r0, 0x38	; 56
  a0:	00 fe       	sbrs	r0, 0
  a2:	fd cf       	rjmp	.-6      	; 0x9e <wait_avr+0x12>

void
wait_avr(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	b0 f7       	brcc	.-20     	; 0x94 <wait_avr+0x8>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.00001);
		SET_BIT(TIFR, TOV0);
		WDR();
		while (!GET_BIT(TIFR, TOV0));
	}
	TCCR0 = 0;
  a8:	13 be       	out	0x33, r1	; 51
  aa:	08 95       	ret

000000ac <output>:
}

static void
output(unsigned char d, unsigned char rs)
{
	if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  ac:	66 23       	and	r22, r22
  ae:	11 f0       	breq	.+4      	; 0xb4 <output+0x8>
  b0:	d8 9a       	sbi	0x1b, 0	; 27
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <output+0xa>
  b4:	d8 98       	cbi	0x1b, 0	; 27
	CLR_BIT(PORT, RW_PIN);
  b6:	d9 98       	cbi	0x1b, 1	; 27
#define EN_PIN  2

static inline void
set_data(unsigned char x)
{
	PORTD = x;
  b8:	82 bb       	out	0x12, r24	; 18
	DDRD = 0xff;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	81 bb       	out	0x11, r24	; 17
output(unsigned char d, unsigned char rs)
{
	if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
	CLR_BIT(PORT, RW_PIN);
	set_data(d);
	SET_BIT(PORT, EN_PIN);
  be:	da 9a       	sbi	0x1b, 2	; 27
}

static inline void
sleep_700ns(void)
{
	NOP();
  c0:	00 00       	nop
	NOP();
  c2:	00 00       	nop
	NOP();
  c4:	00 00       	nop
	if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
	CLR_BIT(PORT, RW_PIN);
	set_data(d);
	SET_BIT(PORT, EN_PIN);
	sleep_700ns();
	CLR_BIT(PORT, EN_PIN);
  c6:	da 98       	cbi	0x1b, 2	; 27
  c8:	08 95       	ret

000000ca <write>:

static unsigned char
input(unsigned char rs)
{
	unsigned char d;
	if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  ca:	d8 98       	cbi	0x1b, 0	; 27
	SET_BIT(PORT, RW_PIN);
  cc:	d9 9a       	sbi	0x1b, 1	; 27
}

static inline unsigned char
get_data(void)
{
	DDRD = 0x00;
  ce:	11 ba       	out	0x11, r1	; 17
	return PIND;
  d0:	90 b3       	in	r25, 0x10	; 16
{
	unsigned char d;
	if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
	SET_BIT(PORT, RW_PIN);
	get_data();
	SET_BIT(PORT, EN_PIN);
  d2:	da 9a       	sbi	0x1b, 2	; 27
}

static inline void
sleep_700ns(void)
{
	NOP();
  d4:	00 00       	nop
	NOP();
  d6:	00 00       	nop
	NOP();
  d8:	00 00       	nop
}

static inline unsigned char
get_data(void)
{
	DDRD = 0x00;
  da:	11 ba       	out	0x11, r1	; 17
	return PIND;
  dc:	90 b3       	in	r25, 0x10	; 16
	SET_BIT(PORT, RW_PIN);
	get_data();
	SET_BIT(PORT, EN_PIN);
	sleep_700ns();
	d = get_data();
	CLR_BIT(PORT, EN_PIN);
  de:	da 98       	cbi	0x1b, 2	; 27
}

static void
write(unsigned char c, unsigned char rs)
{
	while (input(0) & 0x80);
  e0:	99 23       	and	r25, r25
  e2:	9c f3       	brlt	.-26     	; 0xca <write>
	output(c, rs);
  e4:	e3 cf       	rjmp	.-58     	; 0xac <output>
  e6:	08 95       	ret

000000e8 <ini_lcd>:
}

void
ini_lcd(void)
{
	SET_BIT(DDR, RS_PIN);
  e8:	d0 9a       	sbi	0x1a, 0	; 26
	SET_BIT(DDR, RW_PIN);
  ea:	d1 9a       	sbi	0x1a, 1	; 26
	SET_BIT(DDR, EN_PIN);
  ec:	d2 9a       	sbi	0x1a, 2	; 26
	wait_avr(16);
  ee:	80 e1       	ldi	r24, 0x10	; 16
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	cc df       	rcall	.-104    	; 0x8c <wait_avr>
	output(0x30, 0);
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	80 e3       	ldi	r24, 0x30	; 48
  f8:	d9 df       	rcall	.-78     	; 0xac <output>
	wait_avr(5);
  fa:	85 e0       	ldi	r24, 0x05	; 5
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	c6 df       	rcall	.-116    	; 0x8c <wait_avr>
	output(0x30, 0);
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	80 e3       	ldi	r24, 0x30	; 48
 104:	d3 df       	rcall	.-90     	; 0xac <output>
	wait_avr(1);
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	c0 df       	rcall	.-128    	; 0x8c <wait_avr>
	write(0x3c, 0);
 10c:	60 e0       	ldi	r22, 0x00	; 0
 10e:	8c e3       	ldi	r24, 0x3C	; 60
 110:	dc df       	rcall	.-72     	; 0xca <write>
	write(0x0c, 0);
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	8c e0       	ldi	r24, 0x0C	; 12
 116:	d9 df       	rcall	.-78     	; 0xca <write>
	write(0x06, 0);
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	86 e0       	ldi	r24, 0x06	; 6
 11c:	d6 df       	rcall	.-84     	; 0xca <write>
	write(0x01, 0);
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	d3 cf       	rjmp	.-90     	; 0xca <write>
 124:	08 95       	ret

00000126 <clr_lcd>:
}

void
clr_lcd(void)
{
	write(0x01, 0);
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	cf cf       	rjmp	.-98     	; 0xca <write>
 12c:	08 95       	ret

0000012e <getFrequency>:
	{
		return 0;
	}
	
	return -1;
}
 12e:	80 33       	cpi	r24, 0x30	; 48
 130:	09 f4       	brne	.+2      	; 0x134 <getFrequency+0x6>
 132:	6e c0       	rjmp	.+220    	; 0x210 <getFrequency+0xe2>
 134:	81 33       	cpi	r24, 0x31	; 49
 136:	09 f4       	brne	.+2      	; 0x13a <getFrequency+0xc>
 138:	70 c0       	rjmp	.+224    	; 0x21a <getFrequency+0xec>
 13a:	82 33       	cpi	r24, 0x32	; 50
 13c:	09 f4       	brne	.+2      	; 0x140 <getFrequency+0x12>
 13e:	72 c0       	rjmp	.+228    	; 0x224 <getFrequency+0xf6>
 140:	83 33       	cpi	r24, 0x33	; 51
 142:	09 f4       	brne	.+2      	; 0x146 <getFrequency+0x18>
 144:	74 c0       	rjmp	.+232    	; 0x22e <getFrequency+0x100>
 146:	84 33       	cpi	r24, 0x34	; 52
 148:	09 f4       	brne	.+2      	; 0x14c <getFrequency+0x1e>
 14a:	76 c0       	rjmp	.+236    	; 0x238 <getFrequency+0x10a>
 14c:	85 33       	cpi	r24, 0x35	; 53
 14e:	09 f4       	brne	.+2      	; 0x152 <getFrequency+0x24>
 150:	78 c0       	rjmp	.+240    	; 0x242 <getFrequency+0x114>
 152:	86 33       	cpi	r24, 0x36	; 54
 154:	09 f4       	brne	.+2      	; 0x158 <getFrequency+0x2a>
 156:	7a c0       	rjmp	.+244    	; 0x24c <getFrequency+0x11e>
 158:	87 33       	cpi	r24, 0x37	; 55
 15a:	09 f4       	brne	.+2      	; 0x15e <getFrequency+0x30>
 15c:	7c c0       	rjmp	.+248    	; 0x256 <getFrequency+0x128>
 15e:	88 33       	cpi	r24, 0x38	; 56
 160:	09 f4       	brne	.+2      	; 0x164 <getFrequency+0x36>
 162:	7e c0       	rjmp	.+252    	; 0x260 <getFrequency+0x132>
 164:	89 33       	cpi	r24, 0x39	; 57
 166:	09 f4       	brne	.+2      	; 0x16a <getFrequency+0x3c>
 168:	80 c0       	rjmp	.+256    	; 0x26a <getFrequency+0x13c>
 16a:	81 36       	cpi	r24, 0x61	; 97
 16c:	09 f4       	brne	.+2      	; 0x170 <getFrequency+0x42>
 16e:	82 c0       	rjmp	.+260    	; 0x274 <getFrequency+0x146>
 170:	82 36       	cpi	r24, 0x62	; 98
 172:	09 f4       	brne	.+2      	; 0x176 <getFrequency+0x48>
 174:	84 c0       	rjmp	.+264    	; 0x27e <getFrequency+0x150>
 176:	83 36       	cpi	r24, 0x63	; 99
 178:	09 f4       	brne	.+2      	; 0x17c <getFrequency+0x4e>
 17a:	86 c0       	rjmp	.+268    	; 0x288 <getFrequency+0x15a>
 17c:	84 36       	cpi	r24, 0x64	; 100
 17e:	09 f4       	brne	.+2      	; 0x182 <getFrequency+0x54>
 180:	88 c0       	rjmp	.+272    	; 0x292 <getFrequency+0x164>
 182:	85 36       	cpi	r24, 0x65	; 101
 184:	09 f4       	brne	.+2      	; 0x188 <getFrequency+0x5a>
 186:	8a c0       	rjmp	.+276    	; 0x29c <getFrequency+0x16e>
 188:	86 36       	cpi	r24, 0x66	; 102
 18a:	09 f4       	brne	.+2      	; 0x18e <getFrequency+0x60>
 18c:	8c c0       	rjmp	.+280    	; 0x2a6 <getFrequency+0x178>
 18e:	87 36       	cpi	r24, 0x67	; 103
 190:	09 f4       	brne	.+2      	; 0x194 <getFrequency+0x66>
 192:	8e c0       	rjmp	.+284    	; 0x2b0 <getFrequency+0x182>
 194:	88 36       	cpi	r24, 0x68	; 104
 196:	09 f4       	brne	.+2      	; 0x19a <getFrequency+0x6c>
 198:	90 c0       	rjmp	.+288    	; 0x2ba <getFrequency+0x18c>
 19a:	89 36       	cpi	r24, 0x69	; 105
 19c:	09 f4       	brne	.+2      	; 0x1a0 <getFrequency+0x72>
 19e:	92 c0       	rjmp	.+292    	; 0x2c4 <getFrequency+0x196>
 1a0:	8a 36       	cpi	r24, 0x6A	; 106
 1a2:	09 f4       	brne	.+2      	; 0x1a6 <getFrequency+0x78>
 1a4:	94 c0       	rjmp	.+296    	; 0x2ce <getFrequency+0x1a0>
 1a6:	8b 36       	cpi	r24, 0x6B	; 107
 1a8:	09 f4       	brne	.+2      	; 0x1ac <getFrequency+0x7e>
 1aa:	96 c0       	rjmp	.+300    	; 0x2d8 <getFrequency+0x1aa>
 1ac:	8c 36       	cpi	r24, 0x6C	; 108
 1ae:	09 f4       	brne	.+2      	; 0x1b2 <getFrequency+0x84>
 1b0:	98 c0       	rjmp	.+304    	; 0x2e2 <getFrequency+0x1b4>
 1b2:	8d 36       	cpi	r24, 0x6D	; 109
 1b4:	09 f4       	brne	.+2      	; 0x1b8 <getFrequency+0x8a>
 1b6:	9a c0       	rjmp	.+308    	; 0x2ec <getFrequency+0x1be>
 1b8:	8e 36       	cpi	r24, 0x6E	; 110
 1ba:	09 f4       	brne	.+2      	; 0x1be <getFrequency+0x90>
 1bc:	9c c0       	rjmp	.+312    	; 0x2f6 <getFrequency+0x1c8>
 1be:	8f 36       	cpi	r24, 0x6F	; 111
 1c0:	09 f4       	brne	.+2      	; 0x1c4 <getFrequency+0x96>
 1c2:	9e c0       	rjmp	.+316    	; 0x300 <getFrequency+0x1d2>
 1c4:	80 37       	cpi	r24, 0x70	; 112
 1c6:	09 f4       	brne	.+2      	; 0x1ca <getFrequency+0x9c>
 1c8:	a0 c0       	rjmp	.+320    	; 0x30a <getFrequency+0x1dc>
 1ca:	81 37       	cpi	r24, 0x71	; 113
 1cc:	09 f4       	brne	.+2      	; 0x1d0 <getFrequency+0xa2>
 1ce:	a2 c0       	rjmp	.+324    	; 0x314 <getFrequency+0x1e6>
 1d0:	82 37       	cpi	r24, 0x72	; 114
 1d2:	09 f4       	brne	.+2      	; 0x1d6 <getFrequency+0xa8>
 1d4:	a4 c0       	rjmp	.+328    	; 0x31e <getFrequency+0x1f0>
 1d6:	83 37       	cpi	r24, 0x73	; 115
 1d8:	09 f4       	brne	.+2      	; 0x1dc <getFrequency+0xae>
 1da:	a6 c0       	rjmp	.+332    	; 0x328 <getFrequency+0x1fa>
 1dc:	84 37       	cpi	r24, 0x74	; 116
 1de:	09 f4       	brne	.+2      	; 0x1e2 <getFrequency+0xb4>
 1e0:	a8 c0       	rjmp	.+336    	; 0x332 <getFrequency+0x204>
 1e2:	85 37       	cpi	r24, 0x75	; 117
 1e4:	09 f4       	brne	.+2      	; 0x1e8 <getFrequency+0xba>
 1e6:	aa c0       	rjmp	.+340    	; 0x33c <getFrequency+0x20e>
 1e8:	86 37       	cpi	r24, 0x76	; 118
 1ea:	09 f4       	brne	.+2      	; 0x1ee <getFrequency+0xc0>
 1ec:	ac c0       	rjmp	.+344    	; 0x346 <getFrequency+0x218>
 1ee:	87 37       	cpi	r24, 0x77	; 119
 1f0:	09 f4       	brne	.+2      	; 0x1f4 <getFrequency+0xc6>
 1f2:	ae c0       	rjmp	.+348    	; 0x350 <getFrequency+0x222>
 1f4:	88 37       	cpi	r24, 0x78	; 120
 1f6:	09 f4       	brne	.+2      	; 0x1fa <getFrequency+0xcc>
 1f8:	b0 c0       	rjmp	.+352    	; 0x35a <getFrequency+0x22c>
 1fa:	89 37       	cpi	r24, 0x79	; 121
 1fc:	09 f4       	brne	.+2      	; 0x200 <getFrequency+0xd2>
 1fe:	b2 c0       	rjmp	.+356    	; 0x364 <getFrequency+0x236>
 200:	8a 37       	cpi	r24, 0x7A	; 122
 202:	09 f0       	breq	.+2      	; 0x206 <getFrequency+0xd8>
 204:	b4 c0       	rjmp	.+360    	; 0x36e <getFrequency+0x240>
 206:	60 e1       	ldi	r22, 0x10	; 16
 208:	70 e0       	ldi	r23, 0x00	; 0
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	08 95       	ret
 210:	68 e7       	ldi	r22, 0x78	; 120
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	08 95       	ret
 21a:	61 e7       	ldi	r22, 0x71	; 113
 21c:	70 e0       	ldi	r23, 0x00	; 0
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	08 95       	ret
 224:	6a e6       	ldi	r22, 0x6A	; 106
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	08 95       	ret
 22e:	64 e6       	ldi	r22, 0x64	; 100
 230:	70 e0       	ldi	r23, 0x00	; 0
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	08 95       	ret
 238:	6f e5       	ldi	r22, 0x5F	; 95
 23a:	70 e0       	ldi	r23, 0x00	; 0
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	08 95       	ret
 242:	6a e5       	ldi	r22, 0x5A	; 90
 244:	70 e0       	ldi	r23, 0x00	; 0
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	08 95       	ret
 24c:	65 e5       	ldi	r22, 0x55	; 85
 24e:	70 e0       	ldi	r23, 0x00	; 0
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	08 95       	ret
 256:	60 e5       	ldi	r22, 0x50	; 80
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	08 95       	ret
 260:	6b e4       	ldi	r22, 0x4B	; 75
 262:	70 e0       	ldi	r23, 0x00	; 0
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	08 95       	ret
 26a:	67 e4       	ldi	r22, 0x47	; 71
 26c:	70 e0       	ldi	r23, 0x00	; 0
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	08 95       	ret
 274:	64 e4       	ldi	r22, 0x44	; 68
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	08 95       	ret
 27e:	60 e4       	ldi	r22, 0x40	; 64
 280:	70 e0       	ldi	r23, 0x00	; 0
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	08 95       	ret
 288:	6c e3       	ldi	r22, 0x3C	; 60
 28a:	70 e0       	ldi	r23, 0x00	; 0
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	08 95       	ret
 292:	68 e3       	ldi	r22, 0x38	; 56
 294:	70 e0       	ldi	r23, 0x00	; 0
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	08 95       	ret
 29c:	65 e3       	ldi	r22, 0x35	; 53
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	08 95       	ret
 2a6:	62 e3       	ldi	r22, 0x32	; 50
 2a8:	70 e0       	ldi	r23, 0x00	; 0
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	08 95       	ret
 2b0:	6f e2       	ldi	r22, 0x2F	; 47
 2b2:	70 e0       	ldi	r23, 0x00	; 0
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	08 95       	ret
 2ba:	6d e2       	ldi	r22, 0x2D	; 45
 2bc:	70 e0       	ldi	r23, 0x00	; 0
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	08 95       	ret
 2c4:	6a e2       	ldi	r22, 0x2A	; 42
 2c6:	70 e0       	ldi	r23, 0x00	; 0
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	08 95       	ret
 2ce:	68 e2       	ldi	r22, 0x28	; 40
 2d0:	70 e0       	ldi	r23, 0x00	; 0
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	08 95       	ret
 2d8:	66 e2       	ldi	r22, 0x26	; 38
 2da:	70 e0       	ldi	r23, 0x00	; 0
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	08 95       	ret
 2e2:	64 e2       	ldi	r22, 0x24	; 36
 2e4:	70 e0       	ldi	r23, 0x00	; 0
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	08 95       	ret
 2ec:	62 e2       	ldi	r22, 0x22	; 34
 2ee:	70 e0       	ldi	r23, 0x00	; 0
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	08 95       	ret
 2f6:	60 e2       	ldi	r22, 0x20	; 32
 2f8:	70 e0       	ldi	r23, 0x00	; 0
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	08 95       	ret
 300:	6e e1       	ldi	r22, 0x1E	; 30
 302:	70 e0       	ldi	r23, 0x00	; 0
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	08 95       	ret
 30a:	6c e1       	ldi	r22, 0x1C	; 28
 30c:	70 e0       	ldi	r23, 0x00	; 0
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	08 95       	ret
 314:	6b e1       	ldi	r22, 0x1B	; 27
 316:	70 e0       	ldi	r23, 0x00	; 0
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	08 95       	ret
 31e:	69 e1       	ldi	r22, 0x19	; 25
 320:	70 e0       	ldi	r23, 0x00	; 0
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	08 95       	ret
 328:	68 e1       	ldi	r22, 0x18	; 24
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	08 95       	ret
 332:	66 e1       	ldi	r22, 0x16	; 22
 334:	70 e0       	ldi	r23, 0x00	; 0
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	08 95       	ret
 33c:	65 e1       	ldi	r22, 0x15	; 21
 33e:	70 e0       	ldi	r23, 0x00	; 0
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	08 95       	ret
 346:	64 e1       	ldi	r22, 0x14	; 20
 348:	70 e0       	ldi	r23, 0x00	; 0
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	08 95       	ret
 350:	63 e1       	ldi	r22, 0x13	; 19
 352:	70 e0       	ldi	r23, 0x00	; 0
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	08 95       	ret
 35a:	62 e1       	ldi	r22, 0x12	; 18
 35c:	70 e0       	ldi	r23, 0x00	; 0
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	08 95       	ret
 364:	61 e1       	ldi	r22, 0x11	; 17
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	08 95       	ret
 36e:	61 e0       	ldi	r22, 0x01	; 1
 370:	70 e0       	ldi	r23, 0x00	; 0
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	08 95       	ret

00000378 <getDuration>:
 378:	9a 01       	movw	r18, r20
 37a:	ab 01       	movw	r20, r22
 37c:	80 33       	cpi	r24, 0x30	; 48
 37e:	41 f4       	brne	.+16     	; 0x390 <getDuration+0x18>
 380:	60 e8       	ldi	r22, 0x80	; 128
 382:	7b eb       	ldi	r23, 0xBB	; 187
 384:	8f ef       	ldi	r24, 0xFF	; 255
 386:	9f ef       	ldi	r25, 0xFF	; 255
 388:	cf d1       	rcall	.+926    	; 0x728 <__udivmodsi4>
 38a:	ca 01       	movw	r24, r20
 38c:	b9 01       	movw	r22, r18
 38e:	08 95       	ret
 390:	81 33       	cpi	r24, 0x31	; 49
 392:	41 f4       	brne	.+16     	; 0x3a4 <getDuration+0x2c>
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	7d e7       	ldi	r23, 0x7D	; 125
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	c5 d1       	rcall	.+906    	; 0x728 <__udivmodsi4>
 39e:	ca 01       	movw	r24, r20
 3a0:	b9 01       	movw	r22, r18
 3a2:	08 95       	ret
 3a4:	82 33       	cpi	r24, 0x32	; 50
 3a6:	41 f4       	brne	.+16     	; 0x3b8 <getDuration+0x40>
 3a8:	60 ec       	ldi	r22, 0xC0	; 192
 3aa:	7d e5       	ldi	r23, 0x5D	; 93
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	bb d1       	rcall	.+886    	; 0x728 <__udivmodsi4>
 3b2:	ca 01       	movw	r24, r20
 3b4:	b9 01       	movw	r22, r18
 3b6:	08 95       	ret
 3b8:	83 33       	cpi	r24, 0x33	; 51
 3ba:	41 f4       	brne	.+16     	; 0x3cc <getDuration+0x54>
 3bc:	60 e8       	ldi	r22, 0x80	; 128
 3be:	7e e3       	ldi	r23, 0x3E	; 62
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	b1 d1       	rcall	.+866    	; 0x728 <__udivmodsi4>
 3c6:	ca 01       	movw	r24, r20
 3c8:	b9 01       	movw	r22, r18
 3ca:	08 95       	ret
 3cc:	84 33       	cpi	r24, 0x34	; 52
 3ce:	41 f4       	brne	.+16     	; 0x3e0 <getDuration+0x68>
 3d0:	60 ee       	ldi	r22, 0xE0	; 224
 3d2:	7e e2       	ldi	r23, 0x2E	; 46
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	a7 d1       	rcall	.+846    	; 0x728 <__udivmodsi4>
 3da:	ca 01       	movw	r24, r20
 3dc:	b9 01       	movw	r22, r18
 3de:	08 95       	ret
 3e0:	85 33       	cpi	r24, 0x35	; 53
 3e2:	41 f4       	brne	.+16     	; 0x3f4 <getDuration+0x7c>
 3e4:	60 e4       	ldi	r22, 0x40	; 64
 3e6:	7f e1       	ldi	r23, 0x1F	; 31
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	9d d1       	rcall	.+826    	; 0x728 <__udivmodsi4>
 3ee:	ca 01       	movw	r24, r20
 3f0:	b9 01       	movw	r22, r18
 3f2:	08 95       	ret
 3f4:	86 33       	cpi	r24, 0x36	; 54
 3f6:	41 f4       	brne	.+16     	; 0x408 <getDuration+0x90>
 3f8:	60 e7       	ldi	r22, 0x70	; 112
 3fa:	77 e1       	ldi	r23, 0x17	; 23
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	93 d1       	rcall	.+806    	; 0x728 <__udivmodsi4>
 402:	ca 01       	movw	r24, r20
 404:	b9 01       	movw	r22, r18
 406:	08 95       	ret
 408:	87 33       	cpi	r24, 0x37	; 55
 40a:	41 f4       	brne	.+16     	; 0x41c <getDuration+0xa4>
 40c:	60 ea       	ldi	r22, 0xA0	; 160
 40e:	7f e0       	ldi	r23, 0x0F	; 15
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	89 d1       	rcall	.+786    	; 0x728 <__udivmodsi4>
 416:	ca 01       	movw	r24, r20
 418:	b9 01       	movw	r22, r18
 41a:	08 95       	ret
 41c:	88 33       	cpi	r24, 0x38	; 56
 41e:	41 f4       	brne	.+16     	; 0x430 <getDuration+0xb8>
 420:	60 ed       	ldi	r22, 0xD0	; 208
 422:	77 e0       	ldi	r23, 0x07	; 7
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	7f d1       	rcall	.+766    	; 0x728 <__udivmodsi4>
 42a:	ca 01       	movw	r24, r20
 42c:	b9 01       	movw	r22, r18
 42e:	08 95       	ret
 430:	60 e0       	ldi	r22, 0x00	; 0
 432:	70 e0       	ldi	r23, 0x00	; 0
 434:	cb 01       	movw	r24, r22
 436:	08 95       	ret

00000438 <stillAlive>:
 438:	cf 92       	push	r12
 43a:	df 92       	push	r13
 43c:	ef 92       	push	r14
 43e:	ff 92       	push	r15
 440:	0f 93       	push	r16
 442:	1f 93       	push	r17
 444:	cf 93       	push	r28
 446:	df 93       	push	r29
 448:	ec 01       	movw	r28, r24
 44a:	8b 01       	movw	r16, r22
 44c:	00 0f       	add	r16, r16
 44e:	11 1f       	adc	r17, r17
 450:	06 0f       	add	r16, r22
 452:	17 1f       	adc	r17, r23
 454:	00 5a       	subi	r16, 0xA0	; 160
 456:	1f 4f       	sbci	r17, 0xFF	; 255
 458:	f8 01       	movw	r30, r16
 45a:	81 81       	ldd	r24, Z+1	; 0x01
 45c:	68 de       	rcall	.-816    	; 0x12e <getFrequency>
 45e:	6b 01       	movw	r12, r22
 460:	7c 01       	movw	r14, r24
 462:	ab 01       	movw	r20, r22
 464:	bc 01       	movw	r22, r24
 466:	f8 01       	movw	r30, r16
 468:	80 81       	ld	r24, Z
 46a:	86 df       	rcall	.-244    	; 0x378 <getDuration>
 46c:	21 e0       	ldi	r18, 0x01	; 1
 46e:	f8 01       	movw	r30, r16
 470:	32 81       	ldd	r19, Z+2	; 0x02
 472:	30 33       	cpi	r19, 0x30	; 48
 474:	09 f0       	breq	.+2      	; 0x478 <stillAlive+0x40>
 476:	20 e0       	ldi	r18, 0x00	; 0
 478:	c8 82       	st	Y, r12
 47a:	d9 82       	std	Y+1, r13	; 0x01
 47c:	ea 82       	std	Y+2, r14	; 0x02
 47e:	fb 82       	std	Y+3, r15	; 0x03
 480:	6c 83       	std	Y+4, r22	; 0x04
 482:	7d 83       	std	Y+5, r23	; 0x05
 484:	8e 83       	std	Y+6, r24	; 0x06
 486:	9f 83       	std	Y+7, r25	; 0x07
 488:	28 87       	std	Y+8, r18	; 0x08
 48a:	ce 01       	movw	r24, r28
 48c:	df 91       	pop	r29
 48e:	cf 91       	pop	r28
 490:	1f 91       	pop	r17
 492:	0f 91       	pop	r16
 494:	ff 90       	pop	r15
 496:	ef 90       	pop	r14
 498:	df 90       	pop	r13
 49a:	cf 90       	pop	r12
 49c:	08 95       	ret

0000049e <check_press>:
 49e:	0f 93       	push	r16
 4a0:	1f 93       	push	r17
 4a2:	cf 93       	push	r28
 4a4:	df 93       	push	r29
 4a6:	00 d0       	rcall	.+0      	; 0x4a8 <check_press+0xa>
 4a8:	cd b7       	in	r28, 0x3d	; 61
 4aa:	de b7       	in	r29, 0x3e	; 62
 4ac:	9b 01       	movw	r18, r22
 4ae:	2c 5f       	subi	r18, 0xFC	; 252
 4b0:	3f 4f       	sbci	r19, 0xFF	; 255
 4b2:	41 e0       	ldi	r20, 0x01	; 1
 4b4:	50 e0       	ldi	r21, 0x00	; 0
 4b6:	8a 01       	movw	r16, r20
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <check_press+0x20>
 4ba:	00 0f       	add	r16, r16
 4bc:	11 1f       	adc	r17, r17
 4be:	2a 95       	dec	r18
 4c0:	e2 f7       	brpl	.-8      	; 0x4ba <check_press+0x1c>
 4c2:	b0 2f       	mov	r27, r16
 4c4:	a0 2f       	mov	r26, r16
 4c6:	a0 95       	com	r26
 4c8:	20 e0       	ldi	r18, 0x00	; 0
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	e1 e0       	ldi	r30, 0x01	; 1
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	94 b3       	in	r25, 0x14	; 20
 4d2:	af 01       	movw	r20, r30
 4d4:	02 2e       	mov	r0, r18
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <check_press+0x3e>
 4d8:	44 0f       	add	r20, r20
 4da:	55 1f       	adc	r21, r21
 4dc:	0a 94       	dec	r0
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <check_press+0x3a>
 4e0:	54 2f       	mov	r21, r20
 4e2:	50 95       	com	r21
 4e4:	95 23       	and	r25, r21
 4e6:	94 bb       	out	0x14, r25	; 20
 4e8:	95 b3       	in	r25, 0x15	; 21
 4ea:	49 2b       	or	r20, r25
 4ec:	45 bb       	out	0x15, r20	; 21
 4ee:	62 17       	cp	r22, r18
 4f0:	73 07       	cpc	r23, r19
 4f2:	39 f4       	brne	.+14     	; 0x502 <check_press+0x64>
 4f4:	94 b3       	in	r25, 0x14	; 20
 4f6:	9b 2b       	or	r25, r27
 4f8:	94 bb       	out	0x14, r25	; 20
 4fa:	95 b3       	in	r25, 0x15	; 21
 4fc:	9a 23       	and	r25, r26
 4fe:	95 bb       	out	0x15, r25	; 21
 500:	11 c0       	rjmp	.+34     	; 0x524 <check_press+0x86>
 502:	94 b3       	in	r25, 0x14	; 20
 504:	a9 01       	movw	r20, r18
 506:	4c 5f       	subi	r20, 0xFC	; 252
 508:	5f 4f       	sbci	r21, 0xFF	; 255
 50a:	8f 01       	movw	r16, r30
 50c:	02 c0       	rjmp	.+4      	; 0x512 <check_press+0x74>
 50e:	00 0f       	add	r16, r16
 510:	11 1f       	adc	r17, r17
 512:	4a 95       	dec	r20
 514:	e2 f7       	brpl	.-8      	; 0x50e <check_press+0x70>
 516:	a8 01       	movw	r20, r16
 518:	40 95       	com	r20
 51a:	94 23       	and	r25, r20
 51c:	94 bb       	out	0x14, r25	; 20
 51e:	95 b3       	in	r25, 0x15	; 21
 520:	49 23       	and	r20, r25
 522:	45 bb       	out	0x15, r20	; 21
 524:	2f 5f       	subi	r18, 0xFF	; 255
 526:	3f 4f       	sbci	r19, 0xFF	; 255
 528:	24 30       	cpi	r18, 0x04	; 4
 52a:	31 05       	cpc	r19, r1
 52c:	89 f6       	brne	.-94     	; 0x4d0 <check_press+0x32>
 52e:	1a 82       	std	Y+2, r1	; 0x02
 530:	19 82       	std	Y+1, r1	; 0x01
 532:	29 81       	ldd	r18, Y+1	; 0x01
 534:	3a 81       	ldd	r19, Y+2	; 0x02
 536:	24 36       	cpi	r18, 0x64	; 100
 538:	31 05       	cpc	r19, r1
 53a:	5c f4       	brge	.+22     	; 0x552 <check_press+0xb4>
 53c:	29 81       	ldd	r18, Y+1	; 0x01
 53e:	3a 81       	ldd	r19, Y+2	; 0x02
 540:	2f 5f       	subi	r18, 0xFF	; 255
 542:	3f 4f       	sbci	r19, 0xFF	; 255
 544:	3a 83       	std	Y+2, r19	; 0x02
 546:	29 83       	std	Y+1, r18	; 0x01
 548:	29 81       	ldd	r18, Y+1	; 0x01
 54a:	3a 81       	ldd	r19, Y+2	; 0x02
 54c:	24 36       	cpi	r18, 0x64	; 100
 54e:	31 05       	cpc	r19, r1
 550:	ac f3       	brlt	.-22     	; 0x53c <check_press+0x9e>
 552:	23 b3       	in	r18, 0x13	; 19
 554:	30 e0       	ldi	r19, 0x00	; 0
 556:	a9 01       	movw	r20, r18
 558:	02 c0       	rjmp	.+4      	; 0x55e <check_press+0xc0>
 55a:	55 95       	asr	r21
 55c:	47 95       	ror	r20
 55e:	8a 95       	dec	r24
 560:	e2 f7       	brpl	.-8      	; 0x55a <check_press+0xbc>
 562:	ca 01       	movw	r24, r20
 564:	51 e0       	ldi	r21, 0x01	; 1
 566:	85 27       	eor	r24, r21
 568:	81 70       	andi	r24, 0x01	; 1
 56a:	0f 90       	pop	r0
 56c:	0f 90       	pop	r0
 56e:	df 91       	pop	r29
 570:	cf 91       	pop	r28
 572:	1f 91       	pop	r17
 574:	0f 91       	pop	r16
 576:	08 95       	ret

00000578 <playNote>:
		playNote(note);
		if (note.breakAfter) { playNote(n); }
	}
}

void playNote(Note_t note) {
 578:	4f 92       	push	r4
 57a:	5f 92       	push	r5
 57c:	6f 92       	push	r6
 57e:	7f 92       	push	r7
 580:	af 92       	push	r10
 582:	bf 92       	push	r11
 584:	cf 92       	push	r12
 586:	df 92       	push	r13
 588:	ef 92       	push	r14
 58a:	ff 92       	push	r15
 58c:	0f 93       	push	r16
 58e:	1f 93       	push	r17
 590:	cf 93       	push	r28
 592:	df 93       	push	r29
 594:	cd b7       	in	r28, 0x3d	; 61
 596:	de b7       	in	r29, 0x3e	; 62
 598:	29 97       	sbiw	r28, 0x09	; 9
 59a:	0f b6       	in	r0, 0x3f	; 63
 59c:	f8 94       	cli
 59e:	de bf       	out	0x3e, r29	; 62
 5a0:	0f be       	out	0x3f, r0	; 63
 5a2:	cd bf       	out	0x3d, r28	; 61
 5a4:	09 83       	std	Y+1, r16	; 0x01
 5a6:	1a 83       	std	Y+2, r17	; 0x02
 5a8:	2b 83       	std	Y+3, r18	; 0x03
 5aa:	3c 83       	std	Y+4, r19	; 0x04
 5ac:	4d 83       	std	Y+5, r20	; 0x05
 5ae:	5e 83       	std	Y+6, r21	; 0x06
 5b0:	6f 83       	std	Y+7, r22	; 0x07
 5b2:	78 87       	std	Y+8, r23	; 0x08
 5b4:	89 87       	std	Y+9, r24	; 0x09
 5b6:	cd 80       	ldd	r12, Y+5	; 0x05
 5b8:	de 80       	ldd	r13, Y+6	; 0x06
 5ba:	ef 80       	ldd	r14, Y+7	; 0x07
 5bc:	f8 84       	ldd	r15, Y+8	; 0x08
 5be:	49 80       	ldd	r4, Y+1	; 0x01
 5c0:	5a 80       	ldd	r5, Y+2	; 0x02
 5c2:	6b 80       	ldd	r6, Y+3	; 0x03
 5c4:	7c 80       	ldd	r7, Y+4	; 0x04
	for (unsigned int i = 0; i < note.duration; i++) {
 5c6:	c1 14       	cp	r12, r1
 5c8:	d1 04       	cpc	r13, r1
 5ca:	e1 04       	cpc	r14, r1
 5cc:	f1 04       	cpc	r15, r1
 5ce:	e9 f0       	breq	.+58     	; 0x60a <playNote+0x92>
		if (note.frequency != REST) { SET_BIT(PORTB, 0); }
		wait_avr(note.frequency);
 5d0:	52 01       	movw	r10, r4
		if (note.breakAfter) { playNote(n); }
	}
}

void playNote(Note_t note) {
	for (unsigned int i = 0; i < note.duration; i++) {
 5d2:	00 e0       	ldi	r16, 0x00	; 0
 5d4:	10 e0       	ldi	r17, 0x00	; 0
		if (note.frequency != REST) { SET_BIT(PORTB, 0); }
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	48 16       	cp	r4, r24
 5da:	51 04       	cpc	r5, r1
 5dc:	61 04       	cpc	r6, r1
 5de:	71 04       	cpc	r7, r1
 5e0:	89 f0       	breq	.+34     	; 0x604 <playNote+0x8c>
 5e2:	c0 9a       	sbi	0x18, 0	; 24
		wait_avr(note.frequency);
 5e4:	c5 01       	movw	r24, r10
 5e6:	52 dd       	rcall	.-1372   	; 0x8c <wait_avr>
		if (note.frequency != REST) { CLR_BIT(PORTB, 0); }
 5e8:	c0 98       	cbi	0x18, 0	; 24
		wait_avr(note.frequency);
 5ea:	c5 01       	movw	r24, r10
 5ec:	4f dd       	rcall	.-1378   	; 0x8c <wait_avr>
		if (note.breakAfter) { playNote(n); }
	}
}

void playNote(Note_t note) {
	for (unsigned int i = 0; i < note.duration; i++) {
 5ee:	0f 5f       	subi	r16, 0xFF	; 255
 5f0:	1f 4f       	sbci	r17, 0xFF	; 255
 5f2:	c8 01       	movw	r24, r16
 5f4:	a0 e0       	ldi	r26, 0x00	; 0
 5f6:	b0 e0       	ldi	r27, 0x00	; 0
 5f8:	8c 15       	cp	r24, r12
 5fa:	9d 05       	cpc	r25, r13
 5fc:	ae 05       	cpc	r26, r14
 5fe:	bf 05       	cpc	r27, r15
 600:	50 f3       	brcs	.-44     	; 0x5d6 <playNote+0x5e>
 602:	03 c0       	rjmp	.+6      	; 0x60a <playNote+0x92>
		if (note.frequency != REST) { SET_BIT(PORTB, 0); }
		wait_avr(note.frequency);
 604:	c5 01       	movw	r24, r10
 606:	42 dd       	rcall	.-1404   	; 0x8c <wait_avr>
 608:	f0 cf       	rjmp	.-32     	; 0x5ea <playNote+0x72>
		if (note.frequency != REST) { CLR_BIT(PORTB, 0); }
		wait_avr(note.frequency);
	}
}
 60a:	29 96       	adiw	r28, 0x09	; 9
 60c:	0f b6       	in	r0, 0x3f	; 63
 60e:	f8 94       	cli
 610:	de bf       	out	0x3e, r29	; 62
 612:	0f be       	out	0x3f, r0	; 63
 614:	cd bf       	out	0x3d, r28	; 61
 616:	df 91       	pop	r29
 618:	cf 91       	pop	r28
 61a:	1f 91       	pop	r17
 61c:	0f 91       	pop	r16
 61e:	ff 90       	pop	r15
 620:	ef 90       	pop	r14
 622:	df 90       	pop	r13
 624:	cf 90       	pop	r12
 626:	bf 90       	pop	r11
 628:	af 90       	pop	r10
 62a:	7f 90       	pop	r7
 62c:	6f 90       	pop	r6
 62e:	5f 90       	pop	r5
 630:	4f 90       	pop	r4
 632:	08 95       	ret

00000634 <playSong>:
	for (i = 0; i < 100; i++) { }
	
	return GET_BIT(PINC, c) == 0;
}

void playSong(unsigned int noteCount) {
 634:	8f 92       	push	r8
 636:	9f 92       	push	r9
 638:	af 92       	push	r10
 63a:	bf 92       	push	r11
 63c:	cf 92       	push	r12
 63e:	df 92       	push	r13
 640:	ef 92       	push	r14
 642:	ff 92       	push	r15
 644:	0f 93       	push	r16
 646:	1f 93       	push	r17
 648:	cf 93       	push	r28
 64a:	df 93       	push	r29
 64c:	cd b7       	in	r28, 0x3d	; 61
 64e:	de b7       	in	r29, 0x3e	; 62
 650:	62 97       	sbiw	r28, 0x12	; 18
 652:	0f b6       	in	r0, 0x3f	; 63
 654:	f8 94       	cli
 656:	de bf       	out	0x3e, r29	; 62
 658:	0f be       	out	0x3f, r0	; 63
 65a:	cd bf       	out	0x3d, r28	; 61
 65c:	6c 01       	movw	r12, r24
	Note_t n;
	n.frequency = getFrequency('!');
 65e:	81 e2       	ldi	r24, 0x21	; 33
 660:	66 dd       	rcall	.-1332   	; 0x12e <getFrequency>
 662:	b6 2e       	mov	r11, r22
 664:	a7 2e       	mov	r10, r23
 666:	98 2e       	mov	r9, r24
 668:	89 2e       	mov	r8, r25
	n.duration = getDuration('8', n.frequency);
 66a:	46 2f       	mov	r20, r22
 66c:	57 2f       	mov	r21, r23
 66e:	68 2f       	mov	r22, r24
 670:	79 2f       	mov	r23, r25
 672:	88 e3       	ldi	r24, 0x38	; 56
 674:	81 de       	rcall	.-766    	; 0x378 <getDuration>
 676:	6d 83       	std	Y+5, r22	; 0x05
 678:	7e 83       	std	Y+6, r23	; 0x06
 67a:	8f 83       	std	Y+7, r24	; 0x07
 67c:	98 87       	std	Y+8, r25	; 0x08
	n.breakAfter = getTie('0');
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	89 87       	std	Y+9, r24	; 0x09
	for (unsigned int i = 0; i < noteCount; i++) {
 682:	c1 14       	cp	r12, r1
 684:	d1 04       	cpc	r13, r1
 686:	39 f1       	breq	.+78     	; 0x6d6 <playSong+0xa2>
 688:	e1 2c       	mov	r14, r1
 68a:	f1 2c       	mov	r15, r1
		Note_t note = stillAlive(i);
 68c:	b7 01       	movw	r22, r14
 68e:	ce 01       	movw	r24, r28
 690:	0a 96       	adiw	r24, 0x0a	; 10
 692:	d2 de       	rcall	.-604    	; 0x438 <stillAlive>
		playNote(note);
 694:	0a 85       	ldd	r16, Y+10	; 0x0a
 696:	1b 85       	ldd	r17, Y+11	; 0x0b
 698:	2c 85       	ldd	r18, Y+12	; 0x0c
 69a:	3d 85       	ldd	r19, Y+13	; 0x0d
 69c:	4e 85       	ldd	r20, Y+14	; 0x0e
 69e:	5f 85       	ldd	r21, Y+15	; 0x0f
 6a0:	68 89       	ldd	r22, Y+16	; 0x10
 6a2:	79 89       	ldd	r23, Y+17	; 0x11
 6a4:	8a 89       	ldd	r24, Y+18	; 0x12
 6a6:	68 df       	rcall	.-304    	; 0x578 <playNote>
		if (note.breakAfter) { playNote(n); }
 6a8:	2a 89       	ldd	r18, Y+18	; 0x12
 6aa:	22 23       	and	r18, r18
 6ac:	71 f0       	breq	.+28     	; 0x6ca <playSong+0x96>
 6ae:	0b 2d       	mov	r16, r11
 6b0:	b9 82       	std	Y+1, r11	; 0x01
 6b2:	aa 82       	std	Y+2, r10	; 0x02
 6b4:	9b 82       	std	Y+3, r9	; 0x03
 6b6:	8c 82       	std	Y+4, r8	; 0x04
 6b8:	1a 2d       	mov	r17, r10
 6ba:	29 2d       	mov	r18, r9
 6bc:	38 2d       	mov	r19, r8
 6be:	4d 81       	ldd	r20, Y+5	; 0x05
 6c0:	5e 81       	ldd	r21, Y+6	; 0x06
 6c2:	6f 81       	ldd	r22, Y+7	; 0x07
 6c4:	78 85       	ldd	r23, Y+8	; 0x08
 6c6:	89 85       	ldd	r24, Y+9	; 0x09
 6c8:	57 df       	rcall	.-338    	; 0x578 <playNote>
void playSong(unsigned int noteCount) {
	Note_t n;
	n.frequency = getFrequency('!');
	n.duration = getDuration('8', n.frequency);
	n.breakAfter = getTie('0');
	for (unsigned int i = 0; i < noteCount; i++) {
 6ca:	8f ef       	ldi	r24, 0xFF	; 255
 6cc:	e8 1a       	sub	r14, r24
 6ce:	f8 0a       	sbc	r15, r24
 6d0:	ec 14       	cp	r14, r12
 6d2:	fd 04       	cpc	r15, r13
 6d4:	d9 f6       	brne	.-74     	; 0x68c <playSong+0x58>
		Note_t note = stillAlive(i);
		playNote(note);
		if (note.breakAfter) { playNote(n); }
	}
}
 6d6:	62 96       	adiw	r28, 0x12	; 18
 6d8:	0f b6       	in	r0, 0x3f	; 63
 6da:	f8 94       	cli
 6dc:	de bf       	out	0x3e, r29	; 62
 6de:	0f be       	out	0x3f, r0	; 63
 6e0:	cd bf       	out	0x3d, r28	; 61
 6e2:	df 91       	pop	r29
 6e4:	cf 91       	pop	r28
 6e6:	1f 91       	pop	r17
 6e8:	0f 91       	pop	r16
 6ea:	ff 90       	pop	r15
 6ec:	ef 90       	pop	r14
 6ee:	df 90       	pop	r13
 6f0:	cf 90       	pop	r12
 6f2:	bf 90       	pop	r11
 6f4:	af 90       	pop	r10
 6f6:	9f 90       	pop	r9
 6f8:	8f 90       	pop	r8
 6fa:	08 95       	ret

000006fc <main>:
	}
}

int main (void)
{
	board_init();
 6fc:	14 d0       	rcall	.+40     	; 0x726 <board_init>
	ini_lcd();
 6fe:	f4 dc       	rcall	.-1560   	; 0xe8 <ini_lcd>
	for (int i = 0; i < 16; i++)
	{
		buttonPreSta[i] = false;
	}
	
	clr_lcd();
 700:	12 dd       	rcall	.-1500   	; 0x126 <clr_lcd>
	SET_BIT(DDRB, 0);
 702:	b8 9a       	sbi	0x17, 0	; 23
	
	unsigned int play = 0;
	while(true)
	{
		if (check_press(0, 0)) {
 704:	60 e0       	ldi	r22, 0x00	; 0
 706:	70 e0       	ldi	r23, 0x00	; 0
 708:	80 e0       	ldi	r24, 0x00	; 0
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	c8 de       	rcall	.-624    	; 0x49e <check_press>
 70e:	81 11       	cpse	r24, r1
 710:	06 c0       	rjmp	.+12     	; 0x71e <main+0x22>
			play = 1;
		} else if (check_press(0, 1)) {
 712:	61 e0       	ldi	r22, 0x01	; 1
 714:	70 e0       	ldi	r23, 0x00	; 0
 716:	80 e0       	ldi	r24, 0x00	; 0
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	c1 de       	rcall	.-638    	; 0x49e <check_press>
 71c:	f3 cf       	rjmp	.-26     	; 0x704 <main+0x8>
			play = 2;
		}
		if (play == 1) {
			playSong(STILL_ALIVE_SONG_LENGTH);
 71e:	84 eb       	ldi	r24, 0xB4	; 180
 720:	91 e0       	ldi	r25, 0x01	; 1
 722:	88 df       	rcall	.-240    	; 0x634 <playSong>
 724:	ef cf       	rjmp	.-34     	; 0x704 <main+0x8>

00000726 <board_init>:
#include <compiler.h>
#include <conf_board.h>


void board_init(void)
{
 726:	08 95       	ret

00000728 <__udivmodsi4>:
 728:	a1 e2       	ldi	r26, 0x21	; 33
 72a:	1a 2e       	mov	r1, r26
 72c:	aa 1b       	sub	r26, r26
 72e:	bb 1b       	sub	r27, r27
 730:	fd 01       	movw	r30, r26
 732:	0d c0       	rjmp	.+26     	; 0x74e <__udivmodsi4_ep>

00000734 <__udivmodsi4_loop>:
 734:	aa 1f       	adc	r26, r26
 736:	bb 1f       	adc	r27, r27
 738:	ee 1f       	adc	r30, r30
 73a:	ff 1f       	adc	r31, r31
 73c:	a2 17       	cp	r26, r18
 73e:	b3 07       	cpc	r27, r19
 740:	e4 07       	cpc	r30, r20
 742:	f5 07       	cpc	r31, r21
 744:	20 f0       	brcs	.+8      	; 0x74e <__udivmodsi4_ep>
 746:	a2 1b       	sub	r26, r18
 748:	b3 0b       	sbc	r27, r19
 74a:	e4 0b       	sbc	r30, r20
 74c:	f5 0b       	sbc	r31, r21

0000074e <__udivmodsi4_ep>:
 74e:	66 1f       	adc	r22, r22
 750:	77 1f       	adc	r23, r23
 752:	88 1f       	adc	r24, r24
 754:	99 1f       	adc	r25, r25
 756:	1a 94       	dec	r1
 758:	69 f7       	brne	.-38     	; 0x734 <__udivmodsi4_loop>
 75a:	60 95       	com	r22
 75c:	70 95       	com	r23
 75e:	80 95       	com	r24
 760:	90 95       	com	r25
 762:	9b 01       	movw	r18, r22
 764:	ac 01       	movw	r20, r24
 766:	bd 01       	movw	r22, r26
 768:	cf 01       	movw	r24, r30
 76a:	08 95       	ret

0000076c <_exit>:
 76c:	f8 94       	cli

0000076e <__stop_program>:
 76e:	ff cf       	rjmp	.-2      	; 0x76e <__stop_program>
