
Sdexample.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000032c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  000032c8  0000335c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000453  008000b2  008000b2  000033ae  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000033ae  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002a8  00000000  00000000  0000340a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000047ec  00000000  00000000  000036b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000095f  00000000  00000000  00007e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000035f4  00000000  00000000  000087fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000d44  00000000  00000000  0000bdf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000de7d  00000000  00000000  0000cb38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00006908  00000000  00000000  0001a9b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000328  00000000  00000000  000212bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003a88  00000000  00000000  000215e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
       2:	00 00       	nop
       4:	44 c0       	rjmp	.+136    	; 0x8e <__bad_interrupt>
       6:	00 00       	nop
       8:	42 c0       	rjmp	.+132    	; 0x8e <__bad_interrupt>
       a:	00 00       	nop
       c:	40 c0       	rjmp	.+128    	; 0x8e <__bad_interrupt>
       e:	00 00       	nop
      10:	3e c0       	rjmp	.+124    	; 0x8e <__bad_interrupt>
      12:	00 00       	nop
      14:	3c c0       	rjmp	.+120    	; 0x8e <__bad_interrupt>
      16:	00 00       	nop
      18:	3a c0       	rjmp	.+116    	; 0x8e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	38 c0       	rjmp	.+112    	; 0x8e <__bad_interrupt>
      1e:	00 00       	nop
      20:	36 c0       	rjmp	.+108    	; 0x8e <__bad_interrupt>
      22:	00 00       	nop
      24:	34 c0       	rjmp	.+104    	; 0x8e <__bad_interrupt>
      26:	00 00       	nop
      28:	32 c0       	rjmp	.+100    	; 0x8e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	30 c0       	rjmp	.+96     	; 0x8e <__bad_interrupt>
      2e:	00 00       	nop
      30:	2e c0       	rjmp	.+92     	; 0x8e <__bad_interrupt>
      32:	00 00       	nop
      34:	2c c0       	rjmp	.+88     	; 0x8e <__bad_interrupt>
      36:	00 00       	nop
      38:	2a c0       	rjmp	.+84     	; 0x8e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	28 c0       	rjmp	.+80     	; 0x8e <__bad_interrupt>
      3e:	00 00       	nop
      40:	26 c0       	rjmp	.+76     	; 0x8e <__bad_interrupt>
      42:	00 00       	nop
      44:	24 c0       	rjmp	.+72     	; 0x8e <__bad_interrupt>
      46:	00 00       	nop
      48:	22 c0       	rjmp	.+68     	; 0x8e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	20 c0       	rjmp	.+64     	; 0x8e <__bad_interrupt>
      4e:	00 00       	nop
      50:	1e c0       	rjmp	.+60     	; 0x8e <__bad_interrupt>
	...

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ec       	ldi	r30, 0xC8	; 200
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 3b       	cpi	r26, 0xB2	; 178
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	25 e0       	ldi	r18, 0x05	; 5
      78:	a2 eb       	ldi	r26, 0xB2	; 178
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 30       	cpi	r26, 0x05	; 5
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 03 12 	call	0x2406	; 0x2406 <main>
      8a:	0c 94 62 19 	jmp	0x32c4	; 0x32c4 <_exit>

0000008e <__bad_interrupt>:
      8e:	b8 cf       	rjmp	.-144    	; 0x0 <__vectors>

00000090 <wait_avr>:
}

void
wait_avr(unsigned short msec)
{
	TCCR0 = 3;
      90:	23 e0       	ldi	r18, 0x03	; 3
      92:	23 bf       	out	0x33, r18	; 51
	while (msec--) {
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.00001);
      94:	3e ef       	ldi	r19, 0xFE	; 254

void
wait_avr(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
      96:	08 c0       	rjmp	.+16     	; 0xa8 <wait_avr+0x18>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.00001);
      98:	32 bf       	out	0x32, r19	; 50
		SET_BIT(TIFR, TOV0);
      9a:	28 b7       	in	r18, 0x38	; 56
      9c:	21 60       	ori	r18, 0x01	; 1
      9e:	28 bf       	out	0x38, r18	; 56
		WDR();
      a0:	a8 95       	wdr
		while (!GET_BIT(TIFR, TOV0));
      a2:	08 b6       	in	r0, 0x38	; 56
      a4:	00 fe       	sbrs	r0, 0
      a6:	fd cf       	rjmp	.-6      	; 0xa2 <wait_avr+0x12>

void
wait_avr(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
      a8:	01 97       	sbiw	r24, 0x01	; 1
      aa:	b0 f7       	brcc	.-20     	; 0x98 <wait_avr+0x8>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.00001);
		SET_BIT(TIFR, TOV0);
		WDR();
		while (!GET_BIT(TIFR, TOV0));
	}
	TCCR0 = 0;
      ac:	13 be       	out	0x33, r1	; 51
      ae:	08 95       	ret

000000b0 <mem_cpy>:
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
      b0:	41 15       	cp	r20, r1
      b2:	51 05       	cpc	r21, r1
      b4:	51 f0       	breq	.+20     	; 0xca <mem_cpy+0x1a>
      b6:	a6 2f       	mov	r26, r22
      b8:	b7 2f       	mov	r27, r23
      ba:	fc 01       	movw	r30, r24
      bc:	84 0f       	add	r24, r20
      be:	95 1f       	adc	r25, r21
      c0:	2d 91       	ld	r18, X+
      c2:	21 93       	st	Z+, r18
      c4:	e8 17       	cp	r30, r24
      c6:	f9 07       	cpc	r31, r25
      c8:	d9 f7       	brne	.-10     	; 0xc0 <mem_cpy+0x10>
      ca:	08 95       	ret

000000cc <ld_clust>:
      cc:	0f 93       	push	r16
      ce:	1f 93       	push	r17
      d0:	dc 01       	movw	r26, r24
      d2:	fb 01       	movw	r30, r22
      d4:	63 8d       	ldd	r22, Z+27	; 0x1b
      d6:	70 e0       	ldi	r23, 0x00	; 0
      d8:	76 2f       	mov	r23, r22
      da:	66 27       	eor	r22, r22
      dc:	82 8d       	ldd	r24, Z+26	; 0x1a
      de:	68 2b       	or	r22, r24
      e0:	80 e0       	ldi	r24, 0x00	; 0
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	2c 91       	ld	r18, X
      e6:	23 30       	cpi	r18, 0x03	; 3
      e8:	79 f4       	brne	.+30     	; 0x108 <ld_clust+0x3c>
      ea:	05 89       	ldd	r16, Z+21	; 0x15
      ec:	10 e0       	ldi	r17, 0x00	; 0
      ee:	10 2f       	mov	r17, r16
      f0:	00 27       	eor	r16, r16
      f2:	24 89       	ldd	r18, Z+20	; 0x14
      f4:	02 2b       	or	r16, r18
      f6:	20 e0       	ldi	r18, 0x00	; 0
      f8:	30 e0       	ldi	r19, 0x00	; 0
      fa:	98 01       	movw	r18, r16
      fc:	11 27       	eor	r17, r17
      fe:	00 27       	eor	r16, r16
     100:	60 2b       	or	r22, r16
     102:	71 2b       	or	r23, r17
     104:	82 2b       	or	r24, r18
     106:	93 2b       	or	r25, r19
     108:	1f 91       	pop	r17
     10a:	0f 91       	pop	r16
     10c:	08 95       	ret

0000010e <get_ldnumber>:
     10e:	fc 01       	movw	r30, r24
     110:	a0 81       	ld	r26, Z
     112:	b1 81       	ldd	r27, Z+1	; 0x01
     114:	10 97       	sbiw	r26, 0x00	; 0
     116:	09 f1       	breq	.+66     	; 0x15a <get_ldnumber+0x4c>
     118:	6c 91       	ld	r22, X
     11a:	61 32       	cpi	r22, 0x21	; 33
     11c:	58 f0       	brcs	.+22     	; 0x134 <get_ldnumber+0x26>
     11e:	6a 33       	cpi	r22, 0x3A	; 58
     120:	41 f1       	breq	.+80     	; 0x172 <get_ldnumber+0x64>
     122:	fd 01       	movw	r30, r26
     124:	31 96       	adiw	r30, 0x01	; 1
     126:	9f 01       	movw	r18, r30
     128:	41 91       	ld	r20, Z+
     12a:	41 32       	cpi	r20, 0x21	; 33
     12c:	28 f0       	brcs	.+10     	; 0x138 <get_ldnumber+0x2a>
     12e:	4a 33       	cpi	r20, 0x3A	; 58
     130:	d1 f7       	brne	.-12     	; 0x126 <get_ldnumber+0x18>
     132:	04 c0       	rjmp	.+8      	; 0x13c <get_ldnumber+0x2e>
     134:	46 2f       	mov	r20, r22
     136:	9d 01       	movw	r18, r26
     138:	4a 33       	cpi	r20, 0x3A	; 58
     13a:	91 f4       	brne	.+36     	; 0x160 <get_ldnumber+0x52>
     13c:	ad 01       	movw	r20, r26
     13e:	4f 5f       	subi	r20, 0xFF	; 255
     140:	5f 4f       	sbci	r21, 0xFF	; 255
     142:	24 17       	cp	r18, r20
     144:	35 07       	cpc	r19, r21
     146:	79 f4       	brne	.+30     	; 0x166 <get_ldnumber+0x58>
     148:	60 33       	cpi	r22, 0x30	; 48
     14a:	81 f4       	brne	.+32     	; 0x16c <get_ldnumber+0x5e>
     14c:	12 96       	adiw	r26, 0x02	; 2
     14e:	fc 01       	movw	r30, r24
     150:	b1 83       	std	Z+1, r27	; 0x01
     152:	a0 83       	st	Z, r26
     154:	80 e0       	ldi	r24, 0x00	; 0
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	08 95       	ret
     15a:	8f ef       	ldi	r24, 0xFF	; 255
     15c:	9f ef       	ldi	r25, 0xFF	; 255
     15e:	08 95       	ret
     160:	80 e0       	ldi	r24, 0x00	; 0
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	08 95       	ret
     166:	8f ef       	ldi	r24, 0xFF	; 255
     168:	9f ef       	ldi	r25, 0xFF	; 255
     16a:	08 95       	ret
     16c:	8f ef       	ldi	r24, 0xFF	; 255
     16e:	9f ef       	ldi	r25, 0xFF	; 255
     170:	08 95       	ret
     172:	9d 01       	movw	r18, r26
     174:	e3 cf       	rjmp	.-58     	; 0x13c <get_ldnumber+0x2e>

00000176 <sync_window>:
     176:	8f 92       	push	r8
     178:	9f 92       	push	r9
     17a:	af 92       	push	r10
     17c:	bf 92       	push	r11
     17e:	cf 92       	push	r12
     180:	df 92       	push	r13
     182:	ef 92       	push	r14
     184:	ff 92       	push	r15
     186:	0f 93       	push	r16
     188:	1f 93       	push	r17
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	ec 01       	movw	r28, r24
     190:	8c 81       	ldd	r24, Y+4	; 0x04
     192:	88 23       	and	r24, r24
     194:	09 f4       	brne	.+2      	; 0x198 <sync_window+0x22>
     196:	44 c0       	rjmp	.+136    	; 0x220 <sync_window+0xaa>
     198:	ca a4       	ldd	r12, Y+42	; 0x2a
     19a:	db a4       	ldd	r13, Y+43	; 0x2b
     19c:	ec a4       	ldd	r14, Y+44	; 0x2c
     19e:	fd a4       	ldd	r15, Y+45	; 0x2d
     1a0:	5e 01       	movw	r10, r28
     1a2:	8e e2       	ldi	r24, 0x2E	; 46
     1a4:	a8 0e       	add	r10, r24
     1a6:	b1 1c       	adc	r11, r1
     1a8:	01 e0       	ldi	r16, 0x01	; 1
     1aa:	10 e0       	ldi	r17, 0x00	; 0
     1ac:	a7 01       	movw	r20, r14
     1ae:	96 01       	movw	r18, r12
     1b0:	b5 01       	movw	r22, r10
     1b2:	89 81       	ldd	r24, Y+1	; 0x01
     1b4:	0e 94 49 15 	call	0x2a92	; 0x2a92 <disk_write>
     1b8:	81 11       	cpse	r24, r1
     1ba:	34 c0       	rjmp	.+104    	; 0x224 <sync_window+0xae>
     1bc:	1c 82       	std	Y+4, r1	; 0x04
     1be:	8e 8d       	ldd	r24, Y+30	; 0x1e
     1c0:	9f 8d       	ldd	r25, Y+31	; 0x1f
     1c2:	a8 a1       	ldd	r26, Y+32	; 0x20
     1c4:	b9 a1       	ldd	r27, Y+33	; 0x21
     1c6:	b7 01       	movw	r22, r14
     1c8:	a6 01       	movw	r20, r12
     1ca:	48 1b       	sub	r20, r24
     1cc:	59 0b       	sbc	r21, r25
     1ce:	6a 0b       	sbc	r22, r26
     1d0:	7b 0b       	sbc	r23, r27
     1d2:	8e 89       	ldd	r24, Y+22	; 0x16
     1d4:	9f 89       	ldd	r25, Y+23	; 0x17
     1d6:	a8 8d       	ldd	r26, Y+24	; 0x18
     1d8:	b9 8d       	ldd	r27, Y+25	; 0x19
     1da:	48 17       	cp	r20, r24
     1dc:	59 07       	cpc	r21, r25
     1de:	6a 07       	cpc	r22, r26
     1e0:	7b 07       	cpc	r23, r27
     1e2:	10 f5       	brcc	.+68     	; 0x228 <sync_window+0xb2>
     1e4:	8b 80       	ldd	r8, Y+3	; 0x03
     1e6:	91 2c       	mov	r9, r1
     1e8:	82 e0       	ldi	r24, 0x02	; 2
     1ea:	88 16       	cp	r8, r24
     1ec:	91 04       	cpc	r9, r1
     1ee:	f0 f0       	brcs	.+60     	; 0x22c <sync_window+0xb6>
     1f0:	8e 89       	ldd	r24, Y+22	; 0x16
     1f2:	9f 89       	ldd	r25, Y+23	; 0x17
     1f4:	a8 8d       	ldd	r26, Y+24	; 0x18
     1f6:	b9 8d       	ldd	r27, Y+25	; 0x19
     1f8:	c8 0e       	add	r12, r24
     1fa:	d9 1e       	adc	r13, r25
     1fc:	ea 1e       	adc	r14, r26
     1fe:	fb 1e       	adc	r15, r27
     200:	01 e0       	ldi	r16, 0x01	; 1
     202:	10 e0       	ldi	r17, 0x00	; 0
     204:	a7 01       	movw	r20, r14
     206:	96 01       	movw	r18, r12
     208:	b5 01       	movw	r22, r10
     20a:	89 81       	ldd	r24, Y+1	; 0x01
     20c:	0e 94 49 15 	call	0x2a92	; 0x2a92 <disk_write>
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	88 1a       	sub	r8, r24
     214:	91 08       	sbc	r9, r1
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	88 16       	cp	r8, r24
     21a:	91 04       	cpc	r9, r1
     21c:	49 f7       	brne	.-46     	; 0x1f0 <sync_window+0x7a>
     21e:	08 c0       	rjmp	.+16     	; 0x230 <sync_window+0xba>
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	07 c0       	rjmp	.+14     	; 0x232 <sync_window+0xbc>
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	05 c0       	rjmp	.+10     	; 0x232 <sync_window+0xbc>
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	03 c0       	rjmp	.+6      	; 0x232 <sync_window+0xbc>
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	01 c0       	rjmp	.+2      	; 0x232 <sync_window+0xbc>
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	df 91       	pop	r29
     234:	cf 91       	pop	r28
     236:	1f 91       	pop	r17
     238:	0f 91       	pop	r16
     23a:	ff 90       	pop	r15
     23c:	ef 90       	pop	r14
     23e:	df 90       	pop	r13
     240:	cf 90       	pop	r12
     242:	bf 90       	pop	r11
     244:	af 90       	pop	r10
     246:	9f 90       	pop	r9
     248:	8f 90       	pop	r8
     24a:	08 95       	ret

0000024c <move_window>:
     24c:	cf 92       	push	r12
     24e:	df 92       	push	r13
     250:	ef 92       	push	r14
     252:	ff 92       	push	r15
     254:	0f 93       	push	r16
     256:	1f 93       	push	r17
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	ec 01       	movw	r28, r24
     25e:	6a 01       	movw	r12, r20
     260:	7b 01       	movw	r14, r22
     262:	4a a5       	ldd	r20, Y+42	; 0x2a
     264:	5b a5       	ldd	r21, Y+43	; 0x2b
     266:	6c a5       	ldd	r22, Y+44	; 0x2c
     268:	7d a5       	ldd	r23, Y+45	; 0x2d
     26a:	4c 15       	cp	r20, r12
     26c:	5d 05       	cpc	r21, r13
     26e:	6e 05       	cpc	r22, r14
     270:	7f 05       	cpc	r23, r15
     272:	a1 f0       	breq	.+40     	; 0x29c <move_window+0x50>
     274:	80 df       	rcall	.-256    	; 0x176 <sync_window>
     276:	81 11       	cpse	r24, r1
     278:	13 c0       	rjmp	.+38     	; 0x2a0 <move_window+0x54>
     27a:	01 e0       	ldi	r16, 0x01	; 1
     27c:	10 e0       	ldi	r17, 0x00	; 0
     27e:	a7 01       	movw	r20, r14
     280:	96 01       	movw	r18, r12
     282:	be 01       	movw	r22, r28
     284:	62 5d       	subi	r22, 0xD2	; 210
     286:	7f 4f       	sbci	r23, 0xFF	; 255
     288:	89 81       	ldd	r24, Y+1	; 0x01
     28a:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <disk_read>
     28e:	81 11       	cpse	r24, r1
     290:	09 c0       	rjmp	.+18     	; 0x2a4 <move_window+0x58>
     292:	ca a6       	std	Y+42, r12	; 0x2a
     294:	db a6       	std	Y+43, r13	; 0x2b
     296:	ec a6       	std	Y+44, r14	; 0x2c
     298:	fd a6       	std	Y+45, r15	; 0x2d
     29a:	05 c0       	rjmp	.+10     	; 0x2a6 <move_window+0x5a>
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	03 c0       	rjmp	.+6      	; 0x2a6 <move_window+0x5a>
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <move_window+0x5a>
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	df 91       	pop	r29
     2a8:	cf 91       	pop	r28
     2aa:	1f 91       	pop	r17
     2ac:	0f 91       	pop	r16
     2ae:	ff 90       	pop	r15
     2b0:	ef 90       	pop	r14
     2b2:	df 90       	pop	r13
     2b4:	cf 90       	pop	r12
     2b6:	08 95       	ret

000002b8 <check_fs>:
     2b8:	0f 93       	push	r16
     2ba:	1f 93       	push	r17
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
     2c0:	ec 01       	movw	r28, r24
     2c2:	1c 82       	std	Y+4, r1	; 0x04
     2c4:	0f ef       	ldi	r16, 0xFF	; 255
     2c6:	1f ef       	ldi	r17, 0xFF	; 255
     2c8:	98 01       	movw	r18, r16
     2ca:	0a a7       	std	Y+42, r16	; 0x2a
     2cc:	1b a7       	std	Y+43, r17	; 0x2b
     2ce:	2c a7       	std	Y+44, r18	; 0x2c
     2d0:	3d a7       	std	Y+45, r19	; 0x2d
     2d2:	bc df       	rcall	.-136    	; 0x24c <move_window>
     2d4:	81 11       	cpse	r24, r1
     2d6:	51 c0       	rjmp	.+162    	; 0x37a <check_fs+0xc2>
     2d8:	fe 01       	movw	r30, r28
     2da:	e3 5d       	subi	r30, 0xD3	; 211
     2dc:	fd 4f       	sbci	r31, 0xFD	; 253
     2de:	80 81       	ld	r24, Z
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	98 2f       	mov	r25, r24
     2e4:	88 27       	eor	r24, r24
     2e6:	31 97       	sbiw	r30, 0x01	; 1
     2e8:	20 81       	ld	r18, Z
     2ea:	82 2b       	or	r24, r18
     2ec:	85 35       	cpi	r24, 0x55	; 85
     2ee:	9a 4a       	sbci	r25, 0xAA	; 170
     2f0:	09 f0       	breq	.+2      	; 0x2f4 <check_fs+0x3c>
     2f2:	45 c0       	rjmp	.+138    	; 0x37e <check_fs+0xc6>
     2f4:	e5 5c       	subi	r30, 0xC5	; 197
     2f6:	f1 40       	sbci	r31, 0x01	; 1
     2f8:	80 81       	ld	r24, Z
     2fa:	31 97       	sbiw	r30, 0x01	; 1
     2fc:	40 81       	ld	r20, Z
     2fe:	50 e0       	ldi	r21, 0x00	; 0
     300:	60 e0       	ldi	r22, 0x00	; 0
     302:	70 e0       	ldi	r23, 0x00	; 0
     304:	ba 01       	movw	r22, r20
     306:	55 27       	eor	r21, r21
     308:	44 27       	eor	r20, r20
     30a:	78 2b       	or	r23, r24
     30c:	32 97       	sbiw	r30, 0x02	; 2
     30e:	80 81       	ld	r24, Z
     310:	48 2b       	or	r20, r24
     312:	31 96       	adiw	r30, 0x01	; 1
     314:	00 81       	ld	r16, Z
     316:	10 e0       	ldi	r17, 0x00	; 0
     318:	10 2f       	mov	r17, r16
     31a:	00 27       	eor	r16, r16
     31c:	20 e0       	ldi	r18, 0x00	; 0
     31e:	30 e0       	ldi	r19, 0x00	; 0
     320:	40 2b       	or	r20, r16
     322:	51 2b       	or	r21, r17
     324:	62 2b       	or	r22, r18
     326:	73 2b       	or	r23, r19
     328:	77 27       	eor	r23, r23
     32a:	46 34       	cpi	r20, 0x46	; 70
     32c:	51 44       	sbci	r21, 0x41	; 65
     32e:	64 45       	sbci	r22, 0x54	; 84
     330:	71 05       	cpc	r23, r1
     332:	39 f1       	breq	.+78     	; 0x382 <check_fs+0xca>
     334:	7e 96       	adiw	r30, 0x1e	; 30
     336:	80 81       	ld	r24, Z
     338:	31 97       	sbiw	r30, 0x01	; 1
     33a:	40 81       	ld	r20, Z
     33c:	50 e0       	ldi	r21, 0x00	; 0
     33e:	60 e0       	ldi	r22, 0x00	; 0
     340:	70 e0       	ldi	r23, 0x00	; 0
     342:	ba 01       	movw	r22, r20
     344:	55 27       	eor	r21, r21
     346:	44 27       	eor	r20, r20
     348:	78 2b       	or	r23, r24
     34a:	32 97       	sbiw	r30, 0x02	; 2
     34c:	80 81       	ld	r24, Z
     34e:	48 2b       	or	r20, r24
     350:	cf 57       	subi	r28, 0x7F	; 127
     352:	df 4f       	sbci	r29, 0xFF	; 255
     354:	88 81       	ld	r24, Y
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	98 2f       	mov	r25, r24
     35a:	88 27       	eor	r24, r24
     35c:	a0 e0       	ldi	r26, 0x00	; 0
     35e:	b0 e0       	ldi	r27, 0x00	; 0
     360:	48 2b       	or	r20, r24
     362:	59 2b       	or	r21, r25
     364:	6a 2b       	or	r22, r26
     366:	7b 2b       	or	r23, r27
     368:	77 27       	eor	r23, r23
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	46 34       	cpi	r20, 0x46	; 70
     36e:	51 44       	sbci	r21, 0x41	; 65
     370:	64 45       	sbci	r22, 0x54	; 84
     372:	71 05       	cpc	r23, r1
     374:	39 f4       	brne	.+14     	; 0x384 <check_fs+0xcc>
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	05 c0       	rjmp	.+10     	; 0x384 <check_fs+0xcc>
     37a:	83 e0       	ldi	r24, 0x03	; 3
     37c:	03 c0       	rjmp	.+6      	; 0x384 <check_fs+0xcc>
     37e:	82 e0       	ldi	r24, 0x02	; 2
     380:	01 c0       	rjmp	.+2      	; 0x384 <check_fs+0xcc>
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	1f 91       	pop	r17
     38a:	0f 91       	pop	r16
     38c:	08 95       	ret

0000038e <validate>:
     38e:	00 97       	sbiw	r24, 0x00	; 0
     390:	c9 f0       	breq	.+50     	; 0x3c4 <validate+0x36>
     392:	dc 01       	movw	r26, r24
     394:	ed 91       	ld	r30, X+
     396:	fc 91       	ld	r31, X
     398:	11 97       	sbiw	r26, 0x01	; 1
     39a:	30 97       	sbiw	r30, 0x00	; 0
     39c:	a9 f0       	breq	.+42     	; 0x3c8 <validate+0x3a>
     39e:	20 81       	ld	r18, Z
     3a0:	22 23       	and	r18, r18
     3a2:	a1 f0       	breq	.+40     	; 0x3cc <validate+0x3e>
     3a4:	26 81       	ldd	r18, Z+6	; 0x06
     3a6:	37 81       	ldd	r19, Z+7	; 0x07
     3a8:	12 96       	adiw	r26, 0x02	; 2
     3aa:	8d 91       	ld	r24, X+
     3ac:	9c 91       	ld	r25, X
     3ae:	13 97       	sbiw	r26, 0x03	; 3
     3b0:	28 17       	cp	r18, r24
     3b2:	39 07       	cpc	r19, r25
     3b4:	69 f4       	brne	.+26     	; 0x3d0 <validate+0x42>
     3b6:	81 81       	ldd	r24, Z+1	; 0x01
     3b8:	0e 94 35 14 	call	0x286a	; 0x286a <disk_status>
     3bc:	80 ff       	sbrs	r24, 0
     3be:	0a c0       	rjmp	.+20     	; 0x3d4 <validate+0x46>
     3c0:	83 e0       	ldi	r24, 0x03	; 3
     3c2:	08 95       	ret
     3c4:	89 e0       	ldi	r24, 0x09	; 9
     3c6:	08 95       	ret
     3c8:	89 e0       	ldi	r24, 0x09	; 9
     3ca:	08 95       	ret
     3cc:	89 e0       	ldi	r24, 0x09	; 9
     3ce:	08 95       	ret
     3d0:	89 e0       	ldi	r24, 0x09	; 9
     3d2:	08 95       	ret
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	08 95       	ret

000003d8 <find_volume>:
     3d8:	2f 92       	push	r2
     3da:	3f 92       	push	r3
     3dc:	4f 92       	push	r4
     3de:	5f 92       	push	r5
     3e0:	6f 92       	push	r6
     3e2:	7f 92       	push	r7
     3e4:	8f 92       	push	r8
     3e6:	9f 92       	push	r9
     3e8:	af 92       	push	r10
     3ea:	bf 92       	push	r11
     3ec:	cf 92       	push	r12
     3ee:	df 92       	push	r13
     3f0:	ef 92       	push	r14
     3f2:	ff 92       	push	r15
     3f4:	0f 93       	push	r16
     3f6:	1f 93       	push	r17
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	cd b7       	in	r28, 0x3d	; 61
     3fe:	de b7       	in	r29, 0x3e	; 62
     400:	6d 97       	sbiw	r28, 0x1d	; 29
     402:	0f b6       	in	r0, 0x3f	; 63
     404:	f8 94       	cli
     406:	de bf       	out	0x3e, r29	; 62
     408:	0f be       	out	0x3f, r0	; 63
     40a:	cd bf       	out	0x3d, r28	; 61
     40c:	6c 01       	movw	r12, r24
     40e:	cb 01       	movw	r24, r22
     410:	b4 2e       	mov	r11, r20
     412:	d6 01       	movw	r26, r12
     414:	1d 92       	st	X+, r1
     416:	1c 92       	st	X, r1
     418:	7a de       	rcall	.-780    	; 0x10e <get_ldnumber>
     41a:	7c 01       	movw	r14, r24
     41c:	99 23       	and	r25, r25
     41e:	0c f4       	brge	.+2      	; 0x422 <find_volume+0x4a>
     420:	e3 c2       	rjmp	.+1478   	; 0x9e8 <__stack+0x189>
     422:	fc 01       	movw	r30, r24
     424:	ee 0f       	add	r30, r30
     426:	ff 1f       	adc	r31, r31
     428:	ec 54       	subi	r30, 0x4C	; 76
     42a:	ff 4f       	sbci	r31, 0xFF	; 255
     42c:	00 81       	ld	r16, Z
     42e:	11 81       	ldd	r17, Z+1	; 0x01
     430:	01 15       	cp	r16, r1
     432:	11 05       	cpc	r17, r1
     434:	09 f4       	brne	.+2      	; 0x438 <find_volume+0x60>
     436:	da c2       	rjmp	.+1460   	; 0x9ec <__stack+0x18d>
     438:	f6 01       	movw	r30, r12
     43a:	11 83       	std	Z+1, r17	; 0x01
     43c:	00 83       	st	Z, r16
     43e:	d8 01       	movw	r26, r16
     440:	8c 91       	ld	r24, X
     442:	88 23       	and	r24, r24
     444:	69 f0       	breq	.+26     	; 0x460 <find_volume+0x88>
     446:	11 96       	adiw	r26, 0x01	; 1
     448:	8c 91       	ld	r24, X
     44a:	0e 94 35 14 	call	0x286a	; 0x286a <disk_status>
     44e:	80 fd       	sbrc	r24, 0
     450:	07 c0       	rjmp	.+14     	; 0x460 <find_volume+0x88>
     452:	bb 20       	and	r11, r11
     454:	09 f4       	brne	.+2      	; 0x458 <find_volume+0x80>
     456:	cc c2       	rjmp	.+1432   	; 0x9f0 <__stack+0x191>
     458:	82 fd       	sbrc	r24, 2
     45a:	cc c2       	rjmp	.+1432   	; 0x9f4 <__stack+0x195>
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	18 c3       	rjmp	.+1584   	; 0xa90 <__stack+0x231>
     460:	f8 01       	movw	r30, r16
     462:	10 82       	st	Z, r1
     464:	e1 82       	std	Z+1, r14	; 0x01
     466:	8e 2d       	mov	r24, r14
     468:	0e 94 3c 14 	call	0x2878	; 0x2878 <disk_initialize>
     46c:	80 fd       	sbrc	r24, 0
     46e:	c4 c2       	rjmp	.+1416   	; 0x9f8 <__stack+0x199>
     470:	bb 20       	and	r11, r11
     472:	11 f0       	breq	.+4      	; 0x478 <find_volume+0xa0>
     474:	82 fd       	sbrc	r24, 2
     476:	c2 c2       	rjmp	.+1412   	; 0x9fc <__stack+0x19d>
     478:	40 e0       	ldi	r20, 0x00	; 0
     47a:	50 e0       	ldi	r21, 0x00	; 0
     47c:	ba 01       	movw	r22, r20
     47e:	c8 01       	movw	r24, r16
     480:	1b df       	rcall	.-458    	; 0x2b8 <check_fs>
     482:	81 30       	cpi	r24, 0x01	; 1
     484:	09 f0       	breq	.+2      	; 0x488 <find_volume+0xb0>
     486:	52 c0       	rjmp	.+164    	; 0x52c <find_volume+0x154>
     488:	f8 01       	movw	r30, r16
     48a:	e0 51       	subi	r30, 0x10	; 16
     48c:	fe 4f       	sbci	r31, 0xFE	; 254
     48e:	7e 01       	movw	r14, r28
     490:	21 e1       	ldi	r18, 0x11	; 17
     492:	e2 0e       	add	r14, r18
     494:	f1 1c       	adc	r15, r1
     496:	9e 01       	movw	r18, r28
     498:	2f 5f       	subi	r18, 0xFF	; 255
     49a:	3f 4f       	sbci	r19, 0xFF	; 255
     49c:	a1 2c       	mov	r10, r1
     49e:	b1 2c       	mov	r11, r1
     4a0:	c1 2c       	mov	r12, r1
     4a2:	d1 2c       	mov	r13, r1
     4a4:	80 81       	ld	r24, Z
     4a6:	88 23       	and	r24, r24
     4a8:	b1 f0       	breq	.+44     	; 0x4d6 <find_volume+0xfe>
     4aa:	47 81       	ldd	r20, Z+7	; 0x07
     4ac:	86 81       	ldd	r24, Z+6	; 0x06
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	a0 e0       	ldi	r26, 0x00	; 0
     4b2:	b0 e0       	ldi	r27, 0x00	; 0
     4b4:	dc 01       	movw	r26, r24
     4b6:	99 27       	eor	r25, r25
     4b8:	88 27       	eor	r24, r24
     4ba:	b4 2b       	or	r27, r20
     4bc:	44 81       	ldd	r20, Z+4	; 0x04
     4be:	84 2b       	or	r24, r20
     4c0:	45 81       	ldd	r20, Z+5	; 0x05
     4c2:	50 e0       	ldi	r21, 0x00	; 0
     4c4:	54 2f       	mov	r21, r20
     4c6:	44 27       	eor	r20, r20
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	48 2b       	or	r20, r24
     4ce:	59 2b       	or	r21, r25
     4d0:	6a 2b       	or	r22, r26
     4d2:	7b 2b       	or	r23, r27
     4d4:	04 c0       	rjmp	.+8      	; 0x4de <find_volume+0x106>
     4d6:	4a 2d       	mov	r20, r10
     4d8:	5b 2d       	mov	r21, r11
     4da:	6c 2d       	mov	r22, r12
     4dc:	7d 2d       	mov	r23, r13
     4de:	d9 01       	movw	r26, r18
     4e0:	4d 93       	st	X+, r20
     4e2:	5d 93       	st	X+, r21
     4e4:	6d 93       	st	X+, r22
     4e6:	7d 93       	st	X+, r23
     4e8:	9d 01       	movw	r18, r26
     4ea:	70 96       	adiw	r30, 0x10	; 16
     4ec:	ae 15       	cp	r26, r14
     4ee:	bf 05       	cpc	r27, r15
     4f0:	c9 f6       	brne	.-78     	; 0x4a4 <find_volume+0xcc>
     4f2:	fe 01       	movw	r30, r28
     4f4:	31 96       	adiw	r30, 0x01	; 1
     4f6:	6f 01       	movw	r12, r30
     4f8:	68 94       	set
     4fa:	bb 24       	eor	r11, r11
     4fc:	b1 f8       	bld	r11, 1
     4fe:	d6 01       	movw	r26, r12
     500:	4d 90       	ld	r4, X+
     502:	5d 90       	ld	r5, X+
     504:	6d 90       	ld	r6, X+
     506:	7d 90       	ld	r7, X+
     508:	6d 01       	movw	r12, r26
     50a:	41 14       	cp	r4, r1
     50c:	51 04       	cpc	r5, r1
     50e:	61 04       	cpc	r6, r1
     510:	71 04       	cpc	r7, r1
     512:	39 f0       	breq	.+14     	; 0x522 <find_volume+0x14a>
     514:	b3 01       	movw	r22, r6
     516:	a2 01       	movw	r20, r4
     518:	c8 01       	movw	r24, r16
     51a:	ce de       	rcall	.-612    	; 0x2b8 <check_fs>
     51c:	81 11       	cpse	r24, r1
     51e:	02 c0       	rjmp	.+4      	; 0x524 <find_volume+0x14c>
     520:	08 c0       	rjmp	.+16     	; 0x532 <find_volume+0x15a>
     522:	8b 2d       	mov	r24, r11
     524:	ce 14       	cp	r12, r14
     526:	df 04       	cpc	r13, r15
     528:	51 f7       	brne	.-44     	; 0x4fe <find_volume+0x126>
     52a:	03 c0       	rjmp	.+6      	; 0x532 <find_volume+0x15a>
     52c:	41 2c       	mov	r4, r1
     52e:	51 2c       	mov	r5, r1
     530:	32 01       	movw	r6, r4
     532:	83 30       	cpi	r24, 0x03	; 3
     534:	09 f4       	brne	.+2      	; 0x538 <find_volume+0x160>
     536:	64 c2       	rjmp	.+1224   	; 0xa00 <__stack+0x1a1>
     538:	81 11       	cpse	r24, r1
     53a:	64 c2       	rjmp	.+1224   	; 0xa04 <__stack+0x1a5>
     53c:	f8 01       	movw	r30, r16
     53e:	82 ad       	ldd	r24, Z+58	; 0x3a
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	98 2f       	mov	r25, r24
     544:	88 27       	eor	r24, r24
     546:	21 ad       	ldd	r18, Z+57	; 0x39
     548:	82 2b       	or	r24, r18
     54a:	81 15       	cp	r24, r1
     54c:	92 40       	sbci	r25, 0x02	; 2
     54e:	09 f0       	breq	.+2      	; 0x552 <find_volume+0x17a>
     550:	5b c2       	rjmp	.+1206   	; 0xa08 <__stack+0x1a9>
     552:	f8 01       	movw	r30, r16
     554:	eb 5b       	subi	r30, 0xBB	; 187
     556:	ff 4f       	sbci	r31, 0xFF	; 255
     558:	c0 80       	ld	r12, Z
     55a:	d1 2c       	mov	r13, r1
     55c:	dc 2c       	mov	r13, r12
     55e:	cc 24       	eor	r12, r12
     560:	31 97       	sbiw	r30, 0x01	; 1
     562:	80 81       	ld	r24, Z
     564:	c8 2a       	or	r12, r24
     566:	e1 2c       	mov	r14, r1
     568:	f1 2c       	mov	r15, r1
     56a:	c1 14       	cp	r12, r1
     56c:	d1 04       	cpc	r13, r1
     56e:	e1 04       	cpc	r14, r1
     570:	f1 04       	cpc	r15, r1
     572:	c9 f4       	brne	.+50     	; 0x5a6 <find_volume+0x1ce>
     574:	71 96       	adiw	r30, 0x11	; 17
     576:	80 81       	ld	r24, Z
     578:	31 97       	sbiw	r30, 0x01	; 1
     57a:	c0 80       	ld	r12, Z
     57c:	d1 2c       	mov	r13, r1
     57e:	e1 2c       	mov	r14, r1
     580:	f1 2c       	mov	r15, r1
     582:	76 01       	movw	r14, r12
     584:	dd 24       	eor	r13, r13
     586:	cc 24       	eor	r12, r12
     588:	f8 2a       	or	r15, r24
     58a:	32 97       	sbiw	r30, 0x02	; 2
     58c:	80 81       	ld	r24, Z
     58e:	c8 2a       	or	r12, r24
     590:	31 96       	adiw	r30, 0x01	; 1
     592:	80 81       	ld	r24, Z
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	98 2f       	mov	r25, r24
     598:	88 27       	eor	r24, r24
     59a:	a0 e0       	ldi	r26, 0x00	; 0
     59c:	b0 e0       	ldi	r27, 0x00	; 0
     59e:	c8 2a       	or	r12, r24
     5a0:	d9 2a       	or	r13, r25
     5a2:	ea 2a       	or	r14, r26
     5a4:	fb 2a       	or	r15, r27
     5a6:	d8 01       	movw	r26, r16
     5a8:	56 96       	adiw	r26, 0x16	; 22
     5aa:	cd 92       	st	X+, r12
     5ac:	dd 92       	st	X+, r13
     5ae:	ed 92       	st	X+, r14
     5b0:	fc 92       	st	X, r15
     5b2:	59 97       	sbiw	r26, 0x19	; 25
     5b4:	de 96       	adiw	r26, 0x3e	; 62
     5b6:	ac 91       	ld	r26, X
     5b8:	f8 01       	movw	r30, r16
     5ba:	a3 83       	std	Z+3, r26	; 0x03
     5bc:	8f ef       	ldi	r24, 0xFF	; 255
     5be:	8a 0f       	add	r24, r26
     5c0:	82 30       	cpi	r24, 0x02	; 2
     5c2:	08 f0       	brcs	.+2      	; 0x5c6 <find_volume+0x1ee>
     5c4:	23 c2       	rjmp	.+1094   	; 0xa0c <__stack+0x1ad>
     5c6:	f3 ad       	ldd	r31, Z+59	; 0x3b
     5c8:	f9 8b       	std	Y+17, r31	; 0x11
     5ca:	2f 2f       	mov	r18, r31
     5cc:	f8 01       	movw	r30, r16
     5ce:	22 83       	std	Z+2, r18	; 0x02
     5d0:	22 23       	and	r18, r18
     5d2:	09 f4       	brne	.+2      	; 0x5d6 <find_volume+0x1fe>
     5d4:	1d c2       	rjmp	.+1082   	; 0xa10 <__stack+0x1b1>
     5d6:	82 2f       	mov	r24, r18
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	9c 01       	movw	r18, r24
     5dc:	21 50       	subi	r18, 0x01	; 1
     5de:	31 09       	sbc	r19, r1
     5e0:	82 23       	and	r24, r18
     5e2:	93 23       	and	r25, r19
     5e4:	89 2b       	or	r24, r25
     5e6:	09 f0       	breq	.+2      	; 0x5ea <find_volume+0x212>
     5e8:	15 c2       	rjmp	.+1066   	; 0xa14 <__stack+0x1b5>
     5ea:	e0 5c       	subi	r30, 0xC0	; 192
     5ec:	ff 4f       	sbci	r31, 0xFF	; 255
     5ee:	80 81       	ld	r24, Z
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	98 2f       	mov	r25, r24
     5f4:	88 27       	eor	r24, r24
     5f6:	f8 01       	movw	r30, r16
     5f8:	27 ad       	ldd	r18, Z+63	; 0x3f
     5fa:	1c 01       	movw	r2, r24
     5fc:	22 2a       	or	r2, r18
     5fe:	31 86       	std	Z+9, r3	; 0x09
     600:	20 86       	std	Z+8, r2	; 0x08
     602:	c1 01       	movw	r24, r2
     604:	8f 70       	andi	r24, 0x0F	; 15
     606:	99 27       	eor	r25, r25
     608:	89 2b       	or	r24, r25
     60a:	09 f0       	breq	.+2      	; 0x60e <find_volume+0x236>
     60c:	05 c2       	rjmp	.+1034   	; 0xa18 <__stack+0x1b9>
     60e:	ee 5b       	subi	r30, 0xBE	; 190
     610:	ff 4f       	sbci	r31, 0xFF	; 255
     612:	80 80       	ld	r8, Z
     614:	91 2c       	mov	r9, r1
     616:	98 2c       	mov	r9, r8
     618:	88 24       	eor	r8, r8
     61a:	31 97       	sbiw	r30, 0x01	; 1
     61c:	80 81       	ld	r24, Z
     61e:	88 2a       	or	r8, r24
     620:	a1 2c       	mov	r10, r1
     622:	b1 2c       	mov	r11, r1
     624:	81 14       	cp	r8, r1
     626:	91 04       	cpc	r9, r1
     628:	a1 04       	cpc	r10, r1
     62a:	b1 04       	cpc	r11, r1
     62c:	d1 f4       	brne	.+52     	; 0x662 <find_volume+0x28a>
     62e:	70 96       	adiw	r30, 0x10	; 16
     630:	80 81       	ld	r24, Z
     632:	31 97       	sbiw	r30, 0x01	; 1
     634:	80 80       	ld	r8, Z
     636:	91 2c       	mov	r9, r1
     638:	a1 2c       	mov	r10, r1
     63a:	b1 2c       	mov	r11, r1
     63c:	54 01       	movw	r10, r8
     63e:	99 24       	eor	r9, r9
     640:	88 24       	eor	r8, r8
     642:	b8 2a       	or	r11, r24
     644:	32 97       	sbiw	r30, 0x02	; 2
     646:	80 81       	ld	r24, Z
     648:	88 2a       	or	r8, r24
     64a:	31 96       	adiw	r30, 0x01	; 1
     64c:	80 81       	ld	r24, Z
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	98 2f       	mov	r25, r24
     652:	88 27       	eor	r24, r24
     654:	ac 01       	movw	r20, r24
     656:	60 e0       	ldi	r22, 0x00	; 0
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	84 2a       	or	r8, r20
     65c:	95 2a       	or	r9, r21
     65e:	a6 2a       	or	r10, r22
     660:	b7 2a       	or	r11, r23
     662:	f8 01       	movw	r30, r16
     664:	85 ad       	ldd	r24, Z+61	; 0x3d
     666:	e8 2f       	mov	r30, r24
     668:	f0 e0       	ldi	r31, 0x00	; 0
     66a:	3e 2f       	mov	r19, r30
     66c:	22 27       	eor	r18, r18
     66e:	f8 01       	movw	r30, r16
     670:	84 ad       	ldd	r24, Z+60	; 0x3c
     672:	f9 01       	movw	r30, r18
     674:	e8 2b       	or	r30, r24
     676:	30 97       	sbiw	r30, 0x00	; 0
     678:	09 f4       	brne	.+2      	; 0x67c <find_volume+0x2a4>
     67a:	d0 c1       	rjmp	.+928    	; 0xa1c <__stack+0x1bd>
     67c:	b0 e0       	ldi	r27, 0x00	; 0
     67e:	a7 01       	movw	r20, r14
     680:	96 01       	movw	r18, r12
     682:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__muluhisi3>
     686:	6a 8f       	std	Y+26, r22	; 0x1a
     688:	7b 8f       	std	Y+27, r23	; 0x1b
     68a:	8c 8f       	std	Y+28, r24	; 0x1c
     68c:	9d 8f       	std	Y+29, r25	; 0x1d
     68e:	9f 01       	movw	r18, r30
     690:	40 e0       	ldi	r20, 0x00	; 0
     692:	50 e0       	ldi	r21, 0x00	; 0
     694:	2e 8b       	std	Y+22, r18	; 0x16
     696:	3f 8b       	std	Y+23, r19	; 0x17
     698:	48 8f       	std	Y+24, r20	; 0x18
     69a:	59 8f       	std	Y+25, r21	; 0x19
     69c:	c1 01       	movw	r24, r2
     69e:	92 95       	swap	r25
     6a0:	82 95       	swap	r24
     6a2:	8f 70       	andi	r24, 0x0F	; 15
     6a4:	89 27       	eor	r24, r25
     6a6:	9f 70       	andi	r25, 0x0F	; 15
     6a8:	89 27       	eor	r24, r25
     6aa:	28 0f       	add	r18, r24
     6ac:	39 1f       	adc	r19, r25
     6ae:	41 1d       	adc	r20, r1
     6b0:	51 1d       	adc	r21, r1
     6b2:	da 01       	movw	r26, r20
     6b4:	c9 01       	movw	r24, r18
     6b6:	2a 8d       	ldd	r18, Y+26	; 0x1a
     6b8:	3b 8d       	ldd	r19, Y+27	; 0x1b
     6ba:	4c 8d       	ldd	r20, Y+28	; 0x1c
     6bc:	5d 8d       	ldd	r21, Y+29	; 0x1d
     6be:	28 0f       	add	r18, r24
     6c0:	39 1f       	adc	r19, r25
     6c2:	4a 1f       	adc	r20, r26
     6c4:	5b 1f       	adc	r21, r27
     6c6:	2a 8b       	std	Y+18, r18	; 0x12
     6c8:	3b 8b       	std	Y+19, r19	; 0x13
     6ca:	4c 8b       	std	Y+20, r20	; 0x14
     6cc:	5d 8b       	std	Y+21, r21	; 0x15
     6ce:	82 16       	cp	r8, r18
     6d0:	93 06       	cpc	r9, r19
     6d2:	a4 06       	cpc	r10, r20
     6d4:	b5 06       	cpc	r11, r21
     6d6:	08 f4       	brcc	.+2      	; 0x6da <find_volume+0x302>
     6d8:	a3 c1       	rjmp	.+838    	; 0xa20 <__stack+0x1c1>
     6da:	c5 01       	movw	r24, r10
     6dc:	b4 01       	movw	r22, r8
     6de:	62 1b       	sub	r22, r18
     6e0:	73 0b       	sbc	r23, r19
     6e2:	84 0b       	sbc	r24, r20
     6e4:	95 0b       	sbc	r25, r21
     6e6:	e9 89       	ldd	r30, Y+17	; 0x11
     6e8:	2e 2f       	mov	r18, r30
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <__udivmodsi4>
     6f4:	da 01       	movw	r26, r20
     6f6:	c9 01       	movw	r24, r18
     6f8:	21 15       	cp	r18, r1
     6fa:	31 05       	cpc	r19, r1
     6fc:	41 05       	cpc	r20, r1
     6fe:	51 05       	cpc	r21, r1
     700:	09 f4       	brne	.+2      	; 0x704 <find_volume+0x32c>
     702:	90 c1       	rjmp	.+800    	; 0xa24 <__stack+0x1c5>
     704:	26 3f       	cpi	r18, 0xF6	; 246
     706:	ff e0       	ldi	r31, 0x0F	; 15
     708:	3f 07       	cpc	r19, r31
     70a:	41 05       	cpc	r20, r1
     70c:	51 05       	cpc	r21, r1
     70e:	18 f4       	brcc	.+6      	; 0x716 <find_volume+0x33e>
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	69 8b       	std	Y+17, r22	; 0x11
     714:	02 c0       	rjmp	.+4      	; 0x71a <find_volume+0x342>
     716:	e2 e0       	ldi	r30, 0x02	; 2
     718:	e9 8b       	std	Y+17, r30	; 0x11
     71a:	86 3f       	cpi	r24, 0xF6	; 246
     71c:	9f 4f       	sbci	r25, 0xFF	; 255
     71e:	a1 05       	cpc	r26, r1
     720:	b1 05       	cpc	r27, r1
     722:	08 f0       	brcs	.+2      	; 0x726 <find_volume+0x34e>
     724:	87 c1       	rjmp	.+782    	; 0xa34 <__stack+0x1d5>
     726:	49 01       	movw	r8, r18
     728:	5a 01       	movw	r10, r20
     72a:	62 e0       	ldi	r22, 0x02	; 2
     72c:	86 0e       	add	r8, r22
     72e:	91 1c       	adc	r9, r1
     730:	a1 1c       	adc	r10, r1
     732:	b1 1c       	adc	r11, r1
     734:	d8 01       	movw	r26, r16
     736:	52 96       	adiw	r26, 0x12	; 18
     738:	8d 92       	st	X+, r8
     73a:	9d 92       	st	X+, r9
     73c:	ad 92       	st	X+, r10
     73e:	bc 92       	st	X, r11
     740:	55 97       	sbiw	r26, 0x15	; 21
     742:	f8 01       	movw	r30, r16
     744:	42 8e       	std	Z+26, r4	; 0x1a
     746:	53 8e       	std	Z+27, r5	; 0x1b
     748:	64 8e       	std	Z+28, r6	; 0x1c
     74a:	75 8e       	std	Z+29, r7	; 0x1d
     74c:	8e 89       	ldd	r24, Y+22	; 0x16
     74e:	9f 89       	ldd	r25, Y+23	; 0x17
     750:	a8 8d       	ldd	r26, Y+24	; 0x18
     752:	b9 8d       	ldd	r27, Y+25	; 0x19
     754:	84 0d       	add	r24, r4
     756:	95 1d       	adc	r25, r5
     758:	a6 1d       	adc	r26, r6
     75a:	b7 1d       	adc	r27, r7
     75c:	86 8f       	std	Z+30, r24	; 0x1e
     75e:	97 8f       	std	Z+31, r25	; 0x1f
     760:	a0 a3       	std	Z+32, r26	; 0x20
     762:	b1 a3       	std	Z+33, r27	; 0x21
     764:	4a 89       	ldd	r20, Y+18	; 0x12
     766:	5b 89       	ldd	r21, Y+19	; 0x13
     768:	6c 89       	ldd	r22, Y+20	; 0x14
     76a:	7d 89       	ldd	r23, Y+21	; 0x15
     76c:	44 0d       	add	r20, r4
     76e:	55 1d       	adc	r21, r5
     770:	66 1d       	adc	r22, r6
     772:	77 1d       	adc	r23, r7
     774:	46 a3       	std	Z+38, r20	; 0x26
     776:	57 a3       	std	Z+39, r21	; 0x27
     778:	60 a7       	std	Z+40, r22	; 0x28
     77a:	71 a7       	std	Z+41, r23	; 0x29
     77c:	f9 89       	ldd	r31, Y+17	; 0x11
     77e:	f3 30       	cpi	r31, 0x03	; 3
     780:	61 f5       	brne	.+88     	; 0x7da <find_volume+0x402>
     782:	23 28       	or	r2, r3
     784:	09 f0       	breq	.+2      	; 0x788 <find_volume+0x3b0>
     786:	50 c1       	rjmp	.+672    	; 0xa28 <__stack+0x1c9>
     788:	f8 01       	movw	r30, r16
     78a:	e3 5a       	subi	r30, 0xA3	; 163
     78c:	ff 4f       	sbci	r31, 0xFF	; 255
     78e:	20 81       	ld	r18, Z
     790:	31 97       	sbiw	r30, 0x01	; 1
     792:	80 81       	ld	r24, Z
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	a0 e0       	ldi	r26, 0x00	; 0
     798:	b0 e0       	ldi	r27, 0x00	; 0
     79a:	dc 01       	movw	r26, r24
     79c:	99 27       	eor	r25, r25
     79e:	88 27       	eor	r24, r24
     7a0:	b2 2b       	or	r27, r18
     7a2:	32 97       	sbiw	r30, 0x02	; 2
     7a4:	20 81       	ld	r18, Z
     7a6:	82 2b       	or	r24, r18
     7a8:	31 96       	adiw	r30, 0x01	; 1
     7aa:	40 81       	ld	r20, Z
     7ac:	50 e0       	ldi	r21, 0x00	; 0
     7ae:	54 2f       	mov	r21, r20
     7b0:	44 27       	eor	r20, r20
     7b2:	60 e0       	ldi	r22, 0x00	; 0
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	84 2b       	or	r24, r20
     7b8:	95 2b       	or	r25, r21
     7ba:	a6 2b       	or	r26, r22
     7bc:	b7 2b       	or	r27, r23
     7be:	f8 01       	movw	r30, r16
     7c0:	82 a3       	std	Z+34, r24	; 0x22
     7c2:	93 a3       	std	Z+35, r25	; 0x23
     7c4:	a4 a3       	std	Z+36, r26	; 0x24
     7c6:	b5 a3       	std	Z+37, r27	; 0x25
     7c8:	88 0c       	add	r8, r8
     7ca:	99 1c       	adc	r9, r9
     7cc:	aa 1c       	adc	r10, r10
     7ce:	bb 1c       	adc	r11, r11
     7d0:	88 0c       	add	r8, r8
     7d2:	99 1c       	adc	r9, r9
     7d4:	aa 1c       	adc	r10, r10
     7d6:	bb 1c       	adc	r11, r11
     7d8:	2d c0       	rjmp	.+90     	; 0x834 <find_volume+0x45c>
     7da:	23 28       	or	r2, r3
     7dc:	09 f4       	brne	.+2      	; 0x7e0 <find_volume+0x408>
     7de:	26 c1       	rjmp	.+588    	; 0xa2c <__stack+0x1cd>
     7e0:	2a 8d       	ldd	r18, Y+26	; 0x1a
     7e2:	3b 8d       	ldd	r19, Y+27	; 0x1b
     7e4:	4c 8d       	ldd	r20, Y+28	; 0x1c
     7e6:	5d 8d       	ldd	r21, Y+29	; 0x1d
     7e8:	82 0f       	add	r24, r18
     7ea:	93 1f       	adc	r25, r19
     7ec:	a4 1f       	adc	r26, r20
     7ee:	b5 1f       	adc	r27, r21
     7f0:	f8 01       	movw	r30, r16
     7f2:	82 a3       	std	Z+34, r24	; 0x22
     7f4:	93 a3       	std	Z+35, r25	; 0x23
     7f6:	a4 a3       	std	Z+36, r26	; 0x24
     7f8:	b5 a3       	std	Z+37, r27	; 0x25
     7fa:	f9 89       	ldd	r31, Y+17	; 0x11
     7fc:	f2 30       	cpi	r31, 0x02	; 2
     7fe:	29 f4       	brne	.+10     	; 0x80a <find_volume+0x432>
     800:	88 0c       	add	r8, r8
     802:	99 1c       	adc	r9, r9
     804:	aa 1c       	adc	r10, r10
     806:	bb 1c       	adc	r11, r11
     808:	15 c0       	rjmp	.+42     	; 0x834 <find_volume+0x45c>
     80a:	a3 e0       	ldi	r26, 0x03	; 3
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	a5 01       	movw	r20, r10
     810:	94 01       	movw	r18, r8
     812:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__muluhisi3>
     816:	dc 01       	movw	r26, r24
     818:	cb 01       	movw	r24, r22
     81a:	b6 95       	lsr	r27
     81c:	a7 95       	ror	r26
     81e:	97 95       	ror	r25
     820:	87 95       	ror	r24
     822:	21 e0       	ldi	r18, 0x01	; 1
     824:	82 22       	and	r8, r18
     826:	99 24       	eor	r9, r9
     828:	aa 24       	eor	r10, r10
     82a:	bb 24       	eor	r11, r11
     82c:	88 0e       	add	r8, r24
     82e:	99 1e       	adc	r9, r25
     830:	aa 1e       	adc	r10, r26
     832:	bb 1e       	adc	r11, r27
     834:	3f ef       	ldi	r19, 0xFF	; 255
     836:	83 0e       	add	r8, r19
     838:	31 e0       	ldi	r19, 0x01	; 1
     83a:	93 1e       	adc	r9, r19
     83c:	a1 1c       	adc	r10, r1
     83e:	b1 1c       	adc	r11, r1
     840:	07 2e       	mov	r0, r23
     842:	79 e0       	ldi	r23, 0x09	; 9
     844:	b6 94       	lsr	r11
     846:	a7 94       	ror	r10
     848:	97 94       	ror	r9
     84a:	87 94       	ror	r8
     84c:	7a 95       	dec	r23
     84e:	d1 f7       	brne	.-12     	; 0x844 <find_volume+0x46c>
     850:	70 2d       	mov	r23, r0
     852:	c8 14       	cp	r12, r8
     854:	d9 04       	cpc	r13, r9
     856:	ea 04       	cpc	r14, r10
     858:	fb 04       	cpc	r15, r11
     85a:	08 f4       	brcc	.+2      	; 0x85e <find_volume+0x486>
     85c:	e9 c0       	rjmp	.+466    	; 0xa30 <__stack+0x1d1>
     85e:	8f ef       	ldi	r24, 0xFF	; 255
     860:	9f ef       	ldi	r25, 0xFF	; 255
     862:	dc 01       	movw	r26, r24
     864:	f8 01       	movw	r30, r16
     866:	86 87       	std	Z+14, r24	; 0x0e
     868:	97 87       	std	Z+15, r25	; 0x0f
     86a:	a0 8b       	std	Z+16, r26	; 0x10
     86c:	b1 8b       	std	Z+17, r27	; 0x11
     86e:	82 87       	std	Z+10, r24	; 0x0a
     870:	93 87       	std	Z+11, r25	; 0x0b
     872:	a4 87       	std	Z+12, r26	; 0x0c
     874:	b5 87       	std	Z+13, r27	; 0x0d
     876:	80 e8       	ldi	r24, 0x80	; 128
     878:	85 83       	std	Z+5, r24	; 0x05
     87a:	f9 89       	ldd	r31, Y+17	; 0x11
     87c:	f3 30       	cpi	r31, 0x03	; 3
     87e:	09 f0       	breq	.+2      	; 0x882 <__stack+0x23>
     880:	a1 c0       	rjmp	.+322    	; 0x9c4 <__stack+0x165>
     882:	f8 01       	movw	r30, r16
     884:	e1 5a       	subi	r30, 0xA1	; 161
     886:	ff 4f       	sbci	r31, 0xFF	; 255
     888:	80 81       	ld	r24, Z
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	98 2f       	mov	r25, r24
     88e:	88 27       	eor	r24, r24
     890:	31 97       	sbiw	r30, 0x01	; 1
     892:	20 81       	ld	r18, Z
     894:	82 2b       	or	r24, r18
     896:	01 97       	sbiw	r24, 0x01	; 1
     898:	09 f0       	breq	.+2      	; 0x89c <__stack+0x3d>
     89a:	94 c0       	rjmp	.+296    	; 0x9c4 <__stack+0x165>
     89c:	b3 01       	movw	r22, r6
     89e:	a2 01       	movw	r20, r4
     8a0:	4f 5f       	subi	r20, 0xFF	; 255
     8a2:	5f 4f       	sbci	r21, 0xFF	; 255
     8a4:	6f 4f       	sbci	r22, 0xFF	; 255
     8a6:	7f 4f       	sbci	r23, 0xFF	; 255
     8a8:	c8 01       	movw	r24, r16
     8aa:	d0 dc       	rcall	.-1632   	; 0x24c <move_window>
     8ac:	81 11       	cpse	r24, r1
     8ae:	8a c0       	rjmp	.+276    	; 0x9c4 <__stack+0x165>
     8b0:	d8 01       	movw	r26, r16
     8b2:	15 96       	adiw	r26, 0x05	; 5
     8b4:	1c 92       	st	X, r1
     8b6:	f8 01       	movw	r30, r16
     8b8:	e3 5d       	subi	r30, 0xD3	; 211
     8ba:	fd 4f       	sbci	r31, 0xFD	; 253
     8bc:	80 81       	ld	r24, Z
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	98 2f       	mov	r25, r24
     8c2:	88 27       	eor	r24, r24
     8c4:	31 97       	sbiw	r30, 0x01	; 1
     8c6:	20 81       	ld	r18, Z
     8c8:	82 2b       	or	r24, r18
     8ca:	85 35       	cpi	r24, 0x55	; 85
     8cc:	9a 4a       	sbci	r25, 0xAA	; 170
     8ce:	09 f0       	breq	.+2      	; 0x8d2 <__stack+0x73>
     8d0:	79 c0       	rjmp	.+242    	; 0x9c4 <__stack+0x165>
     8d2:	f8 01       	movw	r30, r16
     8d4:	21 a9       	ldd	r18, Z+49	; 0x31
     8d6:	80 a9       	ldd	r24, Z+48	; 0x30
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	a0 e0       	ldi	r26, 0x00	; 0
     8dc:	b0 e0       	ldi	r27, 0x00	; 0
     8de:	dc 01       	movw	r26, r24
     8e0:	99 27       	eor	r25, r25
     8e2:	88 27       	eor	r24, r24
     8e4:	b2 2b       	or	r27, r18
     8e6:	26 a5       	ldd	r18, Z+46	; 0x2e
     8e8:	82 2b       	or	r24, r18
     8ea:	47 a5       	ldd	r20, Z+47	; 0x2f
     8ec:	50 e0       	ldi	r21, 0x00	; 0
     8ee:	54 2f       	mov	r21, r20
     8f0:	44 27       	eor	r20, r20
     8f2:	60 e0       	ldi	r22, 0x00	; 0
     8f4:	70 e0       	ldi	r23, 0x00	; 0
     8f6:	84 2b       	or	r24, r20
     8f8:	95 2b       	or	r25, r21
     8fa:	a6 2b       	or	r26, r22
     8fc:	b7 2b       	or	r27, r23
     8fe:	82 35       	cpi	r24, 0x52	; 82
     900:	92 45       	sbci	r25, 0x52	; 82
     902:	a1 46       	sbci	r26, 0x61	; 97
     904:	b1 44       	sbci	r27, 0x41	; 65
     906:	09 f0       	breq	.+2      	; 0x90a <__stack+0xab>
     908:	5d c0       	rjmp	.+186    	; 0x9c4 <__stack+0x165>
     90a:	f8 01       	movw	r30, r16
     90c:	eb 5e       	subi	r30, 0xEB	; 235
     90e:	fd 4f       	sbci	r31, 0xFD	; 253
     910:	20 81       	ld	r18, Z
     912:	31 97       	sbiw	r30, 0x01	; 1
     914:	80 81       	ld	r24, Z
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	a0 e0       	ldi	r26, 0x00	; 0
     91a:	b0 e0       	ldi	r27, 0x00	; 0
     91c:	dc 01       	movw	r26, r24
     91e:	99 27       	eor	r25, r25
     920:	88 27       	eor	r24, r24
     922:	b2 2b       	or	r27, r18
     924:	32 97       	sbiw	r30, 0x02	; 2
     926:	20 81       	ld	r18, Z
     928:	82 2b       	or	r24, r18
     92a:	31 96       	adiw	r30, 0x01	; 1
     92c:	40 81       	ld	r20, Z
     92e:	50 e0       	ldi	r21, 0x00	; 0
     930:	54 2f       	mov	r21, r20
     932:	44 27       	eor	r20, r20
     934:	60 e0       	ldi	r22, 0x00	; 0
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	84 2b       	or	r24, r20
     93a:	95 2b       	or	r25, r21
     93c:	a6 2b       	or	r26, r22
     93e:	b7 2b       	or	r27, r23
     940:	82 37       	cpi	r24, 0x72	; 114
     942:	92 47       	sbci	r25, 0x72	; 114
     944:	a1 44       	sbci	r26, 0x41	; 65
     946:	b1 46       	sbci	r27, 0x61	; 97
     948:	e9 f5       	brne	.+122    	; 0x9c4 <__stack+0x165>
     94a:	36 96       	adiw	r30, 0x06	; 6
     94c:	20 81       	ld	r18, Z
     94e:	31 97       	sbiw	r30, 0x01	; 1
     950:	80 81       	ld	r24, Z
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	a0 e0       	ldi	r26, 0x00	; 0
     956:	b0 e0       	ldi	r27, 0x00	; 0
     958:	dc 01       	movw	r26, r24
     95a:	99 27       	eor	r25, r25
     95c:	88 27       	eor	r24, r24
     95e:	b2 2b       	or	r27, r18
     960:	32 97       	sbiw	r30, 0x02	; 2
     962:	20 81       	ld	r18, Z
     964:	82 2b       	or	r24, r18
     966:	31 96       	adiw	r30, 0x01	; 1
     968:	40 81       	ld	r20, Z
     96a:	50 e0       	ldi	r21, 0x00	; 0
     96c:	54 2f       	mov	r21, r20
     96e:	44 27       	eor	r20, r20
     970:	60 e0       	ldi	r22, 0x00	; 0
     972:	70 e0       	ldi	r23, 0x00	; 0
     974:	84 2b       	or	r24, r20
     976:	95 2b       	or	r25, r21
     978:	a6 2b       	or	r26, r22
     97a:	b7 2b       	or	r27, r23
     97c:	f8 01       	movw	r30, r16
     97e:	86 87       	std	Z+14, r24	; 0x0e
     980:	97 87       	std	Z+15, r25	; 0x0f
     982:	a0 8b       	std	Z+16, r26	; 0x10
     984:	b1 8b       	std	Z+17, r27	; 0x11
     986:	e3 5e       	subi	r30, 0xE3	; 227
     988:	fd 4f       	sbci	r31, 0xFD	; 253
     98a:	20 81       	ld	r18, Z
     98c:	31 97       	sbiw	r30, 0x01	; 1
     98e:	80 81       	ld	r24, Z
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	a0 e0       	ldi	r26, 0x00	; 0
     994:	b0 e0       	ldi	r27, 0x00	; 0
     996:	dc 01       	movw	r26, r24
     998:	99 27       	eor	r25, r25
     99a:	88 27       	eor	r24, r24
     99c:	b2 2b       	or	r27, r18
     99e:	32 97       	sbiw	r30, 0x02	; 2
     9a0:	20 81       	ld	r18, Z
     9a2:	82 2b       	or	r24, r18
     9a4:	31 96       	adiw	r30, 0x01	; 1
     9a6:	40 81       	ld	r20, Z
     9a8:	50 e0       	ldi	r21, 0x00	; 0
     9aa:	54 2f       	mov	r21, r20
     9ac:	44 27       	eor	r20, r20
     9ae:	60 e0       	ldi	r22, 0x00	; 0
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	84 2b       	or	r24, r20
     9b4:	95 2b       	or	r25, r21
     9b6:	a6 2b       	or	r26, r22
     9b8:	b7 2b       	or	r27, r23
     9ba:	f8 01       	movw	r30, r16
     9bc:	82 87       	std	Z+10, r24	; 0x0a
     9be:	93 87       	std	Z+11, r25	; 0x0b
     9c0:	a4 87       	std	Z+12, r26	; 0x0c
     9c2:	b5 87       	std	Z+13, r27	; 0x0d
     9c4:	e9 89       	ldd	r30, Y+17	; 0x11
     9c6:	d8 01       	movw	r26, r16
     9c8:	ec 93       	st	X, r30
     9ca:	80 91 b2 00 	lds	r24, 0x00B2
     9ce:	90 91 b3 00 	lds	r25, 0x00B3
     9d2:	01 96       	adiw	r24, 0x01	; 1
     9d4:	90 93 b3 00 	sts	0x00B3, r25
     9d8:	80 93 b2 00 	sts	0x00B2, r24
     9dc:	17 96       	adiw	r26, 0x07	; 7
     9de:	9c 93       	st	X, r25
     9e0:	8e 93       	st	-X, r24
     9e2:	16 97       	sbiw	r26, 0x06	; 6
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	54 c0       	rjmp	.+168    	; 0xa90 <__stack+0x231>
     9e8:	8b e0       	ldi	r24, 0x0B	; 11
     9ea:	52 c0       	rjmp	.+164    	; 0xa90 <__stack+0x231>
     9ec:	8c e0       	ldi	r24, 0x0C	; 12
     9ee:	50 c0       	rjmp	.+160    	; 0xa90 <__stack+0x231>
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	4e c0       	rjmp	.+156    	; 0xa90 <__stack+0x231>
     9f4:	8a e0       	ldi	r24, 0x0A	; 10
     9f6:	4c c0       	rjmp	.+152    	; 0xa90 <__stack+0x231>
     9f8:	83 e0       	ldi	r24, 0x03	; 3
     9fa:	4a c0       	rjmp	.+148    	; 0xa90 <__stack+0x231>
     9fc:	8a e0       	ldi	r24, 0x0A	; 10
     9fe:	48 c0       	rjmp	.+144    	; 0xa90 <__stack+0x231>
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	46 c0       	rjmp	.+140    	; 0xa90 <__stack+0x231>
     a04:	8d e0       	ldi	r24, 0x0D	; 13
     a06:	44 c0       	rjmp	.+136    	; 0xa90 <__stack+0x231>
     a08:	8d e0       	ldi	r24, 0x0D	; 13
     a0a:	42 c0       	rjmp	.+132    	; 0xa90 <__stack+0x231>
     a0c:	8d e0       	ldi	r24, 0x0D	; 13
     a0e:	40 c0       	rjmp	.+128    	; 0xa90 <__stack+0x231>
     a10:	8d e0       	ldi	r24, 0x0D	; 13
     a12:	3e c0       	rjmp	.+124    	; 0xa90 <__stack+0x231>
     a14:	8d e0       	ldi	r24, 0x0D	; 13
     a16:	3c c0       	rjmp	.+120    	; 0xa90 <__stack+0x231>
     a18:	8d e0       	ldi	r24, 0x0D	; 13
     a1a:	3a c0       	rjmp	.+116    	; 0xa90 <__stack+0x231>
     a1c:	8d e0       	ldi	r24, 0x0D	; 13
     a1e:	38 c0       	rjmp	.+112    	; 0xa90 <__stack+0x231>
     a20:	8d e0       	ldi	r24, 0x0D	; 13
     a22:	36 c0       	rjmp	.+108    	; 0xa90 <__stack+0x231>
     a24:	8d e0       	ldi	r24, 0x0D	; 13
     a26:	34 c0       	rjmp	.+104    	; 0xa90 <__stack+0x231>
     a28:	8d e0       	ldi	r24, 0x0D	; 13
     a2a:	32 c0       	rjmp	.+100    	; 0xa90 <__stack+0x231>
     a2c:	8d e0       	ldi	r24, 0x0D	; 13
     a2e:	30 c0       	rjmp	.+96     	; 0xa90 <__stack+0x231>
     a30:	8d e0       	ldi	r24, 0x0D	; 13
     a32:	2e c0       	rjmp	.+92     	; 0xa90 <__stack+0x231>
     a34:	49 01       	movw	r8, r18
     a36:	5a 01       	movw	r10, r20
     a38:	f2 e0       	ldi	r31, 0x02	; 2
     a3a:	8f 0e       	add	r8, r31
     a3c:	91 1c       	adc	r9, r1
     a3e:	a1 1c       	adc	r10, r1
     a40:	b1 1c       	adc	r11, r1
     a42:	d8 01       	movw	r26, r16
     a44:	52 96       	adiw	r26, 0x12	; 18
     a46:	8d 92       	st	X+, r8
     a48:	9d 92       	st	X+, r9
     a4a:	ad 92       	st	X+, r10
     a4c:	bc 92       	st	X, r11
     a4e:	55 97       	sbiw	r26, 0x15	; 21
     a50:	f8 01       	movw	r30, r16
     a52:	42 8e       	std	Z+26, r4	; 0x1a
     a54:	53 8e       	std	Z+27, r5	; 0x1b
     a56:	64 8e       	std	Z+28, r6	; 0x1c
     a58:	75 8e       	std	Z+29, r7	; 0x1d
     a5a:	8e 89       	ldd	r24, Y+22	; 0x16
     a5c:	9f 89       	ldd	r25, Y+23	; 0x17
     a5e:	a8 8d       	ldd	r26, Y+24	; 0x18
     a60:	b9 8d       	ldd	r27, Y+25	; 0x19
     a62:	84 0d       	add	r24, r4
     a64:	95 1d       	adc	r25, r5
     a66:	a6 1d       	adc	r26, r6
     a68:	b7 1d       	adc	r27, r7
     a6a:	86 8f       	std	Z+30, r24	; 0x1e
     a6c:	97 8f       	std	Z+31, r25	; 0x1f
     a6e:	a0 a3       	std	Z+32, r26	; 0x20
     a70:	b1 a3       	std	Z+33, r27	; 0x21
     a72:	8a 89       	ldd	r24, Y+18	; 0x12
     a74:	9b 89       	ldd	r25, Y+19	; 0x13
     a76:	ac 89       	ldd	r26, Y+20	; 0x14
     a78:	bd 89       	ldd	r27, Y+21	; 0x15
     a7a:	84 0d       	add	r24, r4
     a7c:	95 1d       	adc	r25, r5
     a7e:	a6 1d       	adc	r26, r6
     a80:	b7 1d       	adc	r27, r7
     a82:	86 a3       	std	Z+38, r24	; 0x26
     a84:	97 a3       	std	Z+39, r25	; 0x27
     a86:	a0 a7       	std	Z+40, r26	; 0x28
     a88:	b1 a7       	std	Z+41, r27	; 0x29
     a8a:	f3 e0       	ldi	r31, 0x03	; 3
     a8c:	f9 8b       	std	Y+17, r31	; 0x11
     a8e:	79 ce       	rjmp	.-782    	; 0x782 <find_volume+0x3aa>
     a90:	6d 96       	adiw	r28, 0x1d	; 29
     a92:	0f b6       	in	r0, 0x3f	; 63
     a94:	f8 94       	cli
     a96:	de bf       	out	0x3e, r29	; 62
     a98:	0f be       	out	0x3f, r0	; 63
     a9a:	cd bf       	out	0x3d, r28	; 61
     a9c:	df 91       	pop	r29
     a9e:	cf 91       	pop	r28
     aa0:	1f 91       	pop	r17
     aa2:	0f 91       	pop	r16
     aa4:	ff 90       	pop	r15
     aa6:	ef 90       	pop	r14
     aa8:	df 90       	pop	r13
     aaa:	cf 90       	pop	r12
     aac:	bf 90       	pop	r11
     aae:	af 90       	pop	r10
     ab0:	9f 90       	pop	r9
     ab2:	8f 90       	pop	r8
     ab4:	7f 90       	pop	r7
     ab6:	6f 90       	pop	r6
     ab8:	5f 90       	pop	r5
     aba:	4f 90       	pop	r4
     abc:	3f 90       	pop	r3
     abe:	2f 90       	pop	r2
     ac0:	08 95       	ret

00000ac2 <sync_fs>:
     ac2:	0f 93       	push	r16
     ac4:	1f 93       	push	r17
     ac6:	cf 93       	push	r28
     ac8:	df 93       	push	r29
     aca:	ec 01       	movw	r28, r24
     acc:	54 db       	rcall	.-2392   	; 0x176 <sync_window>
     ace:	98 2f       	mov	r25, r24
     ad0:	81 11       	cpse	r24, r1
     ad2:	61 c0       	rjmp	.+194    	; 0xb96 <sync_fs+0xd4>
     ad4:	88 81       	ld	r24, Y
     ad6:	83 30       	cpi	r24, 0x03	; 3
     ad8:	09 f0       	breq	.+2      	; 0xadc <sync_fs+0x1a>
     ada:	53 c0       	rjmp	.+166    	; 0xb82 <sync_fs+0xc0>
     adc:	8d 81       	ldd	r24, Y+5	; 0x05
     ade:	81 30       	cpi	r24, 0x01	; 1
     ae0:	09 f0       	breq	.+2      	; 0xae4 <sync_fs+0x22>
     ae2:	4f c0       	rjmp	.+158    	; 0xb82 <sync_fs+0xc0>
     ae4:	be 01       	movw	r22, r28
     ae6:	62 5d       	subi	r22, 0xD2	; 210
     ae8:	7f 4f       	sbci	r23, 0xFF	; 255
     aea:	fb 01       	movw	r30, r22
     aec:	ce 01       	movw	r24, r28
     aee:	82 5d       	subi	r24, 0xD2	; 210
     af0:	9d 4f       	sbci	r25, 0xFD	; 253
     af2:	11 92       	st	Z+, r1
     af4:	e8 17       	cp	r30, r24
     af6:	f9 07       	cpc	r31, r25
     af8:	e1 f7       	brne	.-8      	; 0xaf2 <sync_fs+0x30>
     afa:	85 e5       	ldi	r24, 0x55	; 85
     afc:	fe 01       	movw	r30, r28
     afe:	e4 5d       	subi	r30, 0xD4	; 212
     b00:	fd 4f       	sbci	r31, 0xFD	; 253
     b02:	80 83       	st	Z, r24
     b04:	8a ea       	ldi	r24, 0xAA	; 170
     b06:	31 96       	adiw	r30, 0x01	; 1
     b08:	80 83       	st	Z, r24
     b0a:	82 e5       	ldi	r24, 0x52	; 82
     b0c:	8e a7       	std	Y+46, r24	; 0x2e
     b0e:	8f a7       	std	Y+47, r24	; 0x2f
     b10:	81 e6       	ldi	r24, 0x61	; 97
     b12:	88 ab       	std	Y+48, r24	; 0x30
     b14:	91 e4       	ldi	r25, 0x41	; 65
     b16:	99 ab       	std	Y+49, r25	; 0x31
     b18:	22 e7       	ldi	r18, 0x72	; 114
     b1a:	7b 97       	sbiw	r30, 0x1b	; 27
     b1c:	20 83       	st	Z, r18
     b1e:	31 96       	adiw	r30, 0x01	; 1
     b20:	20 83       	st	Z, r18
     b22:	31 96       	adiw	r30, 0x01	; 1
     b24:	90 83       	st	Z, r25
     b26:	31 96       	adiw	r30, 0x01	; 1
     b28:	80 83       	st	Z, r24
     b2a:	3e 85       	ldd	r19, Y+14	; 0x0e
     b2c:	2f 85       	ldd	r18, Y+15	; 0x0f
     b2e:	98 89       	ldd	r25, Y+16	; 0x10
     b30:	89 89       	ldd	r24, Y+17	; 0x11
     b32:	31 96       	adiw	r30, 0x01	; 1
     b34:	30 83       	st	Z, r19
     b36:	31 96       	adiw	r30, 0x01	; 1
     b38:	20 83       	st	Z, r18
     b3a:	31 96       	adiw	r30, 0x01	; 1
     b3c:	90 83       	st	Z, r25
     b3e:	31 96       	adiw	r30, 0x01	; 1
     b40:	80 83       	st	Z, r24
     b42:	3a 85       	ldd	r19, Y+10	; 0x0a
     b44:	2b 85       	ldd	r18, Y+11	; 0x0b
     b46:	9c 85       	ldd	r25, Y+12	; 0x0c
     b48:	8d 85       	ldd	r24, Y+13	; 0x0d
     b4a:	31 96       	adiw	r30, 0x01	; 1
     b4c:	30 83       	st	Z, r19
     b4e:	31 96       	adiw	r30, 0x01	; 1
     b50:	20 83       	st	Z, r18
     b52:	31 96       	adiw	r30, 0x01	; 1
     b54:	90 83       	st	Z, r25
     b56:	31 96       	adiw	r30, 0x01	; 1
     b58:	80 83       	st	Z, r24
     b5a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     b5c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     b5e:	ac 8d       	ldd	r26, Y+28	; 0x1c
     b60:	bd 8d       	ldd	r27, Y+29	; 0x1d
     b62:	9c 01       	movw	r18, r24
     b64:	ad 01       	movw	r20, r26
     b66:	2f 5f       	subi	r18, 0xFF	; 255
     b68:	3f 4f       	sbci	r19, 0xFF	; 255
     b6a:	4f 4f       	sbci	r20, 0xFF	; 255
     b6c:	5f 4f       	sbci	r21, 0xFF	; 255
     b6e:	2a a7       	std	Y+42, r18	; 0x2a
     b70:	3b a7       	std	Y+43, r19	; 0x2b
     b72:	4c a7       	std	Y+44, r20	; 0x2c
     b74:	5d a7       	std	Y+45, r21	; 0x2d
     b76:	01 e0       	ldi	r16, 0x01	; 1
     b78:	10 e0       	ldi	r17, 0x00	; 0
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	0e 94 49 15 	call	0x2a92	; 0x2a92 <disk_write>
     b80:	1d 82       	std	Y+5, r1	; 0x05
     b82:	40 e0       	ldi	r20, 0x00	; 0
     b84:	50 e0       	ldi	r21, 0x00	; 0
     b86:	60 e0       	ldi	r22, 0x00	; 0
     b88:	89 81       	ldd	r24, Y+1	; 0x01
     b8a:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <disk_ioctl>
     b8e:	91 e0       	ldi	r25, 0x01	; 1
     b90:	81 11       	cpse	r24, r1
     b92:	01 c0       	rjmp	.+2      	; 0xb96 <sync_fs+0xd4>
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	89 2f       	mov	r24, r25
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	08 95       	ret

00000ba2 <clust2sect>:
     ba2:	cf 92       	push	r12
     ba4:	df 92       	push	r13
     ba6:	ef 92       	push	r14
     ba8:	ff 92       	push	r15
     baa:	fc 01       	movw	r30, r24
     bac:	9a 01       	movw	r18, r20
     bae:	ab 01       	movw	r20, r22
     bb0:	22 50       	subi	r18, 0x02	; 2
     bb2:	31 09       	sbc	r19, r1
     bb4:	41 09       	sbc	r20, r1
     bb6:	51 09       	sbc	r21, r1
     bb8:	c2 88       	ldd	r12, Z+18	; 0x12
     bba:	d3 88       	ldd	r13, Z+19	; 0x13
     bbc:	e4 88       	ldd	r14, Z+20	; 0x14
     bbe:	f5 88       	ldd	r15, Z+21	; 0x15
     bc0:	82 e0       	ldi	r24, 0x02	; 2
     bc2:	c8 1a       	sub	r12, r24
     bc4:	d1 08       	sbc	r13, r1
     bc6:	e1 08       	sbc	r14, r1
     bc8:	f1 08       	sbc	r15, r1
     bca:	2c 15       	cp	r18, r12
     bcc:	3d 05       	cpc	r19, r13
     bce:	4e 05       	cpc	r20, r14
     bd0:	5f 05       	cpc	r21, r15
     bd2:	68 f4       	brcc	.+26     	; 0xbee <clust2sect+0x4c>
     bd4:	a2 81       	ldd	r26, Z+2	; 0x02
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__muluhisi3>
     bdc:	c6 a0       	ldd	r12, Z+38	; 0x26
     bde:	d7 a0       	ldd	r13, Z+39	; 0x27
     be0:	e0 a4       	ldd	r14, Z+40	; 0x28
     be2:	f1 a4       	ldd	r15, Z+41	; 0x29
     be4:	6c 0d       	add	r22, r12
     be6:	7d 1d       	adc	r23, r13
     be8:	8e 1d       	adc	r24, r14
     bea:	9f 1d       	adc	r25, r15
     bec:	03 c0       	rjmp	.+6      	; 0xbf4 <clust2sect+0x52>
     bee:	60 e0       	ldi	r22, 0x00	; 0
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	cb 01       	movw	r24, r22
     bf4:	ff 90       	pop	r15
     bf6:	ef 90       	pop	r14
     bf8:	df 90       	pop	r13
     bfa:	cf 90       	pop	r12
     bfc:	08 95       	ret

00000bfe <get_fat>:
     bfe:	bf 92       	push	r11
     c00:	cf 92       	push	r12
     c02:	df 92       	push	r13
     c04:	ef 92       	push	r14
     c06:	ff 92       	push	r15
     c08:	0f 93       	push	r16
     c0a:	1f 93       	push	r17
     c0c:	cf 93       	push	r28
     c0e:	df 93       	push	r29
     c10:	ec 01       	movw	r28, r24
     c12:	6a 01       	movw	r12, r20
     c14:	7b 01       	movw	r14, r22
     c16:	42 30       	cpi	r20, 0x02	; 2
     c18:	51 05       	cpc	r21, r1
     c1a:	61 05       	cpc	r22, r1
     c1c:	71 05       	cpc	r23, r1
     c1e:	08 f4       	brcc	.+2      	; 0xc22 <get_fat+0x24>
     c20:	c2 c0       	rjmp	.+388    	; 0xda6 <get_fat+0x1a8>
     c22:	4a 89       	ldd	r20, Y+18	; 0x12
     c24:	5b 89       	ldd	r21, Y+19	; 0x13
     c26:	6c 89       	ldd	r22, Y+20	; 0x14
     c28:	7d 89       	ldd	r23, Y+21	; 0x15
     c2a:	c4 16       	cp	r12, r20
     c2c:	d5 06       	cpc	r13, r21
     c2e:	e6 06       	cpc	r14, r22
     c30:	f7 06       	cpc	r15, r23
     c32:	08 f0       	brcs	.+2      	; 0xc36 <get_fat+0x38>
     c34:	bd c0       	rjmp	.+378    	; 0xdb0 <get_fat+0x1b2>
     c36:	88 81       	ld	r24, Y
     c38:	82 30       	cpi	r24, 0x02	; 2
     c3a:	09 f4       	brne	.+2      	; 0xc3e <get_fat+0x40>
     c3c:	48 c0       	rjmp	.+144    	; 0xcce <get_fat+0xd0>
     c3e:	83 30       	cpi	r24, 0x03	; 3
     c40:	09 f4       	brne	.+2      	; 0xc44 <get_fat+0x46>
     c42:	6c c0       	rjmp	.+216    	; 0xd1c <get_fat+0x11e>
     c44:	81 30       	cpi	r24, 0x01	; 1
     c46:	09 f0       	breq	.+2      	; 0xc4a <get_fat+0x4c>
     c48:	b8 c0       	rjmp	.+368    	; 0xdba <get_fat+0x1bc>
     c4a:	86 01       	movw	r16, r12
     c4c:	16 95       	lsr	r17
     c4e:	07 95       	ror	r16
     c50:	0c 0d       	add	r16, r12
     c52:	1d 1d       	adc	r17, r13
     c54:	c8 01       	movw	r24, r16
     c56:	89 2f       	mov	r24, r25
     c58:	99 27       	eor	r25, r25
     c5a:	86 95       	lsr	r24
     c5c:	4e 8d       	ldd	r20, Y+30	; 0x1e
     c5e:	5f 8d       	ldd	r21, Y+31	; 0x1f
     c60:	68 a1       	ldd	r22, Y+32	; 0x20
     c62:	79 a1       	ldd	r23, Y+33	; 0x21
     c64:	48 0f       	add	r20, r24
     c66:	59 1f       	adc	r21, r25
     c68:	61 1d       	adc	r22, r1
     c6a:	71 1d       	adc	r23, r1
     c6c:	ce 01       	movw	r24, r28
     c6e:	ee da       	rcall	.-2596   	; 0x24c <move_window>
     c70:	81 11       	cpse	r24, r1
     c72:	a8 c0       	rjmp	.+336    	; 0xdc4 <get_fat+0x1c6>
     c74:	f8 01       	movw	r30, r16
     c76:	f1 70       	andi	r31, 0x01	; 1
     c78:	ec 0f       	add	r30, r28
     c7a:	fd 1f       	adc	r31, r29
     c7c:	b6 a4       	ldd	r11, Z+46	; 0x2e
     c7e:	0f 5f       	subi	r16, 0xFF	; 255
     c80:	1f 4f       	sbci	r17, 0xFF	; 255
     c82:	c8 01       	movw	r24, r16
     c84:	89 2f       	mov	r24, r25
     c86:	99 27       	eor	r25, r25
     c88:	86 95       	lsr	r24
     c8a:	4e 8d       	ldd	r20, Y+30	; 0x1e
     c8c:	5f 8d       	ldd	r21, Y+31	; 0x1f
     c8e:	68 a1       	ldd	r22, Y+32	; 0x20
     c90:	79 a1       	ldd	r23, Y+33	; 0x21
     c92:	48 0f       	add	r20, r24
     c94:	59 1f       	adc	r21, r25
     c96:	61 1d       	adc	r22, r1
     c98:	71 1d       	adc	r23, r1
     c9a:	ce 01       	movw	r24, r28
     c9c:	d7 da       	rcall	.-2642   	; 0x24c <move_window>
     c9e:	81 11       	cpse	r24, r1
     ca0:	95 c0       	rjmp	.+298    	; 0xdcc <get_fat+0x1ce>
     ca2:	11 70       	andi	r17, 0x01	; 1
     ca4:	c0 0f       	add	r28, r16
     ca6:	d1 1f       	adc	r29, r17
     ca8:	8e a5       	ldd	r24, Y+46	; 0x2e
     caa:	6b 2d       	mov	r22, r11
     cac:	70 e0       	ldi	r23, 0x00	; 0
     cae:	78 2b       	or	r23, r24
     cb0:	c0 fe       	sbrs	r12, 0
     cb2:	09 c0       	rjmp	.+18     	; 0xcc6 <get_fat+0xc8>
     cb4:	72 95       	swap	r23
     cb6:	62 95       	swap	r22
     cb8:	6f 70       	andi	r22, 0x0F	; 15
     cba:	67 27       	eor	r22, r23
     cbc:	7f 70       	andi	r23, 0x0F	; 15
     cbe:	67 27       	eor	r22, r23
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	8e c0       	rjmp	.+284    	; 0xde2 <get_fat+0x1e4>
     cc6:	7f 70       	andi	r23, 0x0F	; 15
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	8a c0       	rjmp	.+276    	; 0xde2 <get_fat+0x1e4>
     cce:	77 27       	eor	r23, r23
     cd0:	6f 2d       	mov	r22, r15
     cd2:	5e 2d       	mov	r21, r14
     cd4:	4d 2d       	mov	r20, r13
     cd6:	0e 8d       	ldd	r16, Y+30	; 0x1e
     cd8:	1f 8d       	ldd	r17, Y+31	; 0x1f
     cda:	28 a1       	ldd	r18, Y+32	; 0x20
     cdc:	39 a1       	ldd	r19, Y+33	; 0x21
     cde:	40 0f       	add	r20, r16
     ce0:	51 1f       	adc	r21, r17
     ce2:	62 1f       	adc	r22, r18
     ce4:	73 1f       	adc	r23, r19
     ce6:	ce 01       	movw	r24, r28
     ce8:	b1 da       	rcall	.-2718   	; 0x24c <move_window>
     cea:	81 11       	cpse	r24, r1
     cec:	73 c0       	rjmp	.+230    	; 0xdd4 <get_fat+0x1d6>
     cee:	cc 0c       	add	r12, r12
     cf0:	dd 1c       	adc	r13, r13
     cf2:	ee 1c       	adc	r14, r14
     cf4:	ff 1c       	adc	r15, r15
     cf6:	e8 94       	clt
     cf8:	c0 f8       	bld	r12, 0
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	d8 22       	and	r13, r24
     cfe:	ee 24       	eor	r14, r14
     d00:	ff 24       	eor	r15, r15
     d02:	fe 01       	movw	r30, r28
     d04:	ec 0d       	add	r30, r12
     d06:	fd 1d       	adc	r31, r13
     d08:	66 a5       	ldd	r22, Z+46	; 0x2e
     d0a:	fe 01       	movw	r30, r28
     d0c:	ec 0d       	add	r30, r12
     d0e:	fd 1d       	adc	r31, r13
     d10:	87 a5       	ldd	r24, Z+47	; 0x2f
     d12:	70 e0       	ldi	r23, 0x00	; 0
     d14:	78 2b       	or	r23, r24
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	63 c0       	rjmp	.+198    	; 0xde2 <get_fat+0x1e4>
     d1c:	4e 8d       	ldd	r20, Y+30	; 0x1e
     d1e:	5f 8d       	ldd	r21, Y+31	; 0x1f
     d20:	68 a1       	ldd	r22, Y+32	; 0x20
     d22:	79 a1       	ldd	r23, Y+33	; 0x21
     d24:	97 01       	movw	r18, r14
     d26:	86 01       	movw	r16, r12
     d28:	68 94       	set
     d2a:	16 f8       	bld	r1, 6
     d2c:	36 95       	lsr	r19
     d2e:	27 95       	ror	r18
     d30:	17 95       	ror	r17
     d32:	07 95       	ror	r16
     d34:	16 94       	lsr	r1
     d36:	d1 f7       	brne	.-12     	; 0xd2c <get_fat+0x12e>
     d38:	40 0f       	add	r20, r16
     d3a:	51 1f       	adc	r21, r17
     d3c:	62 1f       	adc	r22, r18
     d3e:	73 1f       	adc	r23, r19
     d40:	ce 01       	movw	r24, r28
     d42:	84 da       	rcall	.-2808   	; 0x24c <move_window>
     d44:	81 11       	cpse	r24, r1
     d46:	4a c0       	rjmp	.+148    	; 0xddc <get_fat+0x1de>
     d48:	cc 0c       	add	r12, r12
     d4a:	dd 1c       	adc	r13, r13
     d4c:	ee 1c       	adc	r14, r14
     d4e:	ff 1c       	adc	r15, r15
     d50:	cc 0c       	add	r12, r12
     d52:	dd 1c       	adc	r13, r13
     d54:	ee 1c       	adc	r14, r14
     d56:	ff 1c       	adc	r15, r15
     d58:	8c ef       	ldi	r24, 0xFC	; 252
     d5a:	c8 22       	and	r12, r24
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	d8 22       	and	r13, r24
     d60:	ee 24       	eor	r14, r14
     d62:	ff 24       	eor	r15, r15
     d64:	f6 01       	movw	r30, r12
     d66:	be 96       	adiw	r30, 0x2e	; 46
     d68:	ec 0f       	add	r30, r28
     d6a:	fd 1f       	adc	r31, r29
     d6c:	82 81       	ldd	r24, Z+2	; 0x02
     d6e:	43 81       	ldd	r20, Z+3	; 0x03
     d70:	50 e0       	ldi	r21, 0x00	; 0
     d72:	60 e0       	ldi	r22, 0x00	; 0
     d74:	70 e0       	ldi	r23, 0x00	; 0
     d76:	74 2f       	mov	r23, r20
     d78:	66 27       	eor	r22, r22
     d7a:	55 27       	eor	r21, r21
     d7c:	44 27       	eor	r20, r20
     d7e:	68 2b       	or	r22, r24
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	98 2f       	mov	r25, r24
     d86:	88 27       	eor	r24, r24
     d88:	a0 e0       	ldi	r26, 0x00	; 0
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	84 2b       	or	r24, r20
     d8e:	95 2b       	or	r25, r21
     d90:	a6 2b       	or	r26, r22
     d92:	b7 2b       	or	r27, r23
     d94:	fe 01       	movw	r30, r28
     d96:	ec 0d       	add	r30, r12
     d98:	fd 1d       	adc	r31, r13
     d9a:	26 a5       	ldd	r18, Z+46	; 0x2e
     d9c:	82 2b       	or	r24, r18
     d9e:	bc 01       	movw	r22, r24
     da0:	cd 01       	movw	r24, r26
     da2:	9f 70       	andi	r25, 0x0F	; 15
     da4:	1e c0       	rjmp	.+60     	; 0xde2 <get_fat+0x1e4>
     da6:	61 e0       	ldi	r22, 0x01	; 1
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	19 c0       	rjmp	.+50     	; 0xde2 <get_fat+0x1e4>
     db0:	61 e0       	ldi	r22, 0x01	; 1
     db2:	70 e0       	ldi	r23, 0x00	; 0
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	14 c0       	rjmp	.+40     	; 0xde2 <get_fat+0x1e4>
     dba:	61 e0       	ldi	r22, 0x01	; 1
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	0f c0       	rjmp	.+30     	; 0xde2 <get_fat+0x1e4>
     dc4:	6f ef       	ldi	r22, 0xFF	; 255
     dc6:	7f ef       	ldi	r23, 0xFF	; 255
     dc8:	cb 01       	movw	r24, r22
     dca:	0b c0       	rjmp	.+22     	; 0xde2 <get_fat+0x1e4>
     dcc:	6f ef       	ldi	r22, 0xFF	; 255
     dce:	7f ef       	ldi	r23, 0xFF	; 255
     dd0:	cb 01       	movw	r24, r22
     dd2:	07 c0       	rjmp	.+14     	; 0xde2 <get_fat+0x1e4>
     dd4:	6f ef       	ldi	r22, 0xFF	; 255
     dd6:	7f ef       	ldi	r23, 0xFF	; 255
     dd8:	cb 01       	movw	r24, r22
     dda:	03 c0       	rjmp	.+6      	; 0xde2 <get_fat+0x1e4>
     ddc:	6f ef       	ldi	r22, 0xFF	; 255
     dde:	7f ef       	ldi	r23, 0xFF	; 255
     de0:	cb 01       	movw	r24, r22
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	1f 91       	pop	r17
     de8:	0f 91       	pop	r16
     dea:	ff 90       	pop	r15
     dec:	ef 90       	pop	r14
     dee:	df 90       	pop	r13
     df0:	cf 90       	pop	r12
     df2:	bf 90       	pop	r11
     df4:	08 95       	ret

00000df6 <dir_sdi>:
     df6:	af 92       	push	r10
     df8:	bf 92       	push	r11
     dfa:	cf 92       	push	r12
     dfc:	df 92       	push	r13
     dfe:	ef 92       	push	r14
     e00:	ff 92       	push	r15
     e02:	0f 93       	push	r16
     e04:	1f 93       	push	r17
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
     e0a:	ec 01       	movw	r28, r24
     e0c:	8b 01       	movw	r16, r22
     e0e:	7d 83       	std	Y+5, r23	; 0x05
     e10:	6c 83       	std	Y+4, r22	; 0x04
     e12:	ce 80       	ldd	r12, Y+6	; 0x06
     e14:	df 80       	ldd	r13, Y+7	; 0x07
     e16:	e8 84       	ldd	r14, Y+8	; 0x08
     e18:	f9 84       	ldd	r15, Y+9	; 0x09
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	c8 16       	cp	r12, r24
     e1e:	d1 04       	cpc	r13, r1
     e20:	e1 04       	cpc	r14, r1
     e22:	f1 04       	cpc	r15, r1
     e24:	09 f4       	brne	.+2      	; 0xe28 <dir_sdi+0x32>
     e26:	8a c0       	rjmp	.+276    	; 0xf3c <dir_sdi+0x146>
     e28:	e8 81       	ld	r30, Y
     e2a:	f9 81       	ldd	r31, Y+1	; 0x01
     e2c:	82 89       	ldd	r24, Z+18	; 0x12
     e2e:	93 89       	ldd	r25, Z+19	; 0x13
     e30:	a4 89       	ldd	r26, Z+20	; 0x14
     e32:	b5 89       	ldd	r27, Z+21	; 0x15
     e34:	c8 16       	cp	r12, r24
     e36:	d9 06       	cpc	r13, r25
     e38:	ea 06       	cpc	r14, r26
     e3a:	fb 06       	cpc	r15, r27
     e3c:	08 f0       	brcs	.+2      	; 0xe40 <dir_sdi+0x4a>
     e3e:	80 c0       	rjmp	.+256    	; 0xf40 <dir_sdi+0x14a>
     e40:	c1 14       	cp	r12, r1
     e42:	d1 04       	cpc	r13, r1
     e44:	e1 04       	cpc	r14, r1
     e46:	f1 04       	cpc	r15, r1
     e48:	c1 f4       	brne	.+48     	; 0xe7a <dir_sdi+0x84>
     e4a:	80 81       	ld	r24, Z
     e4c:	83 30       	cpi	r24, 0x03	; 3
     e4e:	41 f4       	brne	.+16     	; 0xe60 <dir_sdi+0x6a>
     e50:	82 a1       	ldd	r24, Z+34	; 0x22
     e52:	93 a1       	ldd	r25, Z+35	; 0x23
     e54:	a4 a1       	ldd	r26, Z+36	; 0x24
     e56:	b5 a1       	ldd	r27, Z+37	; 0x25
     e58:	00 97       	sbiw	r24, 0x00	; 0
     e5a:	a1 05       	cpc	r26, r1
     e5c:	b1 05       	cpc	r27, r1
     e5e:	59 f4       	brne	.+22     	; 0xe76 <dir_sdi+0x80>
     e60:	80 85       	ldd	r24, Z+8	; 0x08
     e62:	91 85       	ldd	r25, Z+9	; 0x09
     e64:	08 17       	cp	r16, r24
     e66:	19 07       	cpc	r17, r25
     e68:	08 f0       	brcs	.+2      	; 0xe6c <dir_sdi+0x76>
     e6a:	6c c0       	rjmp	.+216    	; 0xf44 <dir_sdi+0x14e>
     e6c:	62 a1       	ldd	r22, Z+34	; 0x22
     e6e:	73 a1       	ldd	r23, Z+35	; 0x23
     e70:	84 a1       	ldd	r24, Z+36	; 0x24
     e72:	95 a1       	ldd	r25, Z+37	; 0x25
     e74:	35 c0       	rjmp	.+106    	; 0xee0 <dir_sdi+0xea>
     e76:	6c 01       	movw	r12, r24
     e78:	7d 01       	movw	r14, r26
     e7a:	a2 80       	ldd	r10, Z+2	; 0x02
     e7c:	80 e1       	ldi	r24, 0x10	; 16
     e7e:	a8 9e       	mul	r10, r24
     e80:	50 01       	movw	r10, r0
     e82:	11 24       	eor	r1, r1
     e84:	0a 15       	cp	r16, r10
     e86:	1b 05       	cpc	r17, r11
     e88:	30 f1       	brcs	.+76     	; 0xed6 <dir_sdi+0xe0>
     e8a:	b7 01       	movw	r22, r14
     e8c:	a6 01       	movw	r20, r12
     e8e:	88 81       	ld	r24, Y
     e90:	99 81       	ldd	r25, Y+1	; 0x01
     e92:	b5 de       	rcall	.-662    	; 0xbfe <get_fat>
     e94:	6b 01       	movw	r12, r22
     e96:	7c 01       	movw	r14, r24
     e98:	8f ef       	ldi	r24, 0xFF	; 255
     e9a:	c8 16       	cp	r12, r24
     e9c:	d8 06       	cpc	r13, r24
     e9e:	e8 06       	cpc	r14, r24
     ea0:	f8 06       	cpc	r15, r24
     ea2:	09 f4       	brne	.+2      	; 0xea6 <dir_sdi+0xb0>
     ea4:	51 c0       	rjmp	.+162    	; 0xf48 <dir_sdi+0x152>
     ea6:	82 e0       	ldi	r24, 0x02	; 2
     ea8:	c8 16       	cp	r12, r24
     eaa:	d1 04       	cpc	r13, r1
     eac:	e1 04       	cpc	r14, r1
     eae:	f1 04       	cpc	r15, r1
     eb0:	08 f4       	brcc	.+2      	; 0xeb4 <dir_sdi+0xbe>
     eb2:	4c c0       	rjmp	.+152    	; 0xf4c <dir_sdi+0x156>
     eb4:	e8 81       	ld	r30, Y
     eb6:	f9 81       	ldd	r31, Y+1	; 0x01
     eb8:	82 89       	ldd	r24, Z+18	; 0x12
     eba:	93 89       	ldd	r25, Z+19	; 0x13
     ebc:	a4 89       	ldd	r26, Z+20	; 0x14
     ebe:	b5 89       	ldd	r27, Z+21	; 0x15
     ec0:	c8 16       	cp	r12, r24
     ec2:	d9 06       	cpc	r13, r25
     ec4:	ea 06       	cpc	r14, r26
     ec6:	fb 06       	cpc	r15, r27
     ec8:	08 f0       	brcs	.+2      	; 0xecc <dir_sdi+0xd6>
     eca:	42 c0       	rjmp	.+132    	; 0xf50 <dir_sdi+0x15a>
     ecc:	0a 19       	sub	r16, r10
     ece:	1b 09       	sbc	r17, r11
     ed0:	0a 15       	cp	r16, r10
     ed2:	1b 05       	cpc	r17, r11
     ed4:	d0 f6       	brcc	.-76     	; 0xe8a <dir_sdi+0x94>
     ed6:	b7 01       	movw	r22, r14
     ed8:	a6 01       	movw	r20, r12
     eda:	88 81       	ld	r24, Y
     edc:	99 81       	ldd	r25, Y+1	; 0x01
     ede:	61 de       	rcall	.-830    	; 0xba2 <clust2sect>
     ee0:	ca 86       	std	Y+10, r12	; 0x0a
     ee2:	db 86       	std	Y+11, r13	; 0x0b
     ee4:	ec 86       	std	Y+12, r14	; 0x0c
     ee6:	fd 86       	std	Y+13, r15	; 0x0d
     ee8:	61 15       	cp	r22, r1
     eea:	71 05       	cpc	r23, r1
     eec:	81 05       	cpc	r24, r1
     eee:	91 05       	cpc	r25, r1
     ef0:	89 f1       	breq	.+98     	; 0xf54 <dir_sdi+0x15e>
     ef2:	98 01       	movw	r18, r16
     ef4:	32 95       	swap	r19
     ef6:	22 95       	swap	r18
     ef8:	2f 70       	andi	r18, 0x0F	; 15
     efa:	23 27       	eor	r18, r19
     efc:	3f 70       	andi	r19, 0x0F	; 15
     efe:	23 27       	eor	r18, r19
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	82 0f       	add	r24, r18
     f06:	93 1f       	adc	r25, r19
     f08:	a1 1d       	adc	r26, r1
     f0a:	b1 1d       	adc	r27, r1
     f0c:	8e 87       	std	Y+14, r24	; 0x0e
     f0e:	9f 87       	std	Y+15, r25	; 0x0f
     f10:	a8 8b       	std	Y+16, r26	; 0x10
     f12:	b9 8b       	std	Y+17, r27	; 0x11
     f14:	0f 70       	andi	r16, 0x0F	; 15
     f16:	11 27       	eor	r17, r17
     f18:	c8 01       	movw	r24, r16
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	82 95       	swap	r24
     f20:	92 95       	swap	r25
     f22:	90 7f       	andi	r25, 0xF0	; 240
     f24:	98 27       	eor	r25, r24
     f26:	80 7f       	andi	r24, 0xF0	; 240
     f28:	98 27       	eor	r25, r24
     f2a:	8e 96       	adiw	r24, 0x2e	; 46
     f2c:	28 81       	ld	r18, Y
     f2e:	39 81       	ldd	r19, Y+1	; 0x01
     f30:	82 0f       	add	r24, r18
     f32:	93 1f       	adc	r25, r19
     f34:	9b 8b       	std	Y+19, r25	; 0x13
     f36:	8a 8b       	std	Y+18, r24	; 0x12
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	0d c0       	rjmp	.+26     	; 0xf56 <dir_sdi+0x160>
     f3c:	82 e0       	ldi	r24, 0x02	; 2
     f3e:	0b c0       	rjmp	.+22     	; 0xf56 <dir_sdi+0x160>
     f40:	82 e0       	ldi	r24, 0x02	; 2
     f42:	09 c0       	rjmp	.+18     	; 0xf56 <dir_sdi+0x160>
     f44:	82 e0       	ldi	r24, 0x02	; 2
     f46:	07 c0       	rjmp	.+14     	; 0xf56 <dir_sdi+0x160>
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	05 c0       	rjmp	.+10     	; 0xf56 <dir_sdi+0x160>
     f4c:	82 e0       	ldi	r24, 0x02	; 2
     f4e:	03 c0       	rjmp	.+6      	; 0xf56 <dir_sdi+0x160>
     f50:	82 e0       	ldi	r24, 0x02	; 2
     f52:	01 c0       	rjmp	.+2      	; 0xf56 <dir_sdi+0x160>
     f54:	82 e0       	ldi	r24, 0x02	; 2
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	1f 91       	pop	r17
     f5c:	0f 91       	pop	r16
     f5e:	ff 90       	pop	r15
     f60:	ef 90       	pop	r14
     f62:	df 90       	pop	r13
     f64:	cf 90       	pop	r12
     f66:	bf 90       	pop	r11
     f68:	af 90       	pop	r10
     f6a:	08 95       	ret

00000f6c <put_fat>:
     f6c:	4f 92       	push	r4
     f6e:	5f 92       	push	r5
     f70:	6f 92       	push	r6
     f72:	7f 92       	push	r7
     f74:	8f 92       	push	r8
     f76:	9f 92       	push	r9
     f78:	af 92       	push	r10
     f7a:	bf 92       	push	r11
     f7c:	cf 92       	push	r12
     f7e:	df 92       	push	r13
     f80:	ef 92       	push	r14
     f82:	ff 92       	push	r15
     f84:	0f 93       	push	r16
     f86:	1f 93       	push	r17
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
     f8c:	00 d0       	rcall	.+0      	; 0xf8e <put_fat+0x22>
     f8e:	00 d0       	rcall	.+0      	; 0xf90 <put_fat+0x24>
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
     f94:	4c 01       	movw	r8, r24
     f96:	6a 01       	movw	r12, r20
     f98:	7b 01       	movw	r14, r22
     f9a:	28 01       	movw	r4, r16
     f9c:	39 01       	movw	r6, r18
     f9e:	42 30       	cpi	r20, 0x02	; 2
     fa0:	51 05       	cpc	r21, r1
     fa2:	61 05       	cpc	r22, r1
     fa4:	71 05       	cpc	r23, r1
     fa6:	08 f4       	brcc	.+2      	; 0xfaa <put_fat+0x3e>
     fa8:	e8 c0       	rjmp	.+464    	; 0x117a <put_fat+0x20e>
     faa:	fc 01       	movw	r30, r24
     fac:	82 89       	ldd	r24, Z+18	; 0x12
     fae:	93 89       	ldd	r25, Z+19	; 0x13
     fb0:	a4 89       	ldd	r26, Z+20	; 0x14
     fb2:	b5 89       	ldd	r27, Z+21	; 0x15
     fb4:	48 17       	cp	r20, r24
     fb6:	59 07       	cpc	r21, r25
     fb8:	6a 07       	cpc	r22, r26
     fba:	7b 07       	cpc	r23, r27
     fbc:	08 f0       	brcs	.+2      	; 0xfc0 <put_fat+0x54>
     fbe:	df c0       	rjmp	.+446    	; 0x117e <put_fat+0x212>
     fc0:	80 81       	ld	r24, Z
     fc2:	82 30       	cpi	r24, 0x02	; 2
     fc4:	09 f4       	brne	.+2      	; 0xfc8 <put_fat+0x5c>
     fc6:	70 c0       	rjmp	.+224    	; 0x10a8 <put_fat+0x13c>
     fc8:	83 30       	cpi	r24, 0x03	; 3
     fca:	09 f4       	brne	.+2      	; 0xfce <put_fat+0x62>
     fcc:	91 c0       	rjmp	.+290    	; 0x10f0 <put_fat+0x184>
     fce:	81 30       	cpi	r24, 0x01	; 1
     fd0:	09 f0       	breq	.+2      	; 0xfd4 <put_fat+0x68>
     fd2:	ce c0       	rjmp	.+412    	; 0x1170 <put_fat+0x204>
     fd4:	5a 01       	movw	r10, r20
     fd6:	b6 94       	lsr	r11
     fd8:	a7 94       	ror	r10
     fda:	a4 0e       	add	r10, r20
     fdc:	b5 1e       	adc	r11, r21
     fde:	c5 01       	movw	r24, r10
     fe0:	89 2f       	mov	r24, r25
     fe2:	99 27       	eor	r25, r25
     fe4:	86 95       	lsr	r24
     fe6:	46 8d       	ldd	r20, Z+30	; 0x1e
     fe8:	57 8d       	ldd	r21, Z+31	; 0x1f
     fea:	60 a1       	ldd	r22, Z+32	; 0x20
     fec:	71 a1       	ldd	r23, Z+33	; 0x21
     fee:	48 0f       	add	r20, r24
     ff0:	59 1f       	adc	r21, r25
     ff2:	61 1d       	adc	r22, r1
     ff4:	71 1d       	adc	r23, r1
     ff6:	c4 01       	movw	r24, r8
     ff8:	29 d9       	rcall	.-3502   	; 0x24c <move_window>
     ffa:	81 11       	cpse	r24, r1
     ffc:	ba c0       	rjmp	.+372    	; 0x1172 <put_fat+0x206>
     ffe:	c5 01       	movw	r24, r10
    1000:	91 70       	andi	r25, 0x01	; 1
    1002:	a7 01       	movw	r20, r14
    1004:	96 01       	movw	r18, r12
    1006:	21 70       	andi	r18, 0x01	; 1
    1008:	33 27       	eor	r19, r19
    100a:	44 27       	eor	r20, r20
    100c:	55 27       	eor	r21, r21
    100e:	29 83       	std	Y+1, r18	; 0x01
    1010:	3a 83       	std	Y+2, r19	; 0x02
    1012:	4b 83       	std	Y+3, r20	; 0x03
    1014:	5c 83       	std	Y+4, r21	; 0x04
    1016:	c0 fe       	sbrs	r12, 0
    1018:	0b c0       	rjmp	.+22     	; 0x1030 <put_fat+0xc4>
    101a:	f4 01       	movw	r30, r8
    101c:	e8 0f       	add	r30, r24
    101e:	f9 1f       	adc	r31, r25
    1020:	46 a5       	ldd	r20, Z+46	; 0x2e
    1022:	4f 70       	andi	r20, 0x0F	; 15
    1024:	50 e1       	ldi	r21, 0x10	; 16
    1026:	45 9e       	mul	r4, r21
    1028:	90 01       	movw	r18, r0
    102a:	11 24       	eor	r1, r1
    102c:	24 2b       	or	r18, r20
    102e:	01 c0       	rjmp	.+2      	; 0x1032 <put_fat+0xc6>
    1030:	24 2d       	mov	r18, r4
    1032:	f4 01       	movw	r30, r8
    1034:	e8 0f       	add	r30, r24
    1036:	f9 1f       	adc	r31, r25
    1038:	26 a7       	std	Z+46, r18	; 0x2e
    103a:	8f ef       	ldi	r24, 0xFF	; 255
    103c:	a8 1a       	sub	r10, r24
    103e:	b8 0a       	sbc	r11, r24
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	f4 01       	movw	r30, r8
    1044:	84 83       	std	Z+4, r24	; 0x04
    1046:	c5 01       	movw	r24, r10
    1048:	89 2f       	mov	r24, r25
    104a:	99 27       	eor	r25, r25
    104c:	86 95       	lsr	r24
    104e:	46 8d       	ldd	r20, Z+30	; 0x1e
    1050:	57 8d       	ldd	r21, Z+31	; 0x1f
    1052:	60 a1       	ldd	r22, Z+32	; 0x20
    1054:	71 a1       	ldd	r23, Z+33	; 0x21
    1056:	48 0f       	add	r20, r24
    1058:	59 1f       	adc	r21, r25
    105a:	61 1d       	adc	r22, r1
    105c:	71 1d       	adc	r23, r1
    105e:	c4 01       	movw	r24, r8
    1060:	f5 d8       	rcall	.-3606   	; 0x24c <move_window>
    1062:	81 11       	cpse	r24, r1
    1064:	86 c0       	rjmp	.+268    	; 0x1172 <put_fat+0x206>
    1066:	f1 e0       	ldi	r31, 0x01	; 1
    1068:	bf 22       	and	r11, r31
    106a:	29 81       	ldd	r18, Y+1	; 0x01
    106c:	3a 81       	ldd	r19, Y+2	; 0x02
    106e:	4b 81       	ldd	r20, Y+3	; 0x03
    1070:	5c 81       	ldd	r21, Y+4	; 0x04
    1072:	23 2b       	or	r18, r19
    1074:	24 2b       	or	r18, r20
    1076:	25 2b       	or	r18, r21
    1078:	49 f0       	breq	.+18     	; 0x108c <put_fat+0x120>
    107a:	68 94       	set
    107c:	13 f8       	bld	r1, 3
    107e:	76 94       	lsr	r7
    1080:	67 94       	ror	r6
    1082:	57 94       	ror	r5
    1084:	47 94       	ror	r4
    1086:	16 94       	lsr	r1
    1088:	d1 f7       	brne	.-12     	; 0x107e <put_fat+0x112>
    108a:	09 c0       	rjmp	.+18     	; 0x109e <put_fat+0x132>
    108c:	f4 01       	movw	r30, r8
    108e:	ea 0d       	add	r30, r10
    1090:	fb 1d       	adc	r31, r11
    1092:	26 a5       	ldd	r18, Z+46	; 0x2e
    1094:	20 7f       	andi	r18, 0xF0	; 240
    1096:	95 2d       	mov	r25, r5
    1098:	9f 70       	andi	r25, 0x0F	; 15
    109a:	42 2e       	mov	r4, r18
    109c:	49 2a       	or	r4, r25
    109e:	f4 01       	movw	r30, r8
    10a0:	ea 0d       	add	r30, r10
    10a2:	fb 1d       	adc	r31, r11
    10a4:	46 a6       	std	Z+46, r4	; 0x2e
    10a6:	65 c0       	rjmp	.+202    	; 0x1172 <put_fat+0x206>
    10a8:	45 2f       	mov	r20, r21
    10aa:	56 2f       	mov	r21, r22
    10ac:	67 2f       	mov	r22, r23
    10ae:	77 27       	eor	r23, r23
    10b0:	f4 01       	movw	r30, r8
    10b2:	86 8d       	ldd	r24, Z+30	; 0x1e
    10b4:	97 8d       	ldd	r25, Z+31	; 0x1f
    10b6:	a0 a1       	ldd	r26, Z+32	; 0x20
    10b8:	b1 a1       	ldd	r27, Z+33	; 0x21
    10ba:	48 0f       	add	r20, r24
    10bc:	59 1f       	adc	r21, r25
    10be:	6a 1f       	adc	r22, r26
    10c0:	7b 1f       	adc	r23, r27
    10c2:	c4 01       	movw	r24, r8
    10c4:	c3 d8       	rcall	.-3706   	; 0x24c <move_window>
    10c6:	81 11       	cpse	r24, r1
    10c8:	54 c0       	rjmp	.+168    	; 0x1172 <put_fat+0x206>
    10ca:	cc 0c       	add	r12, r12
    10cc:	dd 1c       	adc	r13, r13
    10ce:	ee 1c       	adc	r14, r14
    10d0:	ff 1c       	adc	r15, r15
    10d2:	e8 94       	clt
    10d4:	c0 f8       	bld	r12, 0
    10d6:	f1 e0       	ldi	r31, 0x01	; 1
    10d8:	df 22       	and	r13, r31
    10da:	ee 24       	eor	r14, r14
    10dc:	ff 24       	eor	r15, r15
    10de:	f4 01       	movw	r30, r8
    10e0:	ec 0d       	add	r30, r12
    10e2:	fd 1d       	adc	r31, r13
    10e4:	46 a6       	std	Z+46, r4	; 0x2e
    10e6:	f4 01       	movw	r30, r8
    10e8:	ec 0d       	add	r30, r12
    10ea:	fd 1d       	adc	r31, r13
    10ec:	57 a6       	std	Z+47, r5	; 0x2f
    10ee:	41 c0       	rjmp	.+130    	; 0x1172 <put_fat+0x206>
    10f0:	f4 01       	movw	r30, r8
    10f2:	86 8d       	ldd	r24, Z+30	; 0x1e
    10f4:	97 8d       	ldd	r25, Z+31	; 0x1f
    10f6:	a0 a1       	ldd	r26, Z+32	; 0x20
    10f8:	b1 a1       	ldd	r27, Z+33	; 0x21
    10fa:	68 94       	set
    10fc:	16 f8       	bld	r1, 6
    10fe:	76 95       	lsr	r23
    1100:	67 95       	ror	r22
    1102:	57 95       	ror	r21
    1104:	47 95       	ror	r20
    1106:	16 94       	lsr	r1
    1108:	d1 f7       	brne	.-12     	; 0x10fe <put_fat+0x192>
    110a:	48 0f       	add	r20, r24
    110c:	59 1f       	adc	r21, r25
    110e:	6a 1f       	adc	r22, r26
    1110:	7b 1f       	adc	r23, r27
    1112:	c4 01       	movw	r24, r8
    1114:	9b d8       	rcall	.-3786   	; 0x24c <move_window>
    1116:	81 11       	cpse	r24, r1
    1118:	2c c0       	rjmp	.+88     	; 0x1172 <put_fat+0x206>
    111a:	cc 0c       	add	r12, r12
    111c:	dd 1c       	adc	r13, r13
    111e:	ee 1c       	adc	r14, r14
    1120:	ff 1c       	adc	r15, r15
    1122:	cc 0c       	add	r12, r12
    1124:	dd 1c       	adc	r13, r13
    1126:	ee 1c       	adc	r14, r14
    1128:	ff 1c       	adc	r15, r15
    112a:	fc ef       	ldi	r31, 0xFC	; 252
    112c:	cf 22       	and	r12, r31
    112e:	f1 e0       	ldi	r31, 0x01	; 1
    1130:	df 22       	and	r13, r31
    1132:	ee 24       	eor	r14, r14
    1134:	ff 24       	eor	r15, r15
    1136:	f6 01       	movw	r30, r12
    1138:	be 96       	adiw	r30, 0x2e	; 46
    113a:	e8 0d       	add	r30, r8
    113c:	f9 1d       	adc	r31, r9
    113e:	43 81       	ldd	r20, Z+3	; 0x03
    1140:	50 e0       	ldi	r21, 0x00	; 0
    1142:	60 e0       	ldi	r22, 0x00	; 0
    1144:	70 e0       	ldi	r23, 0x00	; 0
    1146:	74 2f       	mov	r23, r20
    1148:	66 27       	eor	r22, r22
    114a:	55 27       	eor	r21, r21
    114c:	44 27       	eor	r20, r20
    114e:	d4 01       	movw	r26, r8
    1150:	ac 0d       	add	r26, r12
    1152:	bd 1d       	adc	r27, r13
    1154:	44 27       	eor	r20, r20
    1156:	55 27       	eor	r21, r21
    1158:	66 27       	eor	r22, r22
    115a:	70 7f       	andi	r23, 0xF0	; 240
    115c:	44 2a       	or	r4, r20
    115e:	55 2a       	or	r5, r21
    1160:	66 2a       	or	r6, r22
    1162:	77 2a       	or	r7, r23
    1164:	9e 96       	adiw	r26, 0x2e	; 46
    1166:	4c 92       	st	X, r4
    1168:	51 82       	std	Z+1, r5	; 0x01
    116a:	62 82       	std	Z+2, r6	; 0x02
    116c:	73 82       	std	Z+3, r7	; 0x03
    116e:	01 c0       	rjmp	.+2      	; 0x1172 <put_fat+0x206>
    1170:	82 e0       	ldi	r24, 0x02	; 2
    1172:	91 e0       	ldi	r25, 0x01	; 1
    1174:	f4 01       	movw	r30, r8
    1176:	94 83       	std	Z+4, r25	; 0x04
    1178:	03 c0       	rjmp	.+6      	; 0x1180 <put_fat+0x214>
    117a:	82 e0       	ldi	r24, 0x02	; 2
    117c:	01 c0       	rjmp	.+2      	; 0x1180 <put_fat+0x214>
    117e:	82 e0       	ldi	r24, 0x02	; 2
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	1f 91       	pop	r17
    118e:	0f 91       	pop	r16
    1190:	ff 90       	pop	r15
    1192:	ef 90       	pop	r14
    1194:	df 90       	pop	r13
    1196:	cf 90       	pop	r12
    1198:	bf 90       	pop	r11
    119a:	af 90       	pop	r10
    119c:	9f 90       	pop	r9
    119e:	8f 90       	pop	r8
    11a0:	7f 90       	pop	r7
    11a2:	6f 90       	pop	r6
    11a4:	5f 90       	pop	r5
    11a6:	4f 90       	pop	r4
    11a8:	08 95       	ret

000011aa <create_chain>:
    11aa:	2f 92       	push	r2
    11ac:	3f 92       	push	r3
    11ae:	4f 92       	push	r4
    11b0:	5f 92       	push	r5
    11b2:	6f 92       	push	r6
    11b4:	7f 92       	push	r7
    11b6:	8f 92       	push	r8
    11b8:	9f 92       	push	r9
    11ba:	af 92       	push	r10
    11bc:	bf 92       	push	r11
    11be:	cf 92       	push	r12
    11c0:	df 92       	push	r13
    11c2:	ef 92       	push	r14
    11c4:	ff 92       	push	r15
    11c6:	0f 93       	push	r16
    11c8:	1f 93       	push	r17
    11ca:	cf 93       	push	r28
    11cc:	df 93       	push	r29
    11ce:	ec 01       	movw	r28, r24
    11d0:	2a 01       	movw	r4, r20
    11d2:	3b 01       	movw	r6, r22
    11d4:	41 15       	cp	r20, r1
    11d6:	51 05       	cpc	r21, r1
    11d8:	61 05       	cpc	r22, r1
    11da:	71 05       	cpc	r23, r1
    11dc:	99 f4       	brne	.+38     	; 0x1204 <create_chain+0x5a>
    11de:	8a 84       	ldd	r8, Y+10	; 0x0a
    11e0:	9b 84       	ldd	r9, Y+11	; 0x0b
    11e2:	ac 84       	ldd	r10, Y+12	; 0x0c
    11e4:	bd 84       	ldd	r11, Y+13	; 0x0d
    11e6:	81 14       	cp	r8, r1
    11e8:	91 04       	cpc	r9, r1
    11ea:	a1 04       	cpc	r10, r1
    11ec:	b1 04       	cpc	r11, r1
    11ee:	29 f1       	breq	.+74     	; 0x123a <create_chain+0x90>
    11f0:	8a 89       	ldd	r24, Y+18	; 0x12
    11f2:	9b 89       	ldd	r25, Y+19	; 0x13
    11f4:	ac 89       	ldd	r26, Y+20	; 0x14
    11f6:	bd 89       	ldd	r27, Y+21	; 0x15
    11f8:	88 16       	cp	r8, r24
    11fa:	99 06       	cpc	r9, r25
    11fc:	aa 06       	cpc	r10, r26
    11fe:	bb 06       	cpc	r11, r27
    1200:	08 f5       	brcc	.+66     	; 0x1244 <create_chain+0x9a>
    1202:	24 c0       	rjmp	.+72     	; 0x124c <create_chain+0xa2>
    1204:	fc dc       	rcall	.-1544   	; 0xbfe <get_fat>
    1206:	62 30       	cpi	r22, 0x02	; 2
    1208:	71 05       	cpc	r23, r1
    120a:	81 05       	cpc	r24, r1
    120c:	91 05       	cpc	r25, r1
    120e:	08 f4       	brcc	.+2      	; 0x1212 <create_chain+0x68>
    1210:	9b c0       	rjmp	.+310    	; 0x1348 <create_chain+0x19e>
    1212:	6f 3f       	cpi	r22, 0xFF	; 255
    1214:	2f ef       	ldi	r18, 0xFF	; 255
    1216:	72 07       	cpc	r23, r18
    1218:	82 07       	cpc	r24, r18
    121a:	92 07       	cpc	r25, r18
    121c:	09 f4       	brne	.+2      	; 0x1220 <create_chain+0x76>
    121e:	99 c0       	rjmp	.+306    	; 0x1352 <create_chain+0x1a8>
    1220:	0a 89       	ldd	r16, Y+18	; 0x12
    1222:	1b 89       	ldd	r17, Y+19	; 0x13
    1224:	2c 89       	ldd	r18, Y+20	; 0x14
    1226:	3d 89       	ldd	r19, Y+21	; 0x15
    1228:	60 17       	cp	r22, r16
    122a:	71 07       	cpc	r23, r17
    122c:	82 07       	cpc	r24, r18
    122e:	93 07       	cpc	r25, r19
    1230:	08 f4       	brcc	.+2      	; 0x1234 <create_chain+0x8a>
    1232:	93 c0       	rjmp	.+294    	; 0x135a <create_chain+0x1b0>
    1234:	53 01       	movw	r10, r6
    1236:	42 01       	movw	r8, r4
    1238:	09 c0       	rjmp	.+18     	; 0x124c <create_chain+0xa2>
    123a:	81 2c       	mov	r8, r1
    123c:	91 2c       	mov	r9, r1
    123e:	54 01       	movw	r10, r8
    1240:	83 94       	inc	r8
    1242:	04 c0       	rjmp	.+8      	; 0x124c <create_chain+0xa2>
    1244:	81 2c       	mov	r8, r1
    1246:	91 2c       	mov	r9, r1
    1248:	54 01       	movw	r10, r8
    124a:	83 94       	inc	r8
    124c:	75 01       	movw	r14, r10
    124e:	64 01       	movw	r12, r8
    1250:	68 94       	set
    1252:	22 24       	eor	r2, r2
    1254:	21 f8       	bld	r2, 1
    1256:	31 2c       	mov	r3, r1
    1258:	00 e0       	ldi	r16, 0x00	; 0
    125a:	10 e0       	ldi	r17, 0x00	; 0
    125c:	8f ef       	ldi	r24, 0xFF	; 255
    125e:	c8 1a       	sub	r12, r24
    1260:	d8 0a       	sbc	r13, r24
    1262:	e8 0a       	sbc	r14, r24
    1264:	f8 0a       	sbc	r15, r24
    1266:	8a 89       	ldd	r24, Y+18	; 0x12
    1268:	9b 89       	ldd	r25, Y+19	; 0x13
    126a:	ac 89       	ldd	r26, Y+20	; 0x14
    126c:	bd 89       	ldd	r27, Y+21	; 0x15
    126e:	c8 16       	cp	r12, r24
    1270:	d9 06       	cpc	r13, r25
    1272:	ea 06       	cpc	r14, r26
    1274:	fb 06       	cpc	r15, r27
    1276:	58 f0       	brcs	.+22     	; 0x128e <create_chain+0xe4>
    1278:	22 e0       	ldi	r18, 0x02	; 2
    127a:	82 16       	cp	r8, r18
    127c:	91 04       	cpc	r9, r1
    127e:	a1 04       	cpc	r10, r1
    1280:	b1 04       	cpc	r11, r1
    1282:	08 f4       	brcc	.+2      	; 0x1286 <create_chain+0xdc>
    1284:	6e c0       	rjmp	.+220    	; 0x1362 <create_chain+0x1b8>
    1286:	c2 2c       	mov	r12, r2
    1288:	d3 2c       	mov	r13, r3
    128a:	e0 2e       	mov	r14, r16
    128c:	f1 2e       	mov	r15, r17
    128e:	b7 01       	movw	r22, r14
    1290:	a6 01       	movw	r20, r12
    1292:	ce 01       	movw	r24, r28
    1294:	b4 dc       	rcall	.-1688   	; 0xbfe <get_fat>
    1296:	61 15       	cp	r22, r1
    1298:	71 05       	cpc	r23, r1
    129a:	81 05       	cpc	r24, r1
    129c:	91 05       	cpc	r25, r1
    129e:	99 f0       	breq	.+38     	; 0x12c6 <create_chain+0x11c>
    12a0:	6f 3f       	cpi	r22, 0xFF	; 255
    12a2:	2f ef       	ldi	r18, 0xFF	; 255
    12a4:	72 07       	cpc	r23, r18
    12a6:	82 07       	cpc	r24, r18
    12a8:	92 07       	cpc	r25, r18
    12aa:	09 f4       	brne	.+2      	; 0x12ae <create_chain+0x104>
    12ac:	5f c0       	rjmp	.+190    	; 0x136c <create_chain+0x1c2>
    12ae:	61 30       	cpi	r22, 0x01	; 1
    12b0:	71 05       	cpc	r23, r1
    12b2:	81 05       	cpc	r24, r1
    12b4:	91 05       	cpc	r25, r1
    12b6:	09 f4       	brne	.+2      	; 0x12ba <create_chain+0x110>
    12b8:	5d c0       	rjmp	.+186    	; 0x1374 <create_chain+0x1ca>
    12ba:	c8 14       	cp	r12, r8
    12bc:	d9 04       	cpc	r13, r9
    12be:	ea 04       	cpc	r14, r10
    12c0:	fb 04       	cpc	r15, r11
    12c2:	61 f6       	brne	.-104    	; 0x125c <create_chain+0xb2>
    12c4:	5b c0       	rjmp	.+182    	; 0x137c <create_chain+0x1d2>
    12c6:	8c 2c       	mov	r8, r12
    12c8:	9d 2c       	mov	r9, r13
    12ca:	ae 2c       	mov	r10, r14
    12cc:	bf 2c       	mov	r11, r15
    12ce:	0f ef       	ldi	r16, 0xFF	; 255
    12d0:	1f ef       	ldi	r17, 0xFF	; 255
    12d2:	2f ef       	ldi	r18, 0xFF	; 255
    12d4:	3f e0       	ldi	r19, 0x0F	; 15
    12d6:	b7 01       	movw	r22, r14
    12d8:	a6 01       	movw	r20, r12
    12da:	ce 01       	movw	r24, r28
    12dc:	47 de       	rcall	.-882    	; 0xf6c <put_fat>
    12de:	81 11       	cpse	r24, r1
    12e0:	2c c0       	rjmp	.+88     	; 0x133a <create_chain+0x190>
    12e2:	41 14       	cp	r4, r1
    12e4:	51 04       	cpc	r5, r1
    12e6:	61 04       	cpc	r6, r1
    12e8:	71 04       	cpc	r7, r1
    12ea:	51 f0       	breq	.+20     	; 0x1300 <create_chain+0x156>
    12ec:	0c 2d       	mov	r16, r12
    12ee:	1d 2d       	mov	r17, r13
    12f0:	2e 2d       	mov	r18, r14
    12f2:	3f 2d       	mov	r19, r15
    12f4:	b3 01       	movw	r22, r6
    12f6:	a2 01       	movw	r20, r4
    12f8:	ce 01       	movw	r24, r28
    12fa:	38 de       	rcall	.-912    	; 0xf6c <put_fat>
    12fc:	81 11       	cpse	r24, r1
    12fe:	1d c0       	rjmp	.+58     	; 0x133a <create_chain+0x190>
    1300:	8a 86       	std	Y+10, r8	; 0x0a
    1302:	9b 86       	std	Y+11, r9	; 0x0b
    1304:	ac 86       	std	Y+12, r10	; 0x0c
    1306:	bd 86       	std	Y+13, r11	; 0x0d
    1308:	8e 85       	ldd	r24, Y+14	; 0x0e
    130a:	9f 85       	ldd	r25, Y+15	; 0x0f
    130c:	a8 89       	ldd	r26, Y+16	; 0x10
    130e:	b9 89       	ldd	r27, Y+17	; 0x11
    1310:	8f 3f       	cpi	r24, 0xFF	; 255
    1312:	2f ef       	ldi	r18, 0xFF	; 255
    1314:	92 07       	cpc	r25, r18
    1316:	a2 07       	cpc	r26, r18
    1318:	b2 07       	cpc	r27, r18
    131a:	a9 f1       	breq	.+106    	; 0x1386 <create_chain+0x1dc>
    131c:	01 97       	sbiw	r24, 0x01	; 1
    131e:	a1 09       	sbc	r26, r1
    1320:	b1 09       	sbc	r27, r1
    1322:	8e 87       	std	Y+14, r24	; 0x0e
    1324:	9f 87       	std	Y+15, r25	; 0x0f
    1326:	a8 8b       	std	Y+16, r26	; 0x10
    1328:	b9 8b       	std	Y+17, r27	; 0x11
    132a:	8d 81       	ldd	r24, Y+5	; 0x05
    132c:	81 60       	ori	r24, 0x01	; 1
    132e:	8d 83       	std	Y+5, r24	; 0x05
    1330:	4c 2d       	mov	r20, r12
    1332:	3d 2d       	mov	r19, r13
    1334:	2e 2d       	mov	r18, r14
    1336:	9f 2d       	mov	r25, r15
    1338:	2f c0       	rjmp	.+94     	; 0x1398 <create_chain+0x1ee>
    133a:	81 30       	cpi	r24, 0x01	; 1
    133c:	49 f5       	brne	.+82     	; 0x1390 <create_chain+0x1e6>
    133e:	4f ef       	ldi	r20, 0xFF	; 255
    1340:	3f ef       	ldi	r19, 0xFF	; 255
    1342:	2f ef       	ldi	r18, 0xFF	; 255
    1344:	9f ef       	ldi	r25, 0xFF	; 255
    1346:	28 c0       	rjmp	.+80     	; 0x1398 <create_chain+0x1ee>
    1348:	41 e0       	ldi	r20, 0x01	; 1
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	23 c0       	rjmp	.+70     	; 0x1398 <create_chain+0x1ee>
    1352:	46 2f       	mov	r20, r22
    1354:	37 2f       	mov	r19, r23
    1356:	28 2f       	mov	r18, r24
    1358:	1f c0       	rjmp	.+62     	; 0x1398 <create_chain+0x1ee>
    135a:	46 2f       	mov	r20, r22
    135c:	37 2f       	mov	r19, r23
    135e:	28 2f       	mov	r18, r24
    1360:	1b c0       	rjmp	.+54     	; 0x1398 <create_chain+0x1ee>
    1362:	40 e0       	ldi	r20, 0x00	; 0
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	16 c0       	rjmp	.+44     	; 0x1398 <create_chain+0x1ee>
    136c:	46 2f       	mov	r20, r22
    136e:	37 2f       	mov	r19, r23
    1370:	28 2f       	mov	r18, r24
    1372:	12 c0       	rjmp	.+36     	; 0x1398 <create_chain+0x1ee>
    1374:	46 2f       	mov	r20, r22
    1376:	37 2f       	mov	r19, r23
    1378:	28 2f       	mov	r18, r24
    137a:	0e c0       	rjmp	.+28     	; 0x1398 <create_chain+0x1ee>
    137c:	40 e0       	ldi	r20, 0x00	; 0
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	09 c0       	rjmp	.+18     	; 0x1398 <create_chain+0x1ee>
    1386:	4c 2d       	mov	r20, r12
    1388:	3d 2d       	mov	r19, r13
    138a:	2e 2d       	mov	r18, r14
    138c:	9f 2d       	mov	r25, r15
    138e:	04 c0       	rjmp	.+8      	; 0x1398 <create_chain+0x1ee>
    1390:	41 e0       	ldi	r20, 0x01	; 1
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	64 2f       	mov	r22, r20
    139a:	73 2f       	mov	r23, r19
    139c:	82 2f       	mov	r24, r18
    139e:	df 91       	pop	r29
    13a0:	cf 91       	pop	r28
    13a2:	1f 91       	pop	r17
    13a4:	0f 91       	pop	r16
    13a6:	ff 90       	pop	r15
    13a8:	ef 90       	pop	r14
    13aa:	df 90       	pop	r13
    13ac:	cf 90       	pop	r12
    13ae:	bf 90       	pop	r11
    13b0:	af 90       	pop	r10
    13b2:	9f 90       	pop	r9
    13b4:	8f 90       	pop	r8
    13b6:	7f 90       	pop	r7
    13b8:	6f 90       	pop	r6
    13ba:	5f 90       	pop	r5
    13bc:	4f 90       	pop	r4
    13be:	3f 90       	pop	r3
    13c0:	2f 90       	pop	r2
    13c2:	08 95       	ret

000013c4 <dir_next>:
    13c4:	7f 92       	push	r7
    13c6:	8f 92       	push	r8
    13c8:	9f 92       	push	r9
    13ca:	af 92       	push	r10
    13cc:	bf 92       	push	r11
    13ce:	cf 92       	push	r12
    13d0:	df 92       	push	r13
    13d2:	ef 92       	push	r14
    13d4:	ff 92       	push	r15
    13d6:	0f 93       	push	r16
    13d8:	1f 93       	push	r17
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
    13de:	ec 01       	movw	r28, r24
    13e0:	7b 01       	movw	r14, r22
    13e2:	0c 81       	ldd	r16, Y+4	; 0x04
    13e4:	1d 81       	ldd	r17, Y+5	; 0x05
    13e6:	0f 5f       	subi	r16, 0xFF	; 255
    13e8:	1f 4f       	sbci	r17, 0xFF	; 255
    13ea:	01 15       	cp	r16, r1
    13ec:	11 05       	cpc	r17, r1
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <dir_next+0x2e>
    13f0:	e5 c0       	rjmp	.+458    	; 0x15bc <dir_next+0x1f8>
    13f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    13f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    13f6:	a8 89       	ldd	r26, Y+16	; 0x10
    13f8:	b9 89       	ldd	r27, Y+17	; 0x11
    13fa:	00 97       	sbiw	r24, 0x00	; 0
    13fc:	a1 05       	cpc	r26, r1
    13fe:	b1 05       	cpc	r27, r1
    1400:	09 f4       	brne	.+2      	; 0x1404 <dir_next+0x40>
    1402:	de c0       	rjmp	.+444    	; 0x15c0 <dir_next+0x1fc>
    1404:	68 01       	movw	r12, r16
    1406:	2f e0       	ldi	r18, 0x0F	; 15
    1408:	c2 22       	and	r12, r18
    140a:	dd 24       	eor	r13, r13
    140c:	c1 14       	cp	r12, r1
    140e:	d1 04       	cpc	r13, r1
    1410:	09 f0       	breq	.+2      	; 0x1414 <dir_next+0x50>
    1412:	bd c0       	rjmp	.+378    	; 0x158e <dir_next+0x1ca>
    1414:	01 96       	adiw	r24, 0x01	; 1
    1416:	a1 1d       	adc	r26, r1
    1418:	b1 1d       	adc	r27, r1
    141a:	8e 87       	std	Y+14, r24	; 0x0e
    141c:	9f 87       	std	Y+15, r25	; 0x0f
    141e:	a8 8b       	std	Y+16, r26	; 0x10
    1420:	b9 8b       	std	Y+17, r27	; 0x11
    1422:	4a 85       	ldd	r20, Y+10	; 0x0a
    1424:	5b 85       	ldd	r21, Y+11	; 0x0b
    1426:	6c 85       	ldd	r22, Y+12	; 0x0c
    1428:	7d 85       	ldd	r23, Y+13	; 0x0d
    142a:	41 15       	cp	r20, r1
    142c:	51 05       	cpc	r21, r1
    142e:	61 05       	cpc	r22, r1
    1430:	71 05       	cpc	r23, r1
    1432:	49 f4       	brne	.+18     	; 0x1446 <dir_next+0x82>
    1434:	e8 81       	ld	r30, Y
    1436:	f9 81       	ldd	r31, Y+1	; 0x01
    1438:	80 85       	ldd	r24, Z+8	; 0x08
    143a:	91 85       	ldd	r25, Z+9	; 0x09
    143c:	08 17       	cp	r16, r24
    143e:	19 07       	cpc	r17, r25
    1440:	08 f0       	brcs	.+2      	; 0x1444 <dir_next+0x80>
    1442:	c0 c0       	rjmp	.+384    	; 0x15c4 <dir_next+0x200>
    1444:	a4 c0       	rjmp	.+328    	; 0x158e <dir_next+0x1ca>
    1446:	e8 81       	ld	r30, Y
    1448:	f9 81       	ldd	r31, Y+1	; 0x01
    144a:	82 81       	ldd	r24, Z+2	; 0x02
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	01 97       	sbiw	r24, 0x01	; 1
    1450:	98 01       	movw	r18, r16
    1452:	32 95       	swap	r19
    1454:	22 95       	swap	r18
    1456:	2f 70       	andi	r18, 0x0F	; 15
    1458:	23 27       	eor	r18, r19
    145a:	3f 70       	andi	r19, 0x0F	; 15
    145c:	23 27       	eor	r18, r19
    145e:	82 23       	and	r24, r18
    1460:	93 23       	and	r25, r19
    1462:	89 2b       	or	r24, r25
    1464:	09 f0       	breq	.+2      	; 0x1468 <dir_next+0xa4>
    1466:	93 c0       	rjmp	.+294    	; 0x158e <dir_next+0x1ca>
    1468:	cf 01       	movw	r24, r30
    146a:	c9 db       	rcall	.-2158   	; 0xbfe <get_fat>
    146c:	4b 01       	movw	r8, r22
    146e:	5c 01       	movw	r10, r24
    1470:	82 e0       	ldi	r24, 0x02	; 2
    1472:	88 16       	cp	r8, r24
    1474:	91 04       	cpc	r9, r1
    1476:	a1 04       	cpc	r10, r1
    1478:	b1 04       	cpc	r11, r1
    147a:	08 f4       	brcc	.+2      	; 0x147e <dir_next+0xba>
    147c:	a5 c0       	rjmp	.+330    	; 0x15c8 <dir_next+0x204>
    147e:	ef ef       	ldi	r30, 0xFF	; 255
    1480:	8e 16       	cp	r8, r30
    1482:	9e 06       	cpc	r9, r30
    1484:	ae 06       	cpc	r10, r30
    1486:	be 06       	cpc	r11, r30
    1488:	09 f4       	brne	.+2      	; 0x148c <dir_next+0xc8>
    148a:	a0 c0       	rjmp	.+320    	; 0x15cc <dir_next+0x208>
    148c:	e8 81       	ld	r30, Y
    148e:	f9 81       	ldd	r31, Y+1	; 0x01
    1490:	82 89       	ldd	r24, Z+18	; 0x12
    1492:	93 89       	ldd	r25, Z+19	; 0x13
    1494:	a4 89       	ldd	r26, Z+20	; 0x14
    1496:	b5 89       	ldd	r27, Z+21	; 0x15
    1498:	88 16       	cp	r8, r24
    149a:	99 06       	cpc	r9, r25
    149c:	aa 06       	cpc	r10, r26
    149e:	bb 06       	cpc	r11, r27
    14a0:	08 f4       	brcc	.+2      	; 0x14a4 <dir_next+0xe0>
    14a2:	68 c0       	rjmp	.+208    	; 0x1574 <dir_next+0x1b0>
    14a4:	ef 28       	or	r14, r15
    14a6:	09 f4       	brne	.+2      	; 0x14aa <dir_next+0xe6>
    14a8:	93 c0       	rjmp	.+294    	; 0x15d0 <dir_next+0x20c>
    14aa:	4a 85       	ldd	r20, Y+10	; 0x0a
    14ac:	5b 85       	ldd	r21, Y+11	; 0x0b
    14ae:	6c 85       	ldd	r22, Y+12	; 0x0c
    14b0:	7d 85       	ldd	r23, Y+13	; 0x0d
    14b2:	cf 01       	movw	r24, r30
    14b4:	7a de       	rcall	.-780    	; 0x11aa <create_chain>
    14b6:	4b 01       	movw	r8, r22
    14b8:	5c 01       	movw	r10, r24
    14ba:	61 15       	cp	r22, r1
    14bc:	71 05       	cpc	r23, r1
    14be:	81 05       	cpc	r24, r1
    14c0:	91 05       	cpc	r25, r1
    14c2:	09 f4       	brne	.+2      	; 0x14c6 <dir_next+0x102>
    14c4:	87 c0       	rjmp	.+270    	; 0x15d4 <dir_next+0x210>
    14c6:	61 30       	cpi	r22, 0x01	; 1
    14c8:	71 05       	cpc	r23, r1
    14ca:	81 05       	cpc	r24, r1
    14cc:	91 05       	cpc	r25, r1
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <dir_next+0x10e>
    14d0:	83 c0       	rjmp	.+262    	; 0x15d8 <dir_next+0x214>
    14d2:	6f 3f       	cpi	r22, 0xFF	; 255
    14d4:	2f ef       	ldi	r18, 0xFF	; 255
    14d6:	72 07       	cpc	r23, r18
    14d8:	82 07       	cpc	r24, r18
    14da:	92 07       	cpc	r25, r18
    14dc:	09 f4       	brne	.+2      	; 0x14e0 <dir_next+0x11c>
    14de:	7e c0       	rjmp	.+252    	; 0x15dc <dir_next+0x218>
    14e0:	88 81       	ld	r24, Y
    14e2:	99 81       	ldd	r25, Y+1	; 0x01
    14e4:	0e 94 bb 00 	call	0x176	; 0x176 <sync_window>
    14e8:	81 11       	cpse	r24, r1
    14ea:	7a c0       	rjmp	.+244    	; 0x15e0 <dir_next+0x21c>
    14ec:	88 81       	ld	r24, Y
    14ee:	99 81       	ldd	r25, Y+1	; 0x01
    14f0:	fc 01       	movw	r30, r24
    14f2:	be 96       	adiw	r30, 0x2e	; 46
    14f4:	82 5d       	subi	r24, 0xD2	; 210
    14f6:	9d 4f       	sbci	r25, 0xFD	; 253
    14f8:	11 92       	st	Z+, r1
    14fa:	e8 17       	cp	r30, r24
    14fc:	f9 07       	cpc	r31, r25
    14fe:	e1 f7       	brne	.-8      	; 0x14f8 <dir_next+0x134>
    1500:	e8 80       	ld	r14, Y
    1502:	f9 80       	ldd	r15, Y+1	; 0x01
    1504:	b5 01       	movw	r22, r10
    1506:	a4 01       	movw	r20, r8
    1508:	c7 01       	movw	r24, r14
    150a:	4b db       	rcall	.-2410   	; 0xba2 <clust2sect>
    150c:	f7 01       	movw	r30, r14
    150e:	62 a7       	std	Z+42, r22	; 0x2a
    1510:	73 a7       	std	Z+43, r23	; 0x2b
    1512:	84 a7       	std	Z+44, r24	; 0x2c
    1514:	95 a7       	std	Z+45, r25	; 0x2d
    1516:	e1 2c       	mov	r14, r1
    1518:	f1 2c       	mov	r15, r1
    151a:	77 24       	eor	r7, r7
    151c:	73 94       	inc	r7
    151e:	17 c0       	rjmp	.+46     	; 0x154e <dir_next+0x18a>
    1520:	74 82       	std	Z+4, r7	; 0x04
    1522:	88 81       	ld	r24, Y
    1524:	99 81       	ldd	r25, Y+1	; 0x01
    1526:	0e 94 bb 00 	call	0x176	; 0x176 <sync_window>
    152a:	81 11       	cpse	r24, r1
    152c:	5b c0       	rjmp	.+182    	; 0x15e4 <dir_next+0x220>
    152e:	e8 81       	ld	r30, Y
    1530:	f9 81       	ldd	r31, Y+1	; 0x01
    1532:	82 a5       	ldd	r24, Z+42	; 0x2a
    1534:	93 a5       	ldd	r25, Z+43	; 0x2b
    1536:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1538:	b5 a5       	ldd	r27, Z+45	; 0x2d
    153a:	01 96       	adiw	r24, 0x01	; 1
    153c:	a1 1d       	adc	r26, r1
    153e:	b1 1d       	adc	r27, r1
    1540:	82 a7       	std	Z+42, r24	; 0x2a
    1542:	93 a7       	std	Z+43, r25	; 0x2b
    1544:	a4 a7       	std	Z+44, r26	; 0x2c
    1546:	b5 a7       	std	Z+45, r27	; 0x2d
    1548:	ff ef       	ldi	r31, 0xFF	; 255
    154a:	ef 1a       	sub	r14, r31
    154c:	ff 0a       	sbc	r15, r31
    154e:	e8 81       	ld	r30, Y
    1550:	f9 81       	ldd	r31, Y+1	; 0x01
    1552:	82 81       	ldd	r24, Z+2	; 0x02
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	e8 16       	cp	r14, r24
    1558:	f9 06       	cpc	r15, r25
    155a:	10 f3       	brcs	.-60     	; 0x1520 <dir_next+0x15c>
    155c:	82 a5       	ldd	r24, Z+42	; 0x2a
    155e:	93 a5       	ldd	r25, Z+43	; 0x2b
    1560:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1562:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1564:	8e 19       	sub	r24, r14
    1566:	9f 09       	sbc	r25, r15
    1568:	a1 09       	sbc	r26, r1
    156a:	b1 09       	sbc	r27, r1
    156c:	82 a7       	std	Z+42, r24	; 0x2a
    156e:	93 a7       	std	Z+43, r25	; 0x2b
    1570:	a4 a7       	std	Z+44, r26	; 0x2c
    1572:	b5 a7       	std	Z+45, r27	; 0x2d
    1574:	8a 86       	std	Y+10, r8	; 0x0a
    1576:	9b 86       	std	Y+11, r9	; 0x0b
    1578:	ac 86       	std	Y+12, r10	; 0x0c
    157a:	bd 86       	std	Y+13, r11	; 0x0d
    157c:	b5 01       	movw	r22, r10
    157e:	a4 01       	movw	r20, r8
    1580:	88 81       	ld	r24, Y
    1582:	99 81       	ldd	r25, Y+1	; 0x01
    1584:	0e db       	rcall	.-2532   	; 0xba2 <clust2sect>
    1586:	6e 87       	std	Y+14, r22	; 0x0e
    1588:	7f 87       	std	Y+15, r23	; 0x0f
    158a:	88 8b       	std	Y+16, r24	; 0x10
    158c:	99 8b       	std	Y+17, r25	; 0x11
    158e:	1d 83       	std	Y+5, r17	; 0x05
    1590:	0c 83       	std	Y+4, r16	; 0x04
    1592:	cc 0c       	add	r12, r12
    1594:	dd 1c       	adc	r13, r13
    1596:	cc 0c       	add	r12, r12
    1598:	dd 1c       	adc	r13, r13
    159a:	cc 0c       	add	r12, r12
    159c:	dd 1c       	adc	r13, r13
    159e:	cc 0c       	add	r12, r12
    15a0:	dd 1c       	adc	r13, r13
    15a2:	cc 0c       	add	r12, r12
    15a4:	dd 1c       	adc	r13, r13
    15a6:	2e e2       	ldi	r18, 0x2E	; 46
    15a8:	c2 0e       	add	r12, r18
    15aa:	d1 1c       	adc	r13, r1
    15ac:	88 81       	ld	r24, Y
    15ae:	99 81       	ldd	r25, Y+1	; 0x01
    15b0:	c8 0e       	add	r12, r24
    15b2:	d9 1e       	adc	r13, r25
    15b4:	db 8a       	std	Y+19, r13	; 0x13
    15b6:	ca 8a       	std	Y+18, r12	; 0x12
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	15 c0       	rjmp	.+42     	; 0x15e6 <dir_next+0x222>
    15bc:	84 e0       	ldi	r24, 0x04	; 4
    15be:	13 c0       	rjmp	.+38     	; 0x15e6 <dir_next+0x222>
    15c0:	84 e0       	ldi	r24, 0x04	; 4
    15c2:	11 c0       	rjmp	.+34     	; 0x15e6 <dir_next+0x222>
    15c4:	84 e0       	ldi	r24, 0x04	; 4
    15c6:	0f c0       	rjmp	.+30     	; 0x15e6 <dir_next+0x222>
    15c8:	82 e0       	ldi	r24, 0x02	; 2
    15ca:	0d c0       	rjmp	.+26     	; 0x15e6 <dir_next+0x222>
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	0b c0       	rjmp	.+22     	; 0x15e6 <dir_next+0x222>
    15d0:	84 e0       	ldi	r24, 0x04	; 4
    15d2:	09 c0       	rjmp	.+18     	; 0x15e6 <dir_next+0x222>
    15d4:	87 e0       	ldi	r24, 0x07	; 7
    15d6:	07 c0       	rjmp	.+14     	; 0x15e6 <dir_next+0x222>
    15d8:	82 e0       	ldi	r24, 0x02	; 2
    15da:	05 c0       	rjmp	.+10     	; 0x15e6 <dir_next+0x222>
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	03 c0       	rjmp	.+6      	; 0x15e6 <dir_next+0x222>
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	01 c0       	rjmp	.+2      	; 0x15e6 <dir_next+0x222>
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	df 91       	pop	r29
    15e8:	cf 91       	pop	r28
    15ea:	1f 91       	pop	r17
    15ec:	0f 91       	pop	r16
    15ee:	ff 90       	pop	r15
    15f0:	ef 90       	pop	r14
    15f2:	df 90       	pop	r13
    15f4:	cf 90       	pop	r12
    15f6:	bf 90       	pop	r11
    15f8:	af 90       	pop	r10
    15fa:	9f 90       	pop	r9
    15fc:	8f 90       	pop	r8
    15fe:	7f 90       	pop	r7
    1600:	08 95       	ret

00001602 <follow_path>:
    1602:	2f 92       	push	r2
    1604:	3f 92       	push	r3
    1606:	4f 92       	push	r4
    1608:	5f 92       	push	r5
    160a:	6f 92       	push	r6
    160c:	7f 92       	push	r7
    160e:	8f 92       	push	r8
    1610:	9f 92       	push	r9
    1612:	af 92       	push	r10
    1614:	bf 92       	push	r11
    1616:	cf 92       	push	r12
    1618:	df 92       	push	r13
    161a:	ef 92       	push	r14
    161c:	ff 92       	push	r15
    161e:	0f 93       	push	r16
    1620:	1f 93       	push	r17
    1622:	cf 93       	push	r28
    1624:	df 93       	push	r29
    1626:	00 d0       	rcall	.+0      	; 0x1628 <follow_path+0x26>
    1628:	00 d0       	rcall	.+0      	; 0x162a <follow_path+0x28>
    162a:	00 d0       	rcall	.+0      	; 0x162c <follow_path+0x2a>
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
    1630:	6c 01       	movw	r12, r24
    1632:	8b 01       	movw	r16, r22
    1634:	db 01       	movw	r26, r22
    1636:	8c 91       	ld	r24, X
    1638:	8f 32       	cpi	r24, 0x2F	; 47
    163a:	11 f0       	breq	.+4      	; 0x1640 <follow_path+0x3e>
    163c:	8c 35       	cpi	r24, 0x5C	; 92
    163e:	11 f4       	brne	.+4      	; 0x1644 <follow_path+0x42>
    1640:	0f 5f       	subi	r16, 0xFF	; 255
    1642:	1f 4f       	sbci	r17, 0xFF	; 255
    1644:	f6 01       	movw	r30, r12
    1646:	16 82       	std	Z+6, r1	; 0x06
    1648:	17 82       	std	Z+7, r1	; 0x07
    164a:	10 86       	std	Z+8, r1	; 0x08
    164c:	11 86       	std	Z+9, r1	; 0x09
    164e:	d8 01       	movw	r26, r16
    1650:	8c 91       	ld	r24, X
    1652:	80 32       	cpi	r24, 0x20	; 32
    1654:	40 f4       	brcc	.+16     	; 0x1666 <follow_path+0x64>
    1656:	60 e0       	ldi	r22, 0x00	; 0
    1658:	70 e0       	ldi	r23, 0x00	; 0
    165a:	c6 01       	movw	r24, r12
    165c:	cc db       	rcall	.-2152   	; 0xdf6 <dir_sdi>
    165e:	f6 01       	movw	r30, r12
    1660:	13 8a       	std	Z+19, r1	; 0x13
    1662:	12 8a       	std	Z+18, r1	; 0x12
    1664:	66 c1       	rjmp	.+716    	; 0x1932 <follow_path+0x330>
    1666:	68 94       	set
    1668:	ff 24       	eor	r15, r15
    166a:	f5 f8       	bld	r15, 5
    166c:	e1 2c       	mov	r14, r1
    166e:	b1 2c       	mov	r11, r1
    1670:	68 94       	set
    1672:	77 24       	eor	r7, r7
    1674:	73 f8       	bld	r7, 3
    1676:	51 2c       	mov	r5, r1
    1678:	81 2c       	mov	r8, r1
    167a:	5b 82       	std	Y+3, r5	; 0x03
    167c:	0f 2e       	mov	r0, r31
    167e:	fb e0       	ldi	r31, 0x0B	; 11
    1680:	6f 2e       	mov	r6, r31
    1682:	f0 2d       	mov	r31, r0
    1684:	91 2c       	mov	r9, r1
    1686:	de 82       	std	Y+6, r13	; 0x06
    1688:	cd 82       	std	Y+5, r12	; 0x05
    168a:	5a 82       	std	Y+2, r5	; 0x02
    168c:	27 2c       	mov	r2, r7
    168e:	f8 01       	movw	r30, r16
    1690:	4d 81       	ldd	r20, Y+5	; 0x05
    1692:	5e 81       	ldd	r21, Y+6	; 0x06
    1694:	cf 01       	movw	r24, r30
    1696:	21 91       	ld	r18, Z+
    1698:	2f 32       	cpi	r18, 0x2F	; 47
    169a:	e1 f3       	breq	.-8      	; 0x1694 <follow_path+0x92>
    169c:	2c 35       	cpi	r18, 0x5C	; 92
    169e:	d1 f3       	breq	.-12     	; 0x1694 <follow_path+0x92>
    16a0:	5e 83       	std	Y+6, r21	; 0x06
    16a2:	4d 83       	std	Y+5, r20	; 0x05
    16a4:	da 01       	movw	r26, r20
    16a6:	54 96       	adiw	r26, 0x14	; 20
    16a8:	ed 91       	ld	r30, X+
    16aa:	fc 91       	ld	r31, X
    16ac:	55 97       	sbiw	r26, 0x15	; 21
    16ae:	df 01       	movw	r26, r30
    16b0:	9f 01       	movw	r18, r30
    16b2:	25 5f       	subi	r18, 0xF5	; 245
    16b4:	3f 4f       	sbci	r19, 0xFF	; 255
    16b6:	fd 92       	st	X+, r15
    16b8:	a2 17       	cp	r26, r18
    16ba:	b3 07       	cpc	r27, r19
    16bc:	e1 f7       	brne	.-8      	; 0x16b6 <follow_path+0xb4>
    16be:	5e 83       	std	Y+6, r21	; 0x06
    16c0:	4d 83       	std	Y+5, r20	; 0x05
    16c2:	2e 2d       	mov	r18, r14
    16c4:	3b 2d       	mov	r19, r11
    16c6:	4e 2d       	mov	r20, r14
    16c8:	5b 2d       	mov	r21, r11
    16ca:	c7 2c       	mov	r12, r7
    16cc:	da 80       	ldd	r13, Y+2	; 0x02
    16ce:	38 2c       	mov	r3, r8
    16d0:	0d 81       	ldd	r16, Y+5	; 0x05
    16d2:	1e 81       	ldd	r17, Y+6	; 0x06
    16d4:	b9 82       	std	Y+1, r11	; 0x01
    16d6:	2a 01       	movw	r4, r20
    16d8:	bf ef       	ldi	r27, 0xFF	; 255
    16da:	4b 1a       	sub	r4, r27
    16dc:	5b 0a       	sbc	r5, r27
    16de:	dc 01       	movw	r26, r24
    16e0:	a4 0f       	add	r26, r20
    16e2:	b5 1f       	adc	r27, r21
    16e4:	6c 91       	ld	r22, X
    16e6:	6c 83       	std	Y+4, r22	; 0x04
    16e8:	61 32       	cpi	r22, 0x21	; 33
    16ea:	08 f4       	brcc	.+2      	; 0x16ee <follow_path+0xec>
    16ec:	03 c1       	rjmp	.+518    	; 0x18f4 <follow_path+0x2f2>
    16ee:	6f 32       	cpi	r22, 0x2F	; 47
    16f0:	09 f4       	brne	.+2      	; 0x16f4 <follow_path+0xf2>
    16f2:	f7 c0       	rjmp	.+494    	; 0x18e2 <follow_path+0x2e0>
    16f4:	6c 35       	cpi	r22, 0x5C	; 92
    16f6:	09 f4       	brne	.+2      	; 0x16fa <follow_path+0xf8>
    16f8:	f4 c0       	rjmp	.+488    	; 0x18e2 <follow_path+0x2e0>
    16fa:	6e 32       	cpi	r22, 0x2E	; 46
    16fc:	09 f4       	brne	.+2      	; 0x1700 <follow_path+0xfe>
    16fe:	e4 c0       	rjmp	.+456    	; 0x18c8 <follow_path+0x2c6>
    1700:	2c 15       	cp	r18, r12
    1702:	3d 05       	cpc	r19, r13
    1704:	08 f0       	brcs	.+2      	; 0x1708 <follow_path+0x106>
    1706:	ce c0       	rjmp	.+412    	; 0x18a4 <follow_path+0x2a2>
    1708:	08 c0       	rjmp	.+16     	; 0x171a <follow_path+0x118>
    170a:	33 0c       	add	r3, r3
    170c:	33 0c       	add	r3, r3
    170e:	a2 01       	movw	r20, r4
    1710:	22 2d       	mov	r18, r2
    1712:	3b 81       	ldd	r19, Y+3	; 0x03
    1714:	c6 2c       	mov	r12, r6
    1716:	d9 2c       	mov	r13, r9
    1718:	de cf       	rjmp	.-68     	; 0x16d6 <follow_path+0xd4>
    171a:	7c 81       	ldd	r23, Y+4	; 0x04
    171c:	77 23       	and	r23, r23
    171e:	1c f4       	brge	.+6      	; 0x1726 <follow_path+0x124>
    1720:	a3 2d       	mov	r26, r3
    1722:	a3 60       	ori	r26, 0x03	; 3
    1724:	3a 2e       	mov	r3, r26
    1726:	7c 81       	ldd	r23, Y+4	; 0x04
    1728:	71 58       	subi	r23, 0x81	; 129
    172a:	7f 31       	cpi	r23, 0x1F	; 31
    172c:	20 f0       	brcs	.+8      	; 0x1736 <follow_path+0x134>
    172e:	7c 81       	ldd	r23, Y+4	; 0x04
    1730:	70 5e       	subi	r23, 0xE0	; 224
    1732:	7d 31       	cpi	r23, 0x1D	; 29
    1734:	18 f5       	brcc	.+70     	; 0x177c <follow_path+0x17a>
    1736:	4e 5f       	subi	r20, 0xFE	; 254
    1738:	5f 4f       	sbci	r21, 0xFF	; 255
    173a:	dc 01       	movw	r26, r24
    173c:	a4 0d       	add	r26, r4
    173e:	b5 1d       	adc	r27, r5
    1740:	bc 90       	ld	r11, X
    1742:	60 ec       	ldi	r22, 0xC0	; 192
    1744:	6b 0d       	add	r22, r11
    1746:	6f 33       	cpi	r22, 0x3F	; 63
    1748:	28 f0       	brcs	.+10     	; 0x1754 <follow_path+0x152>
    174a:	60 e8       	ldi	r22, 0x80	; 128
    174c:	6b 0d       	add	r22, r11
    174e:	6d 37       	cpi	r22, 0x7D	; 125
    1750:	08 f0       	brcs	.+2      	; 0x1754 <follow_path+0x152>
    1752:	aa c0       	rjmp	.+340    	; 0x18a8 <follow_path+0x2a6>
    1754:	b6 01       	movw	r22, r12
    1756:	61 50       	subi	r22, 0x01	; 1
    1758:	71 09       	sbc	r23, r1
    175a:	26 17       	cp	r18, r22
    175c:	37 07       	cpc	r19, r23
    175e:	08 f0       	brcs	.+2      	; 0x1762 <follow_path+0x160>
    1760:	a5 c0       	rjmp	.+330    	; 0x18ac <follow_path+0x2aa>
    1762:	df 01       	movw	r26, r30
    1764:	a2 0f       	add	r26, r18
    1766:	b3 1f       	adc	r27, r19
    1768:	6c 81       	ldd	r22, Y+4	; 0x04
    176a:	6c 93       	st	X, r22
    176c:	d9 01       	movw	r26, r18
    176e:	11 96       	adiw	r26, 0x01	; 1
    1770:	ae 0f       	add	r26, r30
    1772:	bf 1f       	adc	r27, r31
    1774:	2e 5f       	subi	r18, 0xFE	; 254
    1776:	3f 4f       	sbci	r19, 0xFF	; 255
    1778:	bc 92       	st	X, r11
    177a:	ad cf       	rjmp	.-166    	; 0x16d6 <follow_path+0xd4>
    177c:	7c 81       	ldd	r23, Y+4	; 0x04
    177e:	a7 2e       	mov	r10, r23
    1780:	b1 2c       	mov	r11, r1
    1782:	a2 e2       	ldi	r26, 0x22	; 34
    1784:	aa 16       	cp	r10, r26
    1786:	b1 04       	cpc	r11, r1
    1788:	09 f4       	brne	.+2      	; 0x178c <follow_path+0x18a>
    178a:	92 c0       	rjmp	.+292    	; 0x18b0 <follow_path+0x2ae>
    178c:	a2 e6       	ldi	r26, 0x62	; 98
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	4d 91       	ld	r20, X+
    1792:	44 23       	and	r20, r20
    1794:	09 f4       	brne	.+2      	; 0x1798 <follow_path+0x196>
    1796:	9e c0       	rjmp	.+316    	; 0x18d4 <follow_path+0x2d2>
    1798:	55 27       	eor	r21, r21
    179a:	47 fd       	sbrc	r20, 7
    179c:	50 95       	com	r21
    179e:	a4 16       	cp	r10, r20
    17a0:	b5 06       	cpc	r11, r21
    17a2:	b1 f7       	brne	.-20     	; 0x1790 <follow_path+0x18e>
    17a4:	87 c0       	rjmp	.+270    	; 0x18b4 <follow_path+0x2b2>
    17a6:	b3 2d       	mov	r27, r3
    17a8:	b2 60       	ori	r27, 0x02	; 2
    17aa:	3b 2e       	mov	r3, r27
    17ac:	09 c0       	rjmp	.+18     	; 0x17c0 <follow_path+0x1be>
    17ae:	4c 81       	ldd	r20, Y+4	; 0x04
    17b0:	41 56       	subi	r20, 0x61	; 97
    17b2:	4a 31       	cpi	r20, 0x1A	; 26
    17b4:	28 f4       	brcc	.+10     	; 0x17c0 <follow_path+0x1be>
    17b6:	43 2d       	mov	r20, r3
    17b8:	41 60       	ori	r20, 0x01	; 1
    17ba:	34 2e       	mov	r3, r20
    17bc:	6c 81       	ldd	r22, Y+4	; 0x04
    17be:	60 52       	subi	r22, 0x20	; 32
    17c0:	df 01       	movw	r26, r30
    17c2:	a2 0f       	add	r26, r18
    17c4:	b3 1f       	adc	r27, r19
    17c6:	6c 93       	st	X, r22
    17c8:	2f 5f       	subi	r18, 0xFF	; 255
    17ca:	3f 4f       	sbci	r19, 0xFF	; 255
    17cc:	a2 01       	movw	r20, r4
    17ce:	83 cf       	rjmp	.-250    	; 0x16d6 <follow_path+0xd4>
    17d0:	23 2b       	or	r18, r19
    17d2:	09 f4       	brne	.+2      	; 0x17d6 <follow_path+0x1d4>
    17d4:	71 c0       	rjmp	.+226    	; 0x18b8 <follow_path+0x2b6>
    17d6:	20 81       	ld	r18, Z
    17d8:	25 3e       	cpi	r18, 0xE5	; 229
    17da:	11 f4       	brne	.+4      	; 0x17e0 <follow_path+0x1de>
    17dc:	65 e0       	ldi	r22, 0x05	; 5
    17de:	60 83       	st	Z, r22
    17e0:	78 e0       	ldi	r23, 0x08	; 8
    17e2:	c7 16       	cp	r12, r23
    17e4:	d1 04       	cpc	r13, r1
    17e6:	19 f4       	brne	.+6      	; 0x17ee <follow_path+0x1ec>
    17e8:	39 2e       	mov	r3, r25
    17ea:	33 0c       	add	r3, r3
    17ec:	33 0c       	add	r3, r3
    17ee:	93 2d       	mov	r25, r3
    17f0:	93 70       	andi	r25, 0x03	; 3
    17f2:	91 30       	cpi	r25, 0x01	; 1
    17f4:	09 f4       	brne	.+2      	; 0x17f8 <follow_path+0x1f6>
    17f6:	80 61       	ori	r24, 0x10	; 16
    17f8:	93 2d       	mov	r25, r3
    17fa:	9c 70       	andi	r25, 0x0C	; 12
    17fc:	94 30       	cpi	r25, 0x04	; 4
    17fe:	09 f4       	brne	.+2      	; 0x1802 <follow_path+0x200>
    1800:	88 60       	ori	r24, 0x08	; 8
    1802:	83 87       	std	Z+11, r24	; 0x0b
    1804:	6e 2d       	mov	r22, r14
    1806:	7b 2d       	mov	r23, r11
    1808:	8d 81       	ldd	r24, Y+5	; 0x05
    180a:	9e 81       	ldd	r25, Y+6	; 0x06
    180c:	f4 da       	rcall	.-2584   	; 0xdf6 <dir_sdi>
    180e:	81 11       	cpse	r24, r1
    1810:	7a c0       	rjmp	.+244    	; 0x1906 <follow_path+0x304>
    1812:	cd 80       	ldd	r12, Y+5	; 0x05
    1814:	de 80       	ldd	r13, Y+6	; 0x06
    1816:	d6 01       	movw	r26, r12
    1818:	1e 96       	adiw	r26, 0x0e	; 14
    181a:	4d 91       	ld	r20, X+
    181c:	5d 91       	ld	r21, X+
    181e:	6d 91       	ld	r22, X+
    1820:	7c 91       	ld	r23, X
    1822:	51 97       	sbiw	r26, 0x11	; 17
    1824:	8d 91       	ld	r24, X+
    1826:	9c 91       	ld	r25, X
    1828:	0e 94 26 01 	call	0x24c	; 0x24c <move_window>
    182c:	81 11       	cpse	r24, r1
    182e:	6d c0       	rjmp	.+218    	; 0x190a <follow_path+0x308>
    1830:	f6 01       	movw	r30, r12
    1832:	62 89       	ldd	r22, Z+18	; 0x12
    1834:	73 89       	ldd	r23, Z+19	; 0x13
    1836:	db 01       	movw	r26, r22
    1838:	9c 91       	ld	r25, X
    183a:	99 23       	and	r25, r25
    183c:	09 f4       	brne	.+2      	; 0x1840 <follow_path+0x23e>
    183e:	6e c0       	rjmp	.+220    	; 0x191c <follow_path+0x31a>
    1840:	1b 96       	adiw	r26, 0x0b	; 11
    1842:	9c 91       	ld	r25, X
    1844:	93 fd       	sbrc	r25, 3
    1846:	12 c0       	rjmp	.+36     	; 0x186c <follow_path+0x26a>
    1848:	44 89       	ldd	r20, Z+20	; 0x14
    184a:	55 89       	ldd	r21, Z+21	; 0x15
    184c:	fb 01       	movw	r30, r22
    184e:	da 01       	movw	r26, r20
    1850:	9b 01       	movw	r18, r22
    1852:	25 5f       	subi	r18, 0xF5	; 245
    1854:	3f 4f       	sbci	r19, 0xFF	; 255
    1856:	26 01       	movw	r4, r12
    1858:	04 c0       	rjmp	.+8      	; 0x1862 <follow_path+0x260>
    185a:	e2 17       	cp	r30, r18
    185c:	f3 07       	cpc	r31, r19
    185e:	09 f4       	brne	.+2      	; 0x1862 <follow_path+0x260>
    1860:	62 c0       	rjmp	.+196    	; 0x1926 <follow_path+0x324>
    1862:	d1 90       	ld	r13, Z+
    1864:	9d 91       	ld	r25, X+
    1866:	d9 16       	cp	r13, r25
    1868:	c1 f3       	breq	.-16     	; 0x185a <follow_path+0x258>
    186a:	62 01       	movw	r12, r4
    186c:	6e 2d       	mov	r22, r14
    186e:	7b 2d       	mov	r23, r11
    1870:	c6 01       	movw	r24, r12
    1872:	a8 dd       	rcall	.-1200   	; 0x13c4 <dir_next>
    1874:	88 23       	and	r24, r24
    1876:	79 f2       	breq	.-98     	; 0x1816 <follow_path+0x214>
    1878:	48 c0       	rjmp	.+144    	; 0x190a <follow_path+0x308>
    187a:	92 ff       	sbrs	r25, 2
    187c:	1f c0       	rjmp	.+62     	; 0x18bc <follow_path+0x2ba>
    187e:	84 e0       	ldi	r24, 0x04	; 4
    1880:	58 c0       	rjmp	.+176    	; 0x1932 <follow_path+0x330>
    1882:	fb 01       	movw	r30, r22
    1884:	83 85       	ldd	r24, Z+11	; 0x0b
    1886:	84 ff       	sbrs	r24, 4
    1888:	1b c0       	rjmp	.+54     	; 0x18c0 <follow_path+0x2be>
    188a:	ad 81       	ldd	r26, Y+5	; 0x05
    188c:	be 81       	ldd	r27, Y+6	; 0x06
    188e:	8d 91       	ld	r24, X+
    1890:	9c 91       	ld	r25, X
    1892:	0e 94 66 00 	call	0xcc	; 0xcc <ld_clust>
    1896:	ed 81       	ldd	r30, Y+5	; 0x05
    1898:	fe 81       	ldd	r31, Y+6	; 0x06
    189a:	66 83       	std	Z+6, r22	; 0x06
    189c:	77 83       	std	Z+7, r23	; 0x07
    189e:	80 87       	std	Z+8, r24	; 0x08
    18a0:	91 87       	std	Z+9, r25	; 0x09
    18a2:	f5 ce       	rjmp	.-534    	; 0x168e <follow_path+0x8c>
    18a4:	86 e0       	ldi	r24, 0x06	; 6
    18a6:	45 c0       	rjmp	.+138    	; 0x1932 <follow_path+0x330>
    18a8:	86 e0       	ldi	r24, 0x06	; 6
    18aa:	43 c0       	rjmp	.+134    	; 0x1932 <follow_path+0x330>
    18ac:	86 e0       	ldi	r24, 0x06	; 6
    18ae:	41 c0       	rjmp	.+130    	; 0x1932 <follow_path+0x330>
    18b0:	86 e0       	ldi	r24, 0x06	; 6
    18b2:	3f c0       	rjmp	.+126    	; 0x1932 <follow_path+0x330>
    18b4:	86 e0       	ldi	r24, 0x06	; 6
    18b6:	3d c0       	rjmp	.+122    	; 0x1932 <follow_path+0x330>
    18b8:	86 e0       	ldi	r24, 0x06	; 6
    18ba:	3b c0       	rjmp	.+118    	; 0x1932 <follow_path+0x330>
    18bc:	85 e0       	ldi	r24, 0x05	; 5
    18be:	39 c0       	rjmp	.+114    	; 0x1932 <follow_path+0x330>
    18c0:	85 e0       	ldi	r24, 0x05	; 5
    18c2:	37 c0       	rjmp	.+110    	; 0x1932 <follow_path+0x330>
    18c4:	86 e0       	ldi	r24, 0x06	; 6
    18c6:	35 c0       	rjmp	.+106    	; 0x1932 <follow_path+0x330>
    18c8:	28 e0       	ldi	r18, 0x08	; 8
    18ca:	c2 16       	cp	r12, r18
    18cc:	d1 04       	cpc	r13, r1
    18ce:	09 f4       	brne	.+2      	; 0x18d2 <follow_path+0x2d0>
    18d0:	1c cf       	rjmp	.-456    	; 0x170a <follow_path+0x108>
    18d2:	f8 cf       	rjmp	.-16     	; 0x18c4 <follow_path+0x2c2>
    18d4:	7c 83       	std	Y+4, r23	; 0x04
    18d6:	47 2f       	mov	r20, r23
    18d8:	41 54       	subi	r20, 0x41	; 65
    18da:	4a 31       	cpi	r20, 0x1A	; 26
    18dc:	08 f4       	brcc	.+2      	; 0x18e0 <follow_path+0x2de>
    18de:	63 cf       	rjmp	.-314    	; 0x17a6 <follow_path+0x1a4>
    18e0:	66 cf       	rjmp	.-308    	; 0x17ae <follow_path+0x1ac>
    18e2:	1e 83       	std	Y+6, r17	; 0x06
    18e4:	0d 83       	std	Y+5, r16	; 0x05
    18e6:	82 01       	movw	r16, r4
    18e8:	b9 80       	ldd	r11, Y+1	; 0x01
    18ea:	08 0f       	add	r16, r24
    18ec:	19 1f       	adc	r17, r25
    18ee:	93 2d       	mov	r25, r3
    18f0:	88 2d       	mov	r24, r8
    18f2:	6e cf       	rjmp	.-292    	; 0x17d0 <follow_path+0x1ce>
    18f4:	1e 83       	std	Y+6, r17	; 0x06
    18f6:	0d 83       	std	Y+5, r16	; 0x05
    18f8:	82 01       	movw	r16, r4
    18fa:	b9 80       	ldd	r11, Y+1	; 0x01
    18fc:	08 0f       	add	r16, r24
    18fe:	19 1f       	adc	r17, r25
    1900:	93 2d       	mov	r25, r3
    1902:	84 e0       	ldi	r24, 0x04	; 4
    1904:	65 cf       	rjmp	.-310    	; 0x17d0 <follow_path+0x1ce>
    1906:	cd 80       	ldd	r12, Y+5	; 0x05
    1908:	de 80       	ldd	r13, Y+6	; 0x06
    190a:	d6 01       	movw	r26, r12
    190c:	54 96       	adiw	r26, 0x14	; 20
    190e:	ed 91       	ld	r30, X+
    1910:	fc 91       	ld	r31, X
    1912:	55 97       	sbiw	r26, 0x15	; 21
    1914:	93 85       	ldd	r25, Z+11	; 0x0b
    1916:	84 30       	cpi	r24, 0x04	; 4
    1918:	61 f4       	brne	.+24     	; 0x1932 <follow_path+0x330>
    191a:	af cf       	rjmp	.-162    	; 0x187a <follow_path+0x278>
    191c:	04 88       	ldd	r0, Z+20	; 0x14
    191e:	f5 89       	ldd	r31, Z+21	; 0x15
    1920:	e0 2d       	mov	r30, r0
    1922:	93 85       	ldd	r25, Z+11	; 0x0b
    1924:	aa cf       	rjmp	.-172    	; 0x187a <follow_path+0x278>
    1926:	5e 82       	std	Y+6, r5	; 0x06
    1928:	4d 82       	std	Y+5, r4	; 0x05
    192a:	fa 01       	movw	r30, r20
    192c:	93 85       	ldd	r25, Z+11	; 0x0b
    192e:	92 ff       	sbrs	r25, 2
    1930:	a8 cf       	rjmp	.-176    	; 0x1882 <follow_path+0x280>
    1932:	26 96       	adiw	r28, 0x06	; 6
    1934:	0f b6       	in	r0, 0x3f	; 63
    1936:	f8 94       	cli
    1938:	de bf       	out	0x3e, r29	; 62
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	cd bf       	out	0x3d, r28	; 61
    193e:	df 91       	pop	r29
    1940:	cf 91       	pop	r28
    1942:	1f 91       	pop	r17
    1944:	0f 91       	pop	r16
    1946:	ff 90       	pop	r15
    1948:	ef 90       	pop	r14
    194a:	df 90       	pop	r13
    194c:	cf 90       	pop	r12
    194e:	bf 90       	pop	r11
    1950:	af 90       	pop	r10
    1952:	9f 90       	pop	r9
    1954:	8f 90       	pop	r8
    1956:	7f 90       	pop	r7
    1958:	6f 90       	pop	r6
    195a:	5f 90       	pop	r5
    195c:	4f 90       	pop	r4
    195e:	3f 90       	pop	r3
    1960:	2f 90       	pop	r2
    1962:	08 95       	ret

00001964 <dir_register>:
    1964:	1f 93       	push	r17
    1966:	cf 93       	push	r28
    1968:	df 93       	push	r29
    196a:	ec 01       	movw	r28, r24
    196c:	60 e0       	ldi	r22, 0x00	; 0
    196e:	70 e0       	ldi	r23, 0x00	; 0
    1970:	42 da       	rcall	.-2940   	; 0xdf6 <dir_sdi>
    1972:	18 2f       	mov	r17, r24
    1974:	81 11       	cpse	r24, r1
    1976:	19 c0       	rjmp	.+50     	; 0x19aa <dir_register+0x46>
    1978:	4e 85       	ldd	r20, Y+14	; 0x0e
    197a:	5f 85       	ldd	r21, Y+15	; 0x0f
    197c:	68 89       	ldd	r22, Y+16	; 0x10
    197e:	79 89       	ldd	r23, Y+17	; 0x11
    1980:	88 81       	ld	r24, Y
    1982:	99 81       	ldd	r25, Y+1	; 0x01
    1984:	0e 94 26 01 	call	0x24c	; 0x24c <move_window>
    1988:	18 2f       	mov	r17, r24
    198a:	81 11       	cpse	r24, r1
    198c:	0e c0       	rjmp	.+28     	; 0x19aa <dir_register+0x46>
    198e:	ea 89       	ldd	r30, Y+18	; 0x12
    1990:	fb 89       	ldd	r31, Y+19	; 0x13
    1992:	80 81       	ld	r24, Z
    1994:	85 3e       	cpi	r24, 0xE5	; 229
    1996:	69 f0       	breq	.+26     	; 0x19b2 <dir_register+0x4e>
    1998:	88 23       	and	r24, r24
    199a:	59 f0       	breq	.+22     	; 0x19b2 <dir_register+0x4e>
    199c:	61 e0       	ldi	r22, 0x01	; 1
    199e:	70 e0       	ldi	r23, 0x00	; 0
    19a0:	ce 01       	movw	r24, r28
    19a2:	10 dd       	rcall	.-1504   	; 0x13c4 <dir_next>
    19a4:	18 2f       	mov	r17, r24
    19a6:	88 23       	and	r24, r24
    19a8:	39 f3       	breq	.-50     	; 0x1978 <dir_register+0x14>
    19aa:	14 30       	cpi	r17, 0x04	; 4
    19ac:	19 f1       	breq	.+70     	; 0x19f4 <dir_register+0x90>
    19ae:	11 11       	cpse	r17, r1
    19b0:	22 c0       	rjmp	.+68     	; 0x19f6 <dir_register+0x92>
    19b2:	4e 85       	ldd	r20, Y+14	; 0x0e
    19b4:	5f 85       	ldd	r21, Y+15	; 0x0f
    19b6:	68 89       	ldd	r22, Y+16	; 0x10
    19b8:	79 89       	ldd	r23, Y+17	; 0x11
    19ba:	88 81       	ld	r24, Y
    19bc:	99 81       	ldd	r25, Y+1	; 0x01
    19be:	0e 94 26 01 	call	0x24c	; 0x24c <move_window>
    19c2:	18 2f       	mov	r17, r24
    19c4:	81 11       	cpse	r24, r1
    19c6:	17 c0       	rjmp	.+46     	; 0x19f6 <dir_register+0x92>
    19c8:	ea 89       	ldd	r30, Y+18	; 0x12
    19ca:	fb 89       	ldd	r31, Y+19	; 0x13
    19cc:	9f 01       	movw	r18, r30
    19ce:	20 5e       	subi	r18, 0xE0	; 224
    19d0:	3f 4f       	sbci	r19, 0xFF	; 255
    19d2:	11 92       	st	Z+, r1
    19d4:	e2 17       	cp	r30, r18
    19d6:	f3 07       	cpc	r31, r19
    19d8:	e1 f7       	brne	.-8      	; 0x19d2 <dir_register+0x6e>
    19da:	6c 89       	ldd	r22, Y+20	; 0x14
    19dc:	7d 89       	ldd	r23, Y+21	; 0x15
    19de:	4b e0       	ldi	r20, 0x0B	; 11
    19e0:	50 e0       	ldi	r21, 0x00	; 0
    19e2:	8a 89       	ldd	r24, Y+18	; 0x12
    19e4:	9b 89       	ldd	r25, Y+19	; 0x13
    19e6:	0e 94 58 00 	call	0xb0	; 0xb0 <mem_cpy>
    19ea:	e8 81       	ld	r30, Y
    19ec:	f9 81       	ldd	r31, Y+1	; 0x01
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	84 83       	std	Z+4, r24	; 0x04
    19f2:	01 c0       	rjmp	.+2      	; 0x19f6 <dir_register+0x92>
    19f4:	17 e0       	ldi	r17, 0x07	; 7
    19f6:	81 2f       	mov	r24, r17
    19f8:	df 91       	pop	r29
    19fa:	cf 91       	pop	r28
    19fc:	1f 91       	pop	r17
    19fe:	08 95       	ret

00001a00 <remove_chain>:
    1a00:	8f 92       	push	r8
    1a02:	9f 92       	push	r9
    1a04:	af 92       	push	r10
    1a06:	bf 92       	push	r11
    1a08:	cf 92       	push	r12
    1a0a:	df 92       	push	r13
    1a0c:	ef 92       	push	r14
    1a0e:	ff 92       	push	r15
    1a10:	0f 93       	push	r16
    1a12:	1f 93       	push	r17
    1a14:	cf 93       	push	r28
    1a16:	df 93       	push	r29
    1a18:	ec 01       	movw	r28, r24
    1a1a:	4a 01       	movw	r8, r20
    1a1c:	5b 01       	movw	r10, r22
    1a1e:	42 30       	cpi	r20, 0x02	; 2
    1a20:	51 05       	cpc	r21, r1
    1a22:	61 05       	cpc	r22, r1
    1a24:	71 05       	cpc	r23, r1
    1a26:	08 f4       	brcc	.+2      	; 0x1a2a <remove_chain+0x2a>
    1a28:	4b c0       	rjmp	.+150    	; 0x1ac0 <remove_chain+0xc0>
    1a2a:	4a 89       	ldd	r20, Y+18	; 0x12
    1a2c:	5b 89       	ldd	r21, Y+19	; 0x13
    1a2e:	6c 89       	ldd	r22, Y+20	; 0x14
    1a30:	7d 89       	ldd	r23, Y+21	; 0x15
    1a32:	84 16       	cp	r8, r20
    1a34:	95 06       	cpc	r9, r21
    1a36:	a6 06       	cpc	r10, r22
    1a38:	b7 06       	cpc	r11, r23
    1a3a:	08 f0       	brcs	.+2      	; 0x1a3e <remove_chain+0x3e>
    1a3c:	43 c0       	rjmp	.+134    	; 0x1ac4 <remove_chain+0xc4>
    1a3e:	b5 01       	movw	r22, r10
    1a40:	a4 01       	movw	r20, r8
    1a42:	ce 01       	movw	r24, r28
    1a44:	dc d8       	rcall	.-3656   	; 0xbfe <get_fat>
    1a46:	6b 01       	movw	r12, r22
    1a48:	7c 01       	movw	r14, r24
    1a4a:	61 15       	cp	r22, r1
    1a4c:	71 05       	cpc	r23, r1
    1a4e:	81 05       	cpc	r24, r1
    1a50:	91 05       	cpc	r25, r1
    1a52:	d1 f1       	breq	.+116    	; 0x1ac8 <remove_chain+0xc8>
    1a54:	91 e0       	ldi	r25, 0x01	; 1
    1a56:	c9 16       	cp	r12, r25
    1a58:	d1 04       	cpc	r13, r1
    1a5a:	e1 04       	cpc	r14, r1
    1a5c:	f1 04       	cpc	r15, r1
    1a5e:	b1 f1       	breq	.+108    	; 0x1acc <remove_chain+0xcc>
    1a60:	8f ef       	ldi	r24, 0xFF	; 255
    1a62:	c8 16       	cp	r12, r24
    1a64:	d8 06       	cpc	r13, r24
    1a66:	e8 06       	cpc	r14, r24
    1a68:	f8 06       	cpc	r15, r24
    1a6a:	91 f1       	breq	.+100    	; 0x1ad0 <remove_chain+0xd0>
    1a6c:	00 e0       	ldi	r16, 0x00	; 0
    1a6e:	10 e0       	ldi	r17, 0x00	; 0
    1a70:	98 01       	movw	r18, r16
    1a72:	b5 01       	movw	r22, r10
    1a74:	a4 01       	movw	r20, r8
    1a76:	ce 01       	movw	r24, r28
    1a78:	79 da       	rcall	.-2830   	; 0xf6c <put_fat>
    1a7a:	81 11       	cpse	r24, r1
    1a7c:	2a c0       	rjmp	.+84     	; 0x1ad2 <remove_chain+0xd2>
    1a7e:	4e 85       	ldd	r20, Y+14	; 0x0e
    1a80:	5f 85       	ldd	r21, Y+15	; 0x0f
    1a82:	68 89       	ldd	r22, Y+16	; 0x10
    1a84:	79 89       	ldd	r23, Y+17	; 0x11
    1a86:	4f 3f       	cpi	r20, 0xFF	; 255
    1a88:	9f ef       	ldi	r25, 0xFF	; 255
    1a8a:	59 07       	cpc	r21, r25
    1a8c:	69 07       	cpc	r22, r25
    1a8e:	79 07       	cpc	r23, r25
    1a90:	59 f0       	breq	.+22     	; 0x1aa8 <remove_chain+0xa8>
    1a92:	4f 5f       	subi	r20, 0xFF	; 255
    1a94:	5f 4f       	sbci	r21, 0xFF	; 255
    1a96:	6f 4f       	sbci	r22, 0xFF	; 255
    1a98:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9a:	4e 87       	std	Y+14, r20	; 0x0e
    1a9c:	5f 87       	std	Y+15, r21	; 0x0f
    1a9e:	68 8b       	std	Y+16, r22	; 0x10
    1aa0:	79 8b       	std	Y+17, r23	; 0x11
    1aa2:	9d 81       	ldd	r25, Y+5	; 0x05
    1aa4:	91 60       	ori	r25, 0x01	; 1
    1aa6:	9d 83       	std	Y+5, r25	; 0x05
    1aa8:	4a 89       	ldd	r20, Y+18	; 0x12
    1aaa:	5b 89       	ldd	r21, Y+19	; 0x13
    1aac:	6c 89       	ldd	r22, Y+20	; 0x14
    1aae:	7d 89       	ldd	r23, Y+21	; 0x15
    1ab0:	c4 16       	cp	r12, r20
    1ab2:	d5 06       	cpc	r13, r21
    1ab4:	e6 06       	cpc	r14, r22
    1ab6:	f7 06       	cpc	r15, r23
    1ab8:	60 f4       	brcc	.+24     	; 0x1ad2 <remove_chain+0xd2>
    1aba:	46 01       	movw	r8, r12
    1abc:	57 01       	movw	r10, r14
    1abe:	bf cf       	rjmp	.-130    	; 0x1a3e <remove_chain+0x3e>
    1ac0:	82 e0       	ldi	r24, 0x02	; 2
    1ac2:	07 c0       	rjmp	.+14     	; 0x1ad2 <remove_chain+0xd2>
    1ac4:	82 e0       	ldi	r24, 0x02	; 2
    1ac6:	05 c0       	rjmp	.+10     	; 0x1ad2 <remove_chain+0xd2>
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	03 c0       	rjmp	.+6      	; 0x1ad2 <remove_chain+0xd2>
    1acc:	82 e0       	ldi	r24, 0x02	; 2
    1ace:	01 c0       	rjmp	.+2      	; 0x1ad2 <remove_chain+0xd2>
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	df 91       	pop	r29
    1ad4:	cf 91       	pop	r28
    1ad6:	1f 91       	pop	r17
    1ad8:	0f 91       	pop	r16
    1ada:	ff 90       	pop	r15
    1adc:	ef 90       	pop	r14
    1ade:	df 90       	pop	r13
    1ae0:	cf 90       	pop	r12
    1ae2:	bf 90       	pop	r11
    1ae4:	af 90       	pop	r10
    1ae6:	9f 90       	pop	r9
    1ae8:	8f 90       	pop	r8
    1aea:	08 95       	ret

00001aec <f_mount>:
    1aec:	1f 93       	push	r17
    1aee:	cf 93       	push	r28
    1af0:	df 93       	push	r29
    1af2:	00 d0       	rcall	.+0      	; 0x1af4 <f_mount+0x8>
    1af4:	00 d0       	rcall	.+0      	; 0x1af6 <f_mount+0xa>
    1af6:	00 d0       	rcall	.+0      	; 0x1af8 <f_mount+0xc>
    1af8:	cd b7       	in	r28, 0x3d	; 61
    1afa:	de b7       	in	r29, 0x3e	; 62
    1afc:	9c 83       	std	Y+4, r25	; 0x04
    1afe:	8b 83       	std	Y+3, r24	; 0x03
    1b00:	7e 83       	std	Y+6, r23	; 0x06
    1b02:	6d 83       	std	Y+5, r22	; 0x05
    1b04:	14 2f       	mov	r17, r20
    1b06:	7a 83       	std	Y+2, r23	; 0x02
    1b08:	69 83       	std	Y+1, r22	; 0x01
    1b0a:	ce 01       	movw	r24, r28
    1b0c:	01 96       	adiw	r24, 0x01	; 1
    1b0e:	0e 94 87 00 	call	0x10e	; 0x10e <get_ldnumber>
    1b12:	99 23       	and	r25, r25
    1b14:	34 f1       	brlt	.+76     	; 0x1b62 <f_mount+0x76>
    1b16:	fc 01       	movw	r30, r24
    1b18:	ee 0f       	add	r30, r30
    1b1a:	ff 1f       	adc	r31, r31
    1b1c:	ec 54       	subi	r30, 0x4C	; 76
    1b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b20:	01 90       	ld	r0, Z+
    1b22:	f0 81       	ld	r31, Z
    1b24:	e0 2d       	mov	r30, r0
    1b26:	30 97       	sbiw	r30, 0x00	; 0
    1b28:	09 f0       	breq	.+2      	; 0x1b2c <f_mount+0x40>
    1b2a:	10 82       	st	Z, r1
    1b2c:	eb 81       	ldd	r30, Y+3	; 0x03
    1b2e:	fc 81       	ldd	r31, Y+4	; 0x04
    1b30:	30 97       	sbiw	r30, 0x00	; 0
    1b32:	e9 f0       	breq	.+58     	; 0x1b6e <f_mount+0x82>
    1b34:	10 82       	st	Z, r1
    1b36:	2b 81       	ldd	r18, Y+3	; 0x03
    1b38:	3c 81       	ldd	r19, Y+4	; 0x04
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	ee 0f       	add	r30, r30
    1b3e:	ff 1f       	adc	r31, r31
    1b40:	ec 54       	subi	r30, 0x4C	; 76
    1b42:	ff 4f       	sbci	r31, 0xFF	; 255
    1b44:	31 83       	std	Z+1, r19	; 0x01
    1b46:	20 83       	st	Z, r18
    1b48:	23 2b       	or	r18, r19
    1b4a:	69 f0       	breq	.+26     	; 0x1b66 <f_mount+0x7a>
    1b4c:	11 30       	cpi	r17, 0x01	; 1
    1b4e:	69 f4       	brne	.+26     	; 0x1b6a <f_mount+0x7e>
    1b50:	40 e0       	ldi	r20, 0x00	; 0
    1b52:	be 01       	movw	r22, r28
    1b54:	6b 5f       	subi	r22, 0xFB	; 251
    1b56:	7f 4f       	sbci	r23, 0xFF	; 255
    1b58:	ce 01       	movw	r24, r28
    1b5a:	03 96       	adiw	r24, 0x03	; 3
    1b5c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <find_volume>
    1b60:	0e c0       	rjmp	.+28     	; 0x1b7e <f_mount+0x92>
    1b62:	8b e0       	ldi	r24, 0x0B	; 11
    1b64:	0c c0       	rjmp	.+24     	; 0x1b7e <f_mount+0x92>
    1b66:	80 e0       	ldi	r24, 0x00	; 0
    1b68:	0a c0       	rjmp	.+20     	; 0x1b7e <f_mount+0x92>
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	08 c0       	rjmp	.+16     	; 0x1b7e <f_mount+0x92>
    1b6e:	fc 01       	movw	r30, r24
    1b70:	ee 0f       	add	r30, r30
    1b72:	ff 1f       	adc	r31, r31
    1b74:	ec 54       	subi	r30, 0x4C	; 76
    1b76:	ff 4f       	sbci	r31, 0xFF	; 255
    1b78:	11 82       	std	Z+1, r1	; 0x01
    1b7a:	10 82       	st	Z, r1
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	26 96       	adiw	r28, 0x06	; 6
    1b80:	0f b6       	in	r0, 0x3f	; 63
    1b82:	f8 94       	cli
    1b84:	de bf       	out	0x3e, r29	; 62
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	cd bf       	out	0x3d, r28	; 61
    1b8a:	df 91       	pop	r29
    1b8c:	cf 91       	pop	r28
    1b8e:	1f 91       	pop	r17
    1b90:	08 95       	ret

00001b92 <f_open>:
    1b92:	4f 92       	push	r4
    1b94:	5f 92       	push	r5
    1b96:	6f 92       	push	r6
    1b98:	7f 92       	push	r7
    1b9a:	bf 92       	push	r11
    1b9c:	cf 92       	push	r12
    1b9e:	df 92       	push	r13
    1ba0:	ef 92       	push	r14
    1ba2:	ff 92       	push	r15
    1ba4:	0f 93       	push	r16
    1ba6:	1f 93       	push	r17
    1ba8:	cf 93       	push	r28
    1baa:	df 93       	push	r29
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
    1bb0:	a8 97       	sbiw	r28, 0x28	; 40
    1bb2:	0f b6       	in	r0, 0x3f	; 63
    1bb4:	f8 94       	cli
    1bb6:	de bf       	out	0x3e, r29	; 62
    1bb8:	0f be       	out	0x3f, r0	; 63
    1bba:	cd bf       	out	0x3d, r28	; 61
    1bbc:	8c 01       	movw	r16, r24
    1bbe:	7c a3       	std	Y+36, r23	; 0x24
    1bc0:	6b a3       	std	Y+35, r22	; 0x23
    1bc2:	f4 2e       	mov	r15, r20
    1bc4:	00 97       	sbiw	r24, 0x00	; 0
    1bc6:	09 f4       	brne	.+2      	; 0x1bca <f_open+0x38>
    1bc8:	e4 c0       	rjmp	.+456    	; 0x1d92 <f_open+0x200>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	1d 92       	st	X+, r1
    1bce:	1c 92       	st	X, r1
    1bd0:	4e 71       	andi	r20, 0x1E	; 30
    1bd2:	be 01       	movw	r22, r28
    1bd4:	6d 5d       	subi	r22, 0xDD	; 221
    1bd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd8:	ce 01       	movw	r24, r28
    1bda:	01 96       	adiw	r24, 0x01	; 1
    1bdc:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <find_volume>
    1be0:	81 11       	cpse	r24, r1
    1be2:	eb c0       	rjmp	.+470    	; 0x1dba <f_open+0x228>
    1be4:	bf 2d       	mov	r27, r15
    1be6:	bf 71       	andi	r27, 0x1F	; 31
    1be8:	bb 2e       	mov	r11, r27
    1bea:	ce 01       	movw	r24, r28
    1bec:	47 96       	adiw	r24, 0x17	; 23
    1bee:	9e 8b       	std	Y+22, r25	; 0x16
    1bf0:	8d 8b       	std	Y+21, r24	; 0x15
    1bf2:	6b a1       	ldd	r22, Y+35	; 0x23
    1bf4:	7c a1       	ldd	r23, Y+36	; 0x24
    1bf6:	46 97       	sbiw	r24, 0x16	; 22
    1bf8:	04 dd       	rcall	.-1528   	; 0x1602 <follow_path>
    1bfa:	cb 88       	ldd	r12, Y+19	; 0x13
    1bfc:	dc 88       	ldd	r13, Y+20	; 0x14
    1bfe:	81 11       	cpse	r24, r1
    1c00:	d0 c0       	rjmp	.+416    	; 0x1da2 <f_open+0x210>
    1c02:	c1 14       	cp	r12, r1
    1c04:	d1 04       	cpc	r13, r1
    1c06:	09 f0       	breq	.+2      	; 0x1c0a <f_open+0x78>
    1c08:	c6 c0       	rjmp	.+396    	; 0x1d96 <f_open+0x204>
    1c0a:	ca c0       	rjmp	.+404    	; 0x1da0 <f_open+0x20e>
    1c0c:	88 23       	and	r24, r24
    1c0e:	71 f0       	breq	.+28     	; 0x1c2c <f_open+0x9a>
    1c10:	84 30       	cpi	r24, 0x04	; 4
    1c12:	09 f0       	breq	.+2      	; 0x1c16 <f_open+0x84>
    1c14:	d2 c0       	rjmp	.+420    	; 0x1dba <f_open+0x228>
    1c16:	ce 01       	movw	r24, r28
    1c18:	01 96       	adiw	r24, 0x01	; 1
    1c1a:	a4 de       	rcall	.-696    	; 0x1964 <dir_register>
    1c1c:	eb 2d       	mov	r30, r11
    1c1e:	e8 60       	ori	r30, 0x08	; 8
    1c20:	be 2e       	mov	r11, r30
    1c22:	cb 88       	ldd	r12, Y+19	; 0x13
    1c24:	dc 88       	ldd	r13, Y+20	; 0x14
    1c26:	88 23       	and	r24, r24
    1c28:	49 f0       	breq	.+18     	; 0x1c3c <f_open+0xaa>
    1c2a:	c7 c0       	rjmp	.+398    	; 0x1dba <f_open+0x228>
    1c2c:	d6 01       	movw	r26, r12
    1c2e:	1b 96       	adiw	r26, 0x0b	; 11
    1c30:	8c 91       	ld	r24, X
    1c32:	81 71       	andi	r24, 0x11	; 17
    1c34:	09 f0       	breq	.+2      	; 0x1c38 <f_open+0xa6>
    1c36:	ba c0       	rjmp	.+372    	; 0x1dac <f_open+0x21a>
    1c38:	f2 fc       	sbrc	r15, 2
    1c3a:	ba c0       	rjmp	.+372    	; 0x1db0 <f_open+0x21e>
    1c3c:	b3 fe       	sbrs	r11, 3
    1c3e:	55 c0       	rjmp	.+170    	; 0x1cea <f_open+0x158>
    1c40:	67 d4       	rcall	.+2254   	; 0x2510 <get_fattime>
    1c42:	f6 01       	movw	r30, r12
    1c44:	66 87       	std	Z+14, r22	; 0x0e
    1c46:	77 87       	std	Z+15, r23	; 0x0f
    1c48:	80 8b       	std	Z+16, r24	; 0x10
    1c4a:	91 8b       	std	Z+17, r25	; 0x11
    1c4c:	13 86       	std	Z+11, r1	; 0x0b
    1c4e:	14 8e       	std	Z+28, r1	; 0x1c
    1c50:	15 8e       	std	Z+29, r1	; 0x1d
    1c52:	16 8e       	std	Z+30, r1	; 0x1e
    1c54:	17 8e       	std	Z+31, r1	; 0x1f
    1c56:	e9 80       	ldd	r14, Y+1	; 0x01
    1c58:	fa 80       	ldd	r15, Y+2	; 0x02
    1c5a:	b6 01       	movw	r22, r12
    1c5c:	c7 01       	movw	r24, r14
    1c5e:	0e 94 66 00 	call	0xcc	; 0xcc <ld_clust>
    1c62:	2b 01       	movw	r4, r22
    1c64:	3c 01       	movw	r6, r24
    1c66:	d6 01       	movw	r26, r12
    1c68:	5a 96       	adiw	r26, 0x1a	; 26
    1c6a:	1c 92       	st	X, r1
    1c6c:	5a 97       	sbiw	r26, 0x1a	; 26
    1c6e:	5b 96       	adiw	r26, 0x1b	; 27
    1c70:	1c 92       	st	X, r1
    1c72:	5b 97       	sbiw	r26, 0x1b	; 27
    1c74:	54 96       	adiw	r26, 0x14	; 20
    1c76:	1c 92       	st	X, r1
    1c78:	54 97       	sbiw	r26, 0x14	; 20
    1c7a:	55 96       	adiw	r26, 0x15	; 21
    1c7c:	1c 92       	st	X, r1
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	f7 01       	movw	r30, r14
    1c82:	84 83       	std	Z+4, r24	; 0x04
    1c84:	41 14       	cp	r4, r1
    1c86:	51 04       	cpc	r5, r1
    1c88:	61 04       	cpc	r6, r1
    1c8a:	71 04       	cpc	r7, r1
    1c8c:	71 f1       	breq	.+92     	; 0x1cea <f_open+0x158>
    1c8e:	82 a5       	ldd	r24, Z+42	; 0x2a
    1c90:	93 a5       	ldd	r25, Z+43	; 0x2b
    1c92:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1c94:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1c96:	8d a3       	std	Y+37, r24	; 0x25
    1c98:	9e a3       	std	Y+38, r25	; 0x26
    1c9a:	af a3       	std	Y+39, r26	; 0x27
    1c9c:	b8 a7       	std	Y+40, r27	; 0x28
    1c9e:	b3 01       	movw	r22, r6
    1ca0:	a2 01       	movw	r20, r4
    1ca2:	c7 01       	movw	r24, r14
    1ca4:	ad de       	rcall	.-678    	; 0x1a00 <remove_chain>
    1ca6:	81 11       	cpse	r24, r1
    1ca8:	88 c0       	rjmp	.+272    	; 0x1dba <f_open+0x228>
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	9a 81       	ldd	r25, Y+2	; 0x02
    1cae:	b3 01       	movw	r22, r6
    1cb0:	a2 01       	movw	r20, r4
    1cb2:	41 50       	subi	r20, 0x01	; 1
    1cb4:	51 09       	sbc	r21, r1
    1cb6:	61 09       	sbc	r22, r1
    1cb8:	71 09       	sbc	r23, r1
    1cba:	fc 01       	movw	r30, r24
    1cbc:	42 87       	std	Z+10, r20	; 0x0a
    1cbe:	53 87       	std	Z+11, r21	; 0x0b
    1cc0:	64 87       	std	Z+12, r22	; 0x0c
    1cc2:	75 87       	std	Z+13, r23	; 0x0d
    1cc4:	4d a1       	ldd	r20, Y+37	; 0x25
    1cc6:	5e a1       	ldd	r21, Y+38	; 0x26
    1cc8:	6f a1       	ldd	r22, Y+39	; 0x27
    1cca:	78 a5       	ldd	r23, Y+40	; 0x28
    1ccc:	0e 94 26 01 	call	0x24c	; 0x24c <move_window>
    1cd0:	0a c0       	rjmp	.+20     	; 0x1ce6 <f_open+0x154>
    1cd2:	d6 01       	movw	r26, r12
    1cd4:	1b 96       	adiw	r26, 0x0b	; 11
    1cd6:	8c 91       	ld	r24, X
    1cd8:	84 fd       	sbrc	r24, 4
    1cda:	6c c0       	rjmp	.+216    	; 0x1db4 <f_open+0x222>
    1cdc:	f1 fe       	sbrs	r15, 1
    1cde:	05 c0       	rjmp	.+10     	; 0x1cea <f_open+0x158>
    1ce0:	80 fd       	sbrc	r24, 0
    1ce2:	6a c0       	rjmp	.+212    	; 0x1db8 <f_open+0x226>
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <f_open+0x158>
    1ce6:	81 11       	cpse	r24, r1
    1ce8:	68 c0       	rjmp	.+208    	; 0x1dba <f_open+0x228>
    1cea:	b3 fe       	sbrs	r11, 3
    1cec:	03 c0       	rjmp	.+6      	; 0x1cf4 <f_open+0x162>
    1cee:	bb 2d       	mov	r27, r11
    1cf0:	b0 62       	ori	r27, 0x20	; 32
    1cf2:	bb 2e       	mov	r11, r27
    1cf4:	e9 80       	ldd	r14, Y+1	; 0x01
    1cf6:	fa 80       	ldd	r15, Y+2	; 0x02
    1cf8:	f7 01       	movw	r30, r14
    1cfa:	82 a5       	ldd	r24, Z+42	; 0x2a
    1cfc:	93 a5       	ldd	r25, Z+43	; 0x2b
    1cfe:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1d00:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1d02:	f8 01       	movw	r30, r16
    1d04:	82 8f       	std	Z+26, r24	; 0x1a
    1d06:	93 8f       	std	Z+27, r25	; 0x1b
    1d08:	a4 8f       	std	Z+28, r26	; 0x1c
    1d0a:	b5 8f       	std	Z+29, r27	; 0x1d
    1d0c:	d7 8e       	std	Z+31, r13	; 0x1f
    1d0e:	c6 8e       	std	Z+30, r12	; 0x1e
    1d10:	b4 82       	std	Z+4, r11	; 0x04
    1d12:	15 82       	std	Z+5, r1	; 0x05
    1d14:	b6 01       	movw	r22, r12
    1d16:	c7 01       	movw	r24, r14
    1d18:	0e 94 66 00 	call	0xcc	; 0xcc <ld_clust>
    1d1c:	d8 01       	movw	r26, r16
    1d1e:	1e 96       	adiw	r26, 0x0e	; 14
    1d20:	6d 93       	st	X+, r22
    1d22:	7d 93       	st	X+, r23
    1d24:	8d 93       	st	X+, r24
    1d26:	9c 93       	st	X, r25
    1d28:	51 97       	sbiw	r26, 0x11	; 17
    1d2a:	f6 01       	movw	r30, r12
    1d2c:	87 8d       	ldd	r24, Z+31	; 0x1f
    1d2e:	46 8d       	ldd	r20, Z+30	; 0x1e
    1d30:	50 e0       	ldi	r21, 0x00	; 0
    1d32:	60 e0       	ldi	r22, 0x00	; 0
    1d34:	70 e0       	ldi	r23, 0x00	; 0
    1d36:	ba 01       	movw	r22, r20
    1d38:	55 27       	eor	r21, r21
    1d3a:	44 27       	eor	r20, r20
    1d3c:	78 2b       	or	r23, r24
    1d3e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1d40:	48 2b       	or	r20, r24
    1d42:	85 8d       	ldd	r24, Z+29	; 0x1d
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	98 2f       	mov	r25, r24
    1d48:	88 27       	eor	r24, r24
    1d4a:	a0 e0       	ldi	r26, 0x00	; 0
    1d4c:	b0 e0       	ldi	r27, 0x00	; 0
    1d4e:	48 2b       	or	r20, r24
    1d50:	59 2b       	or	r21, r25
    1d52:	6a 2b       	or	r22, r26
    1d54:	7b 2b       	or	r23, r27
    1d56:	d8 01       	movw	r26, r16
    1d58:	1a 96       	adiw	r26, 0x0a	; 10
    1d5a:	4d 93       	st	X+, r20
    1d5c:	5d 93       	st	X+, r21
    1d5e:	6d 93       	st	X+, r22
    1d60:	7c 93       	st	X, r23
    1d62:	1d 97       	sbiw	r26, 0x0d	; 13
    1d64:	f8 01       	movw	r30, r16
    1d66:	16 82       	std	Z+6, r1	; 0x06
    1d68:	17 82       	std	Z+7, r1	; 0x07
    1d6a:	10 86       	std	Z+8, r1	; 0x08
    1d6c:	11 86       	std	Z+9, r1	; 0x09
    1d6e:	56 96       	adiw	r26, 0x16	; 22
    1d70:	1d 92       	st	X+, r1
    1d72:	1d 92       	st	X+, r1
    1d74:	1d 92       	st	X+, r1
    1d76:	1c 92       	st	X, r1
    1d78:	59 97       	sbiw	r26, 0x19	; 25
    1d7a:	11 96       	adiw	r26, 0x01	; 1
    1d7c:	fc 92       	st	X, r15
    1d7e:	ee 92       	st	-X, r14
    1d80:	f7 01       	movw	r30, r14
    1d82:	86 81       	ldd	r24, Z+6	; 0x06
    1d84:	97 81       	ldd	r25, Z+7	; 0x07
    1d86:	13 96       	adiw	r26, 0x03	; 3
    1d88:	9c 93       	st	X, r25
    1d8a:	8e 93       	st	-X, r24
    1d8c:	12 97       	sbiw	r26, 0x02	; 2
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	14 c0       	rjmp	.+40     	; 0x1dba <f_open+0x228>
    1d92:	89 e0       	ldi	r24, 0x09	; 9
    1d94:	12 c0       	rjmp	.+36     	; 0x1dba <f_open+0x228>
    1d96:	8f 2d       	mov	r24, r15
    1d98:	8c 71       	andi	r24, 0x1C	; 28
    1d9a:	09 f0       	breq	.+2      	; 0x1d9e <f_open+0x20c>
    1d9c:	47 cf       	rjmp	.-370    	; 0x1c2c <f_open+0x9a>
    1d9e:	99 cf       	rjmp	.-206    	; 0x1cd2 <f_open+0x140>
    1da0:	86 e0       	ldi	r24, 0x06	; 6
    1da2:	9f 2d       	mov	r25, r15
    1da4:	9c 71       	andi	r25, 0x1C	; 28
    1da6:	09 f0       	breq	.+2      	; 0x1daa <f_open+0x218>
    1da8:	31 cf       	rjmp	.-414    	; 0x1c0c <f_open+0x7a>
    1daa:	9d cf       	rjmp	.-198    	; 0x1ce6 <f_open+0x154>
    1dac:	87 e0       	ldi	r24, 0x07	; 7
    1dae:	05 c0       	rjmp	.+10     	; 0x1dba <f_open+0x228>
    1db0:	88 e0       	ldi	r24, 0x08	; 8
    1db2:	03 c0       	rjmp	.+6      	; 0x1dba <f_open+0x228>
    1db4:	84 e0       	ldi	r24, 0x04	; 4
    1db6:	01 c0       	rjmp	.+2      	; 0x1dba <f_open+0x228>
    1db8:	87 e0       	ldi	r24, 0x07	; 7
    1dba:	a8 96       	adiw	r28, 0x28	; 40
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	f8 94       	cli
    1dc0:	de bf       	out	0x3e, r29	; 62
    1dc2:	0f be       	out	0x3f, r0	; 63
    1dc4:	cd bf       	out	0x3d, r28	; 61
    1dc6:	df 91       	pop	r29
    1dc8:	cf 91       	pop	r28
    1dca:	1f 91       	pop	r17
    1dcc:	0f 91       	pop	r16
    1dce:	ff 90       	pop	r15
    1dd0:	ef 90       	pop	r14
    1dd2:	df 90       	pop	r13
    1dd4:	cf 90       	pop	r12
    1dd6:	bf 90       	pop	r11
    1dd8:	7f 90       	pop	r7
    1dda:	6f 90       	pop	r6
    1ddc:	5f 90       	pop	r5
    1dde:	4f 90       	pop	r4
    1de0:	08 95       	ret

00001de2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
    1de2:	2f 92       	push	r2
    1de4:	3f 92       	push	r3
    1de6:	4f 92       	push	r4
    1de8:	5f 92       	push	r5
    1dea:	6f 92       	push	r6
    1dec:	7f 92       	push	r7
    1dee:	8f 92       	push	r8
    1df0:	9f 92       	push	r9
    1df2:	af 92       	push	r10
    1df4:	bf 92       	push	r11
    1df6:	cf 92       	push	r12
    1df8:	df 92       	push	r13
    1dfa:	ef 92       	push	r14
    1dfc:	ff 92       	push	r15
    1dfe:	0f 93       	push	r16
    1e00:	1f 93       	push	r17
    1e02:	cf 93       	push	r28
    1e04:	df 93       	push	r29
    1e06:	00 d0       	rcall	.+0      	; 0x1e08 <f_write+0x26>
    1e08:	00 d0       	rcall	.+0      	; 0x1e0a <f_write+0x28>
    1e0a:	1f 92       	push	r1
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62
    1e10:	9d 83       	std	Y+5, r25	; 0x05
    1e12:	8c 83       	std	Y+4, r24	; 0x04
    1e14:	5b 01       	movw	r10, r22
    1e16:	7a 01       	movw	r14, r20
    1e18:	69 01       	movw	r12, r18
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
    1e1a:	d9 01       	movw	r26, r18
    1e1c:	1d 92       	st	X+, r1
    1e1e:	1c 92       	st	X, r1

	res = validate(fp);						/* Check validity */
    1e20:	0e 94 c7 01 	call	0x38e	; 0x38e <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    1e24:	81 11       	cpse	r24, r1
    1e26:	a8 c1       	rjmp	.+848    	; 0x2178 <f_write+0x396>
	if (fp->err)							/* Check error */
    1e28:	ec 81       	ldd	r30, Y+4	; 0x04
    1e2a:	fd 81       	ldd	r31, Y+5	; 0x05
    1e2c:	85 81       	ldd	r24, Z+5	; 0x05
    1e2e:	81 11       	cpse	r24, r1
    1e30:	a3 c1       	rjmp	.+838    	; 0x2178 <f_write+0x396>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    1e32:	84 81       	ldd	r24, Z+4	; 0x04
    1e34:	81 ff       	sbrs	r24, 1
    1e36:	9f c1       	rjmp	.+830    	; 0x2176 <f_write+0x394>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
    1e38:	86 81       	ldd	r24, Z+6	; 0x06
    1e3a:	97 81       	ldd	r25, Z+7	; 0x07
    1e3c:	a0 85       	ldd	r26, Z+8	; 0x08
    1e3e:	b1 85       	ldd	r27, Z+9	; 0x09
    1e40:	ac 01       	movw	r20, r24
    1e42:	bd 01       	movw	r22, r26
    1e44:	4e 0d       	add	r20, r14
    1e46:	5f 1d       	adc	r21, r15
    1e48:	61 1d       	adc	r22, r1
    1e4a:	71 1d       	adc	r23, r1
    1e4c:	48 17       	cp	r20, r24
    1e4e:	59 07       	cpc	r21, r25
    1e50:	6a 07       	cpc	r22, r26
    1e52:	7b 07       	cpc	r23, r27
    1e54:	08 f4       	brcc	.+2      	; 0x1e58 <f_write+0x76>
    1e56:	72 c1       	rjmp	.+740    	; 0x213c <f_write+0x35a>

	for ( ;  btw;							/* Repeat until all data written */
    1e58:	e1 14       	cp	r14, r1
    1e5a:	f1 04       	cpc	r15, r1
    1e5c:	09 f4       	brne	.+2      	; 0x1e60 <f_write+0x7e>
    1e5e:	6e c1       	rjmp	.+732    	; 0x213c <f_write+0x35a>
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1))
    1e60:	b0 96       	adiw	r30, 0x20	; 32
    1e62:	fb 83       	std	Y+3, r31	; 0x03
    1e64:	ea 83       	std	Y+2, r30	; 0x02
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    1e66:	ec 81       	ldd	r30, Y+4	; 0x04
    1e68:	fd 81       	ldd	r31, Y+5	; 0x05
    1e6a:	86 81       	ldd	r24, Z+6	; 0x06
    1e6c:	97 81       	ldd	r25, Z+7	; 0x07
    1e6e:	a0 85       	ldd	r26, Z+8	; 0x08
    1e70:	b1 85       	ldd	r27, Z+9	; 0x09
    1e72:	ac 01       	movw	r20, r24
    1e74:	bd 01       	movw	r22, r26
    1e76:	51 70       	andi	r21, 0x01	; 1
    1e78:	66 27       	eor	r22, r22
    1e7a:	77 27       	eor	r23, r23
    1e7c:	45 2b       	or	r20, r21
    1e7e:	46 2b       	or	r20, r22
    1e80:	47 2b       	or	r20, r23
    1e82:	09 f0       	breq	.+2      	; 0x1e86 <f_write+0xa4>
    1e84:	1d c1       	rjmp	.+570    	; 0x20c0 <f_write+0x2de>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    1e86:	80 80       	ld	r8, Z
    1e88:	91 80       	ldd	r9, Z+1	; 0x01
    1e8a:	f4 01       	movw	r30, r8
    1e8c:	22 81       	ldd	r18, Z+2	; 0x02
    1e8e:	21 50       	subi	r18, 0x01	; 1
    1e90:	ac 01       	movw	r20, r24
    1e92:	bd 01       	movw	r22, r26
    1e94:	03 2e       	mov	r0, r19
    1e96:	39 e0       	ldi	r19, 0x09	; 9
    1e98:	76 95       	lsr	r23
    1e9a:	67 95       	ror	r22
    1e9c:	57 95       	ror	r21
    1e9e:	47 95       	ror	r20
    1ea0:	3a 95       	dec	r19
    1ea2:	d1 f7       	brne	.-12     	; 0x1e98 <f_write+0xb6>
    1ea4:	30 2d       	mov	r19, r0
    1ea6:	24 23       	and	r18, r20
    1ea8:	29 83       	std	Y+1, r18	; 0x01
			if (!csect) {					/* On the cluster boundary? */
    1eaa:	21 11       	cpse	r18, r1
    1eac:	49 c0       	rjmp	.+146    	; 0x1f40 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
    1eae:	89 2b       	or	r24, r25
    1eb0:	8a 2b       	or	r24, r26
    1eb2:	8b 2b       	or	r24, r27
    1eb4:	c9 f4       	brne	.+50     	; 0x1ee8 <f_write+0x106>
					clst = fp->sclust;		/* Follow from the origin */
    1eb6:	ac 81       	ldd	r26, Y+4	; 0x04
    1eb8:	bd 81       	ldd	r27, Y+5	; 0x05
    1eba:	1e 96       	adiw	r26, 0x0e	; 14
    1ebc:	6d 91       	ld	r22, X+
    1ebe:	7d 91       	ld	r23, X+
    1ec0:	8d 91       	ld	r24, X+
    1ec2:	9c 91       	ld	r25, X
    1ec4:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 0)			/* When no cluster is allocated, */
    1ec6:	61 15       	cp	r22, r1
    1ec8:	71 05       	cpc	r23, r1
    1eca:	81 05       	cpc	r24, r1
    1ecc:	91 05       	cpc	r25, r1
    1ece:	e1 f4       	brne	.+56     	; 0x1f08 <f_write+0x126>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    1ed0:	40 e0       	ldi	r20, 0x00	; 0
    1ed2:	50 e0       	ldi	r21, 0x00	; 0
    1ed4:	ba 01       	movw	r22, r20
    1ed6:	c4 01       	movw	r24, r8
    1ed8:	68 d9       	rcall	.-3376   	; 0x11aa <create_chain>
    1eda:	ec 81       	ldd	r30, Y+4	; 0x04
    1edc:	fd 81       	ldd	r31, Y+5	; 0x05
    1ede:	66 87       	std	Z+14, r22	; 0x0e
    1ee0:	77 87       	std	Z+15, r23	; 0x0f
    1ee2:	80 8b       	std	Z+16, r24	; 0x10
    1ee4:	91 8b       	std	Z+17, r25	; 0x11
    1ee6:	0a c0       	rjmp	.+20     	; 0x1efc <f_write+0x11a>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    1ee8:	ac 81       	ldd	r26, Y+4	; 0x04
    1eea:	bd 81       	ldd	r27, Y+5	; 0x05
    1eec:	52 96       	adiw	r26, 0x12	; 18
    1eee:	4d 91       	ld	r20, X+
    1ef0:	5d 91       	ld	r21, X+
    1ef2:	6d 91       	ld	r22, X+
    1ef4:	7c 91       	ld	r23, X
    1ef6:	55 97       	sbiw	r26, 0x15	; 21
    1ef8:	c4 01       	movw	r24, r8
    1efa:	57 d9       	rcall	.-3410   	; 0x11aa <create_chain>
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    1efc:	61 15       	cp	r22, r1
    1efe:	71 05       	cpc	r23, r1
    1f00:	81 05       	cpc	r24, r1
    1f02:	91 05       	cpc	r25, r1
    1f04:	09 f4       	brne	.+2      	; 0x1f08 <f_write+0x126>
    1f06:	1a c1       	rjmp	.+564    	; 0x213c <f_write+0x35a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    1f08:	61 30       	cpi	r22, 0x01	; 1
    1f0a:	71 05       	cpc	r23, r1
    1f0c:	81 05       	cpc	r24, r1
    1f0e:	91 05       	cpc	r25, r1
    1f10:	29 f4       	brne	.+10     	; 0x1f1c <f_write+0x13a>
    1f12:	82 e0       	ldi	r24, 0x02	; 2
    1f14:	ec 81       	ldd	r30, Y+4	; 0x04
    1f16:	fd 81       	ldd	r31, Y+5	; 0x05
    1f18:	85 83       	std	Z+5, r24	; 0x05
    1f1a:	2e c1       	rjmp	.+604    	; 0x2178 <f_write+0x396>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    1f1c:	6f 3f       	cpi	r22, 0xFF	; 255
    1f1e:	ff ef       	ldi	r31, 0xFF	; 255
    1f20:	7f 07       	cpc	r23, r31
    1f22:	8f 07       	cpc	r24, r31
    1f24:	9f 07       	cpc	r25, r31
    1f26:	31 f4       	brne	.+12     	; 0x1f34 <f_write+0x152>
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	ac 81       	ldd	r26, Y+4	; 0x04
    1f2c:	bd 81       	ldd	r27, Y+5	; 0x05
    1f2e:	15 96       	adiw	r26, 0x05	; 5
    1f30:	8c 93       	st	X, r24
    1f32:	22 c1       	rjmp	.+580    	; 0x2178 <f_write+0x396>
				fp->clust = clst;			/* Update current cluster */
    1f34:	ec 81       	ldd	r30, Y+4	; 0x04
    1f36:	fd 81       	ldd	r31, Y+5	; 0x05
    1f38:	62 8b       	std	Z+18, r22	; 0x12
    1f3a:	73 8b       	std	Z+19, r23	; 0x13
    1f3c:	84 8b       	std	Z+20, r24	; 0x14
    1f3e:	95 8b       	std	Z+21, r25	; 0x15
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
    1f40:	ac 81       	ldd	r26, Y+4	; 0x04
    1f42:	bd 81       	ldd	r27, Y+5	; 0x05
    1f44:	14 96       	adiw	r26, 0x04	; 4
    1f46:	8c 91       	ld	r24, X
    1f48:	14 97       	sbiw	r26, 0x04	; 4
    1f4a:	86 ff       	sbrs	r24, 6
    1f4c:	1d c0       	rjmp	.+58     	; 0x1f88 <f_write+0x1a6>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1))
    1f4e:	56 96       	adiw	r26, 0x16	; 22
    1f50:	2d 91       	ld	r18, X+
    1f52:	3d 91       	ld	r19, X+
    1f54:	4d 91       	ld	r20, X+
    1f56:	5c 91       	ld	r21, X
    1f58:	59 97       	sbiw	r26, 0x19	; 25
    1f5a:	ed 91       	ld	r30, X+
    1f5c:	fc 91       	ld	r31, X
    1f5e:	01 e0       	ldi	r16, 0x01	; 1
    1f60:	10 e0       	ldi	r17, 0x00	; 0
    1f62:	6a 81       	ldd	r22, Y+2	; 0x02
    1f64:	7b 81       	ldd	r23, Y+3	; 0x03
    1f66:	81 81       	ldd	r24, Z+1	; 0x01
    1f68:	94 d5       	rcall	.+2856   	; 0x2a92 <disk_write>
    1f6a:	88 23       	and	r24, r24
    1f6c:	29 f0       	breq	.+10     	; 0x1f78 <f_write+0x196>
					ABORT(fp->fs, FR_DISK_ERR);
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	ec 81       	ldd	r30, Y+4	; 0x04
    1f72:	fd 81       	ldd	r31, Y+5	; 0x05
    1f74:	85 83       	std	Z+5, r24	; 0x05
    1f76:	00 c1       	rjmp	.+512    	; 0x2178 <f_write+0x396>
				fp->flag &= ~FA__DIRTY;
    1f78:	ac 81       	ldd	r26, Y+4	; 0x04
    1f7a:	bd 81       	ldd	r27, Y+5	; 0x05
    1f7c:	14 96       	adiw	r26, 0x04	; 4
    1f7e:	8c 91       	ld	r24, X
    1f80:	14 97       	sbiw	r26, 0x04	; 4
    1f82:	8f 7b       	andi	r24, 0xBF	; 191
    1f84:	14 96       	adiw	r26, 0x04	; 4
    1f86:	8c 93       	st	X, r24
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    1f88:	ec 81       	ldd	r30, Y+4	; 0x04
    1f8a:	fd 81       	ldd	r31, Y+5	; 0x05
    1f8c:	20 80       	ld	r2, Z
    1f8e:	31 80       	ldd	r3, Z+1	; 0x01
    1f90:	42 89       	ldd	r20, Z+18	; 0x12
    1f92:	53 89       	ldd	r21, Z+19	; 0x13
    1f94:	64 89       	ldd	r22, Z+20	; 0x14
    1f96:	75 89       	ldd	r23, Z+21	; 0x15
    1f98:	c1 01       	movw	r24, r2
    1f9a:	0e 94 d1 05 	call	0xba2	; 0xba2 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    1f9e:	61 15       	cp	r22, r1
    1fa0:	71 05       	cpc	r23, r1
    1fa2:	81 05       	cpc	r24, r1
    1fa4:	91 05       	cpc	r25, r1
    1fa6:	31 f4       	brne	.+12     	; 0x1fb4 <f_write+0x1d2>
    1fa8:	82 e0       	ldi	r24, 0x02	; 2
    1faa:	ac 81       	ldd	r26, Y+4	; 0x04
    1fac:	bd 81       	ldd	r27, Y+5	; 0x05
    1fae:	15 96       	adiw	r26, 0x05	; 5
    1fb0:	8c 93       	st	X, r24
    1fb2:	e2 c0       	rjmp	.+452    	; 0x2178 <f_write+0x396>
			sect += csect;
    1fb4:	2b 01       	movw	r4, r22
    1fb6:	3c 01       	movw	r6, r24
    1fb8:	b9 81       	ldd	r27, Y+1	; 0x01
    1fba:	4b 0e       	add	r4, r27
    1fbc:	51 1c       	adc	r5, r1
    1fbe:	61 1c       	adc	r6, r1
    1fc0:	71 1c       	adc	r7, r1
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    1fc2:	47 01       	movw	r8, r14
    1fc4:	89 2c       	mov	r8, r9
    1fc6:	99 24       	eor	r9, r9
    1fc8:	86 94       	lsr	r8
			if (cc) {						/* Write maximum contiguous sectors directly */
    1fca:	81 14       	cp	r8, r1
    1fcc:	91 04       	cpc	r9, r1
    1fce:	09 f4       	brne	.+2      	; 0x1fd2 <f_write+0x1f0>
    1fd0:	46 c0       	rjmp	.+140    	; 0x205e <f_write+0x27c>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    1fd2:	f1 01       	movw	r30, r2
    1fd4:	42 81       	ldd	r20, Z+2	; 0x02
    1fd6:	24 2f       	mov	r18, r20
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	c4 01       	movw	r24, r8
    1fdc:	8b 0f       	add	r24, r27
    1fde:	91 1d       	adc	r25, r1
    1fe0:	28 17       	cp	r18, r24
    1fe2:	39 07       	cpc	r19, r25
    1fe4:	18 f4       	brcc	.+6      	; 0x1fec <f_write+0x20a>
					cc = fp->fs->csize - csect;
    1fe6:	49 01       	movw	r8, r18
    1fe8:	8b 1a       	sub	r8, r27
    1fea:	91 08       	sbc	r9, r1
				if (disk_write(fp->fs->drv, wbuff, sect, cc))
    1fec:	84 01       	movw	r16, r8
    1fee:	a3 01       	movw	r20, r6
    1ff0:	92 01       	movw	r18, r4
    1ff2:	b5 01       	movw	r22, r10
    1ff4:	d1 01       	movw	r26, r2
    1ff6:	11 96       	adiw	r26, 0x01	; 1
    1ff8:	8c 91       	ld	r24, X
    1ffa:	4b d5       	rcall	.+2710   	; 0x2a92 <disk_write>
    1ffc:	88 23       	and	r24, r24
    1ffe:	29 f0       	breq	.+10     	; 0x200a <f_write+0x228>
					ABORT(fp->fs, FR_DISK_ERR);
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	ec 81       	ldd	r30, Y+4	; 0x04
    2004:	fd 81       	ldd	r31, Y+5	; 0x05
    2006:	85 83       	std	Z+5, r24	; 0x05
    2008:	b7 c0       	rjmp	.+366    	; 0x2178 <f_write+0x396>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
    200a:	ec 81       	ldd	r30, Y+4	; 0x04
    200c:	fd 81       	ldd	r31, Y+5	; 0x05
    200e:	86 89       	ldd	r24, Z+22	; 0x16
    2010:	97 89       	ldd	r25, Z+23	; 0x17
    2012:	a0 8d       	ldd	r26, Z+24	; 0x18
    2014:	b1 8d       	ldd	r27, Z+25	; 0x19
    2016:	84 19       	sub	r24, r4
    2018:	95 09       	sbc	r25, r5
    201a:	a6 09       	sbc	r26, r6
    201c:	b7 09       	sbc	r27, r7
    201e:	a4 01       	movw	r20, r8
    2020:	60 e0       	ldi	r22, 0x00	; 0
    2022:	70 e0       	ldi	r23, 0x00	; 0
    2024:	84 17       	cp	r24, r20
    2026:	95 07       	cpc	r25, r21
    2028:	a6 07       	cpc	r26, r22
    202a:	b7 07       	cpc	r27, r23
    202c:	a0 f4       	brcc	.+40     	; 0x2056 <f_write+0x274>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
    202e:	98 2f       	mov	r25, r24
    2030:	88 27       	eor	r24, r24
    2032:	99 0f       	add	r25, r25
    2034:	b5 01       	movw	r22, r10
    2036:	68 0f       	add	r22, r24
    2038:	79 1f       	adc	r23, r25
    203a:	40 e0       	ldi	r20, 0x00	; 0
    203c:	52 e0       	ldi	r21, 0x02	; 2
    203e:	8a 81       	ldd	r24, Y+2	; 0x02
    2040:	9b 81       	ldd	r25, Y+3	; 0x03
    2042:	0e 94 58 00 	call	0xb0	; 0xb0 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
    2046:	ac 81       	ldd	r26, Y+4	; 0x04
    2048:	bd 81       	ldd	r27, Y+5	; 0x05
    204a:	14 96       	adiw	r26, 0x04	; 4
    204c:	8c 91       	ld	r24, X
    204e:	14 97       	sbiw	r26, 0x04	; 4
    2050:	8f 7b       	andi	r24, 0xBF	; 191
    2052:	14 96       	adiw	r26, 0x04	; 4
    2054:	8c 93       	st	X, r24
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    2056:	98 2c       	mov	r9, r8
    2058:	88 24       	eor	r8, r8
    205a:	99 0c       	add	r9, r9
				continue;
    205c:	53 c0       	rjmp	.+166    	; 0x2104 <f_write+0x322>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
    205e:	ec 81       	ldd	r30, Y+4	; 0x04
    2060:	fd 81       	ldd	r31, Y+5	; 0x05
    2062:	86 89       	ldd	r24, Z+22	; 0x16
    2064:	97 89       	ldd	r25, Z+23	; 0x17
    2066:	a0 8d       	ldd	r26, Z+24	; 0x18
    2068:	b1 8d       	ldd	r27, Z+25	; 0x19
    206a:	84 15       	cp	r24, r4
    206c:	95 05       	cpc	r25, r5
    206e:	a6 05       	cpc	r26, r6
    2070:	b7 05       	cpc	r27, r7
    2072:	f1 f0       	breq	.+60     	; 0x20b0 <f_write+0x2ce>
				if (fp->fptr < fp->fsize &&
    2074:	46 81       	ldd	r20, Z+6	; 0x06
    2076:	57 81       	ldd	r21, Z+7	; 0x07
    2078:	60 85       	ldd	r22, Z+8	; 0x08
    207a:	71 85       	ldd	r23, Z+9	; 0x09
    207c:	82 85       	ldd	r24, Z+10	; 0x0a
    207e:	93 85       	ldd	r25, Z+11	; 0x0b
    2080:	a4 85       	ldd	r26, Z+12	; 0x0c
    2082:	b5 85       	ldd	r27, Z+13	; 0x0d
    2084:	48 17       	cp	r20, r24
    2086:	59 07       	cpc	r21, r25
    2088:	6a 07       	cpc	r22, r26
    208a:	7b 07       	cpc	r23, r27
    208c:	88 f4       	brcc	.+34     	; 0x20b0 <f_write+0x2ce>
					disk_read(fp->fs->drv, fp->buf, sect, 1))
    208e:	01 e0       	ldi	r16, 0x01	; 1
    2090:	10 e0       	ldi	r17, 0x00	; 0
    2092:	a3 01       	movw	r20, r6
    2094:	92 01       	movw	r18, r4
    2096:	6a 81       	ldd	r22, Y+2	; 0x02
    2098:	7b 81       	ldd	r23, Y+3	; 0x03
    209a:	d1 01       	movw	r26, r2
    209c:	11 96       	adiw	r26, 0x01	; 1
    209e:	8c 91       	ld	r24, X
    20a0:	aa d4       	rcall	.+2388   	; 0x29f6 <disk_read>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
				if (fp->fptr < fp->fsize &&
    20a2:	88 23       	and	r24, r24
    20a4:	29 f0       	breq	.+10     	; 0x20b0 <f_write+0x2ce>
					disk_read(fp->fs->drv, fp->buf, sect, 1))
						ABORT(fp->fs, FR_DISK_ERR);
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	ec 81       	ldd	r30, Y+4	; 0x04
    20aa:	fd 81       	ldd	r31, Y+5	; 0x05
    20ac:	85 83       	std	Z+5, r24	; 0x05
    20ae:	64 c0       	rjmp	.+200    	; 0x2178 <f_write+0x396>
			}
#endif
			fp->dsect = sect;
    20b0:	ac 81       	ldd	r26, Y+4	; 0x04
    20b2:	bd 81       	ldd	r27, Y+5	; 0x05
    20b4:	56 96       	adiw	r26, 0x16	; 22
    20b6:	4d 92       	st	X+, r4
    20b8:	5d 92       	st	X+, r5
    20ba:	6d 92       	st	X+, r6
    20bc:	7c 92       	st	X, r7
    20be:	59 97       	sbiw	r26, 0x19	; 25
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    20c0:	ec 81       	ldd	r30, Y+4	; 0x04
    20c2:	fd 81       	ldd	r31, Y+5	; 0x05
    20c4:	86 81       	ldd	r24, Z+6	; 0x06
    20c6:	97 81       	ldd	r25, Z+7	; 0x07
    20c8:	a0 85       	ldd	r26, Z+8	; 0x08
    20ca:	b1 85       	ldd	r27, Z+9	; 0x09
    20cc:	9c 01       	movw	r18, r24
    20ce:	31 70       	andi	r19, 0x01	; 1
    20d0:	40 e0       	ldi	r20, 0x00	; 0
    20d2:	52 e0       	ldi	r21, 0x02	; 2
    20d4:	42 1b       	sub	r20, r18
    20d6:	53 0b       	sbc	r21, r19
    20d8:	47 01       	movw	r8, r14
    20da:	4e 15       	cp	r20, r14
    20dc:	5f 05       	cpc	r21, r15
    20de:	08 f4       	brcc	.+2      	; 0x20e2 <f_write+0x300>
    20e0:	4a 01       	movw	r8, r20
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    20e2:	91 70       	andi	r25, 0x01	; 1
    20e4:	aa 27       	eor	r26, r26
    20e6:	bb 27       	eor	r27, r27
    20e8:	80 96       	adiw	r24, 0x20	; 32
    20ea:	a4 01       	movw	r20, r8
    20ec:	b5 01       	movw	r22, r10
    20ee:	ac 81       	ldd	r26, Y+4	; 0x04
    20f0:	bd 81       	ldd	r27, Y+5	; 0x05
    20f2:	8a 0f       	add	r24, r26
    20f4:	9b 1f       	adc	r25, r27
    20f6:	0e 94 58 00 	call	0xb0	; 0xb0 <mem_cpy>
		fp->flag |= FA__DIRTY;
    20fa:	ec 81       	ldd	r30, Y+4	; 0x04
    20fc:	fd 81       	ldd	r31, Y+5	; 0x05
    20fe:	84 81       	ldd	r24, Z+4	; 0x04
    2100:	80 64       	ori	r24, 0x40	; 64
    2102:	84 83       	std	Z+4, r24	; 0x04
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    2104:	a8 0c       	add	r10, r8
    2106:	b9 1c       	adc	r11, r9
    2108:	ec 81       	ldd	r30, Y+4	; 0x04
    210a:	fd 81       	ldd	r31, Y+5	; 0x05
    210c:	86 81       	ldd	r24, Z+6	; 0x06
    210e:	97 81       	ldd	r25, Z+7	; 0x07
    2110:	a0 85       	ldd	r26, Z+8	; 0x08
    2112:	b1 85       	ldd	r27, Z+9	; 0x09
    2114:	88 0d       	add	r24, r8
    2116:	99 1d       	adc	r25, r9
    2118:	a1 1d       	adc	r26, r1
    211a:	b1 1d       	adc	r27, r1
    211c:	86 83       	std	Z+6, r24	; 0x06
    211e:	97 83       	std	Z+7, r25	; 0x07
    2120:	a0 87       	std	Z+8, r26	; 0x08
    2122:	b1 87       	std	Z+9, r27	; 0x09
    2124:	d6 01       	movw	r26, r12
    2126:	8d 91       	ld	r24, X+
    2128:	9c 91       	ld	r25, X
    212a:	11 97       	sbiw	r26, 0x01	; 1
    212c:	88 0d       	add	r24, r8
    212e:	99 1d       	adc	r25, r9
    2130:	8d 93       	st	X+, r24
    2132:	9c 93       	st	X, r25
    2134:	e8 18       	sub	r14, r8
    2136:	f9 08       	sbc	r15, r9
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
    2138:	09 f0       	breq	.+2      	; 0x213c <f_write+0x35a>
    213a:	95 ce       	rjmp	.-726    	; 0x1e66 <f_write+0x84>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    213c:	ec 81       	ldd	r30, Y+4	; 0x04
    213e:	fd 81       	ldd	r31, Y+5	; 0x05
    2140:	86 81       	ldd	r24, Z+6	; 0x06
    2142:	97 81       	ldd	r25, Z+7	; 0x07
    2144:	a0 85       	ldd	r26, Z+8	; 0x08
    2146:	b1 85       	ldd	r27, Z+9	; 0x09
    2148:	42 85       	ldd	r20, Z+10	; 0x0a
    214a:	53 85       	ldd	r21, Z+11	; 0x0b
    214c:	64 85       	ldd	r22, Z+12	; 0x0c
    214e:	75 85       	ldd	r23, Z+13	; 0x0d
    2150:	48 17       	cp	r20, r24
    2152:	59 07       	cpc	r21, r25
    2154:	6a 07       	cpc	r22, r26
    2156:	7b 07       	cpc	r23, r27
    2158:	20 f4       	brcc	.+8      	; 0x2162 <f_write+0x380>
    215a:	82 87       	std	Z+10, r24	; 0x0a
    215c:	93 87       	std	Z+11, r25	; 0x0b
    215e:	a4 87       	std	Z+12, r26	; 0x0c
    2160:	b5 87       	std	Z+13, r27	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    2162:	ac 81       	ldd	r26, Y+4	; 0x04
    2164:	bd 81       	ldd	r27, Y+5	; 0x05
    2166:	14 96       	adiw	r26, 0x04	; 4
    2168:	8c 91       	ld	r24, X
    216a:	14 97       	sbiw	r26, 0x04	; 4
    216c:	80 62       	ori	r24, 0x20	; 32
    216e:	14 96       	adiw	r26, 0x04	; 4
    2170:	8c 93       	st	X, r24

	LEAVE_FF(fp->fs, FR_OK);
    2172:	80 e0       	ldi	r24, 0x00	; 0
    2174:	01 c0       	rjmp	.+2      	; 0x2178 <f_write+0x396>
	res = validate(fp);						/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->err)							/* Check error */
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    2176:	87 e0       	ldi	r24, 0x07	; 7

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    2178:	0f 90       	pop	r0
    217a:	0f 90       	pop	r0
    217c:	0f 90       	pop	r0
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	df 91       	pop	r29
    2184:	cf 91       	pop	r28
    2186:	1f 91       	pop	r17
    2188:	0f 91       	pop	r16
    218a:	ff 90       	pop	r15
    218c:	ef 90       	pop	r14
    218e:	df 90       	pop	r13
    2190:	cf 90       	pop	r12
    2192:	bf 90       	pop	r11
    2194:	af 90       	pop	r10
    2196:	9f 90       	pop	r9
    2198:	8f 90       	pop	r8
    219a:	7f 90       	pop	r7
    219c:	6f 90       	pop	r6
    219e:	5f 90       	pop	r5
    21a0:	4f 90       	pop	r4
    21a2:	3f 90       	pop	r3
    21a4:	2f 90       	pop	r2
    21a6:	08 95       	ret

000021a8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    21a8:	0f 93       	push	r16
    21aa:	1f 93       	push	r17
    21ac:	cf 93       	push	r28
    21ae:	df 93       	push	r29
    21b0:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    21b2:	0e 94 c7 01 	call	0x38e	; 0x38e <validate>
	if (res == FR_OK) {
    21b6:	81 11       	cpse	r24, r1
    21b8:	51 c0       	rjmp	.+162    	; 0x225c <f_sync+0xb4>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    21ba:	8c 81       	ldd	r24, Y+4	; 0x04
    21bc:	85 ff       	sbrs	r24, 5
    21be:	4b c0       	rjmp	.+150    	; 0x2256 <f_sync+0xae>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
    21c0:	86 ff       	sbrs	r24, 6
    21c2:	12 c0       	rjmp	.+36     	; 0x21e8 <f_sync+0x40>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1))
    21c4:	2e 89       	ldd	r18, Y+22	; 0x16
    21c6:	3f 89       	ldd	r19, Y+23	; 0x17
    21c8:	48 8d       	ldd	r20, Y+24	; 0x18
    21ca:	59 8d       	ldd	r21, Y+25	; 0x19
    21cc:	e8 81       	ld	r30, Y
    21ce:	f9 81       	ldd	r31, Y+1	; 0x01
    21d0:	01 e0       	ldi	r16, 0x01	; 1
    21d2:	10 e0       	ldi	r17, 0x00	; 0
    21d4:	be 01       	movw	r22, r28
    21d6:	60 5e       	subi	r22, 0xE0	; 224
    21d8:	7f 4f       	sbci	r23, 0xFF	; 255
    21da:	81 81       	ldd	r24, Z+1	; 0x01
    21dc:	5a d4       	rcall	.+2228   	; 0x2a92 <disk_write>
    21de:	81 11       	cpse	r24, r1
    21e0:	3c c0       	rjmp	.+120    	; 0x225a <f_sync+0xb2>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
    21e2:	8c 81       	ldd	r24, Y+4	; 0x04
    21e4:	8f 7b       	andi	r24, 0xBF	; 191
    21e6:	8c 83       	std	Y+4, r24	; 0x04
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    21e8:	4a 8d       	ldd	r20, Y+26	; 0x1a
    21ea:	5b 8d       	ldd	r21, Y+27	; 0x1b
    21ec:	6c 8d       	ldd	r22, Y+28	; 0x1c
    21ee:	7d 8d       	ldd	r23, Y+29	; 0x1d
    21f0:	88 81       	ld	r24, Y
    21f2:	99 81       	ldd	r25, Y+1	; 0x01
    21f4:	0e 94 26 01 	call	0x24c	; 0x24c <move_window>
			if (res == FR_OK) {
    21f8:	81 11       	cpse	r24, r1
    21fa:	30 c0       	rjmp	.+96     	; 0x225c <f_sync+0xb4>
				dir = fp->dir_ptr;
    21fc:	0e 8d       	ldd	r16, Y+30	; 0x1e
    21fe:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    2200:	f8 01       	movw	r30, r16
    2202:	83 85       	ldd	r24, Z+11	; 0x0b
    2204:	80 62       	ori	r24, 0x20	; 32
    2206:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    2208:	8a 85       	ldd	r24, Y+10	; 0x0a
    220a:	84 8f       	std	Z+28, r24	; 0x1c
    220c:	8b 85       	ldd	r24, Y+11	; 0x0b
    220e:	85 8f       	std	Z+29, r24	; 0x1d
    2210:	8c 85       	ldd	r24, Y+12	; 0x0c
    2212:	86 8f       	std	Z+30, r24	; 0x1e
    2214:	8d 85       	ldd	r24, Y+13	; 0x0d
    2216:	87 8f       	std	Z+31, r24	; 0x1f
				st_clust(dir, fp->sclust);					/* Update start cluster */
    2218:	4e 85       	ldd	r20, Y+14	; 0x0e
    221a:	5f 85       	ldd	r21, Y+15	; 0x0f
    221c:	68 89       	ldd	r22, Y+16	; 0x10
    221e:	79 89       	ldd	r23, Y+17	; 0x11
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir+DIR_FstClusLO, cl);
    2220:	42 8f       	std	Z+26, r20	; 0x1a
    2222:	53 8f       	std	Z+27, r21	; 0x1b
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
    2224:	ab 01       	movw	r20, r22
    2226:	66 27       	eor	r22, r22
    2228:	77 27       	eor	r23, r23
    222a:	44 8b       	std	Z+20, r20	; 0x14
    222c:	55 8b       	std	Z+21, r21	; 0x15
			if (res == FR_OK) {
				dir = fp->dir_ptr;
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
				st_clust(dir, fp->sclust);					/* Update start cluster */
				tm = get_fattime();							/* Update updated time */
    222e:	70 d1       	rcall	.+736    	; 0x2510 <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tm);
    2230:	f8 01       	movw	r30, r16
    2232:	66 8b       	std	Z+22, r22	; 0x16
    2234:	77 8b       	std	Z+23, r23	; 0x17
    2236:	80 8f       	std	Z+24, r24	; 0x18
    2238:	91 8f       	std	Z+25, r25	; 0x19
				ST_WORD(dir+DIR_LstAccDate, 0);
    223a:	12 8a       	std	Z+18, r1	; 0x12
    223c:	13 8a       	std	Z+19, r1	; 0x13
				fp->flag &= ~FA__WRITTEN;
    223e:	8c 81       	ldd	r24, Y+4	; 0x04
    2240:	8f 7d       	andi	r24, 0xDF	; 223
    2242:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    2244:	e8 81       	ld	r30, Y
    2246:	f9 81       	ldd	r31, Y+1	; 0x01
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	84 83       	std	Z+4, r24	; 0x04
				res = sync_fs(fp->fs);
    224c:	88 81       	ld	r24, Y
    224e:	99 81       	ldd	r25, Y+1	; 0x01
    2250:	0e 94 61 05 	call	0xac2	; 0xac2 <sync_fs>
    2254:	03 c0       	rjmp	.+6      	; 0x225c <f_sync+0xb4>
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    2256:	80 e0       	ldi	r24, 0x00	; 0
    2258:	01 c0       	rjmp	.+2      	; 0x225c <f_sync+0xb4>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1))
					LEAVE_FF(fp->fs, FR_DISK_ERR);
    225a:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    225c:	df 91       	pop	r29
    225e:	cf 91       	pop	r28
    2260:	1f 91       	pop	r17
    2262:	0f 91       	pop	r16
    2264:	08 95       	ret

00002266 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    2266:	cf 93       	push	r28
    2268:	df 93       	push	r29
    226a:	ec 01       	movw	r28, r24
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    226c:	9d df       	rcall	.-198    	; 0x21a8 <f_sync>
	if (res == FR_OK)
    226e:	81 11       	cpse	r24, r1
    2270:	07 c0       	rjmp	.+14     	; 0x2280 <f_close+0x1a>
#endif
	{
		res = validate(fp);				/* Lock volume */
    2272:	ce 01       	movw	r24, r28
    2274:	0e 94 c7 01 	call	0x38e	; 0x38e <validate>
		if (res == FR_OK) {
    2278:	81 11       	cpse	r24, r1
    227a:	02 c0       	rjmp	.+4      	; 0x2280 <f_close+0x1a>
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
				fp->fs = 0;				/* Invalidate file object */
    227c:	19 82       	std	Y+1, r1	; 0x01
    227e:	18 82       	st	Y, r1
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    2280:	df 91       	pop	r29
    2282:	cf 91       	pop	r28
    2284:	08 95       	ret

00002286 <output>:
{
	char c;
	while ((c = pgm_read_byte(s++)) != 0) {
		write(c, 1);
	}
}
    2286:	66 23       	and	r22, r22
    2288:	11 f0       	breq	.+4      	; 0x228e <output+0x8>
    228a:	d8 9a       	sbi	0x1b, 0	; 27
    228c:	01 c0       	rjmp	.+2      	; 0x2290 <output+0xa>
    228e:	d8 98       	cbi	0x1b, 0	; 27
    2290:	d9 98       	cbi	0x1b, 1	; 27
    2292:	82 bb       	out	0x12, r24	; 18
    2294:	8f ef       	ldi	r24, 0xFF	; 255
    2296:	81 bb       	out	0x11, r24	; 17
    2298:	da 9a       	sbi	0x1b, 2	; 27
    229a:	00 00       	nop
    229c:	00 00       	nop
    229e:	00 00       	nop
    22a0:	da 98       	cbi	0x1b, 2	; 27
    22a2:	08 95       	ret

000022a4 <write>:
    22a4:	d8 98       	cbi	0x1b, 0	; 27
    22a6:	d9 9a       	sbi	0x1b, 1	; 27
    22a8:	11 ba       	out	0x11, r1	; 17
    22aa:	90 b3       	in	r25, 0x10	; 16
    22ac:	da 9a       	sbi	0x1b, 2	; 27
    22ae:	00 00       	nop
    22b0:	00 00       	nop
    22b2:	00 00       	nop
    22b4:	11 ba       	out	0x11, r1	; 17
    22b6:	90 b3       	in	r25, 0x10	; 16
    22b8:	da 98       	cbi	0x1b, 2	; 27
    22ba:	99 23       	and	r25, r25
    22bc:	9c f3       	brlt	.-26     	; 0x22a4 <write>
    22be:	e3 cf       	rjmp	.-58     	; 0x2286 <output>
    22c0:	08 95       	ret

000022c2 <ini_lcd>:
    22c2:	d0 9a       	sbi	0x1a, 0	; 26
    22c4:	d1 9a       	sbi	0x1a, 1	; 26
    22c6:	d2 9a       	sbi	0x1a, 2	; 26
    22c8:	80 e1       	ldi	r24, 0x10	; 16
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	0e 94 48 00 	call	0x90	; 0x90 <wait_avr>
    22d0:	60 e0       	ldi	r22, 0x00	; 0
    22d2:	80 e3       	ldi	r24, 0x30	; 48
    22d4:	d8 df       	rcall	.-80     	; 0x2286 <output>
    22d6:	85 e0       	ldi	r24, 0x05	; 5
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	0e 94 48 00 	call	0x90	; 0x90 <wait_avr>
    22de:	60 e0       	ldi	r22, 0x00	; 0
    22e0:	80 e3       	ldi	r24, 0x30	; 48
    22e2:	d1 df       	rcall	.-94     	; 0x2286 <output>
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	0e 94 48 00 	call	0x90	; 0x90 <wait_avr>
    22ec:	60 e0       	ldi	r22, 0x00	; 0
    22ee:	8c e3       	ldi	r24, 0x3C	; 60
    22f0:	d9 df       	rcall	.-78     	; 0x22a4 <write>
    22f2:	60 e0       	ldi	r22, 0x00	; 0
    22f4:	8c e0       	ldi	r24, 0x0C	; 12
    22f6:	d6 df       	rcall	.-84     	; 0x22a4 <write>
    22f8:	60 e0       	ldi	r22, 0x00	; 0
    22fa:	86 e0       	ldi	r24, 0x06	; 6
    22fc:	d3 df       	rcall	.-90     	; 0x22a4 <write>
    22fe:	60 e0       	ldi	r22, 0x00	; 0
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	d0 cf       	rjmp	.-96     	; 0x22a4 <write>
    2304:	08 95       	ret

00002306 <clr_lcd>:
    2306:	60 e0       	ldi	r22, 0x00	; 0
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	cc cf       	rjmp	.-104    	; 0x22a4 <write>
    230c:	08 95       	ret

0000230e <put_str_lcd>:

void
put_str_lcd(const char *s)
{
    230e:	cf 93       	push	r28
    2310:	df 93       	push	r29
	char c;
	while ((c = *(s++)) != 0) {
    2312:	ec 01       	movw	r28, r24
    2314:	21 96       	adiw	r28, 0x01	; 1
    2316:	fc 01       	movw	r30, r24
    2318:	80 81       	ld	r24, Z
    231a:	88 23       	and	r24, r24
    231c:	29 f0       	breq	.+10     	; 0x2328 <put_str_lcd+0x1a>
		write(c, 1);
    231e:	61 e0       	ldi	r22, 0x01	; 1
    2320:	c1 df       	rcall	.-126    	; 0x22a4 <write>

void
put_str_lcd(const char *s)
{
	char c;
	while ((c = *(s++)) != 0) {
    2322:	89 91       	ld	r24, Y+
    2324:	81 11       	cpse	r24, r1
    2326:	fb cf       	rjmp	.-10     	; 0x231e <put_str_lcd+0x10>
		write(c, 1);
	}
    2328:	df 91       	pop	r29
    232a:	cf 91       	pop	r28
    232c:	08 95       	ret

0000232e <check_press>:
FATFS FatFs;		/* FatFs work area needed for each volume */
FIL Fil;			/* File object needed for each open file */


bool check_press(int r, int c)
{
    232e:	0f 93       	push	r16
    2330:	1f 93       	push	r17
    2332:	cf 93       	push	r28
    2334:	df 93       	push	r29
    2336:	00 d0       	rcall	.+0      	; 0x2338 <check_press+0xa>
    2338:	cd b7       	in	r28, 0x3d	; 61
    233a:	de b7       	in	r29, 0x3e	; 62
		
		// Convert the selected row into output ground
		// Convert all other rows into high impedance input
		if (r == i) {
			// DDR = 1, PORT = 0 => Ground
			SET_BIT(DDRC, i + 4);
    233c:	9c 01       	movw	r18, r24
    233e:	2c 5f       	subi	r18, 0xFC	; 252
    2340:	3f 4f       	sbci	r19, 0xFF	; 255
    2342:	41 e0       	ldi	r20, 0x01	; 1
    2344:	50 e0       	ldi	r21, 0x00	; 0
    2346:	8a 01       	movw	r16, r20
    2348:	02 c0       	rjmp	.+4      	; 0x234e <check_press+0x20>
    234a:	00 0f       	add	r16, r16
    234c:	11 1f       	adc	r17, r17
    234e:	2a 95       	dec	r18
    2350:	e2 f7       	brpl	.-8      	; 0x234a <check_press+0x1c>
    2352:	b0 2f       	mov	r27, r16
			CLR_BIT(PORTC, i + 4);
    2354:	a0 2f       	mov	r26, r16
    2356:	a0 95       	com	r26
FIL Fil;			/* File object needed for each open file */


bool check_press(int r, int c)
{
	for (int i = 0; i < 4; i++) {
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	30 e0       	ldi	r19, 0x00	; 0
		// Convert each column into an input with internal pull-up
		CLR_BIT(DDRC, i);
    235c:	e1 e0       	ldi	r30, 0x01	; 1
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	74 b3       	in	r23, 0x14	; 20
    2362:	af 01       	movw	r20, r30
    2364:	02 2e       	mov	r0, r18
    2366:	02 c0       	rjmp	.+4      	; 0x236c <check_press+0x3e>
    2368:	44 0f       	add	r20, r20
    236a:	55 1f       	adc	r21, r21
    236c:	0a 94       	dec	r0
    236e:	e2 f7       	brpl	.-8      	; 0x2368 <check_press+0x3a>
    2370:	54 2f       	mov	r21, r20
    2372:	50 95       	com	r21
    2374:	57 23       	and	r21, r23
    2376:	54 bb       	out	0x14, r21	; 20
		SET_BIT(PORTC, i);
    2378:	55 b3       	in	r21, 0x15	; 21
    237a:	45 2b       	or	r20, r21
    237c:	45 bb       	out	0x15, r20	; 21
		
		// Convert the selected row into output ground
		// Convert all other rows into high impedance input
		if (r == i) {
    237e:	82 17       	cp	r24, r18
    2380:	93 07       	cpc	r25, r19
    2382:	39 f4       	brne	.+14     	; 0x2392 <check_press+0x64>
			// DDR = 1, PORT = 0 => Ground
			SET_BIT(DDRC, i + 4);
    2384:	44 b3       	in	r20, 0x14	; 20
    2386:	4b 2b       	or	r20, r27
    2388:	44 bb       	out	0x14, r20	; 20
			CLR_BIT(PORTC, i + 4);
    238a:	45 b3       	in	r20, 0x15	; 21
    238c:	4a 23       	and	r20, r26
    238e:	45 bb       	out	0x15, r20	; 21
    2390:	12 c0       	rjmp	.+36     	; 0x23b6 <check_press+0x88>
			} else {
			// DDR = 0, PORT = 0 => High Impedance Input
			CLR_BIT(DDRC, i + 4);
    2392:	74 b3       	in	r23, 0x14	; 20
    2394:	a9 01       	movw	r20, r18
    2396:	4c 5f       	subi	r20, 0xFC	; 252
    2398:	5f 4f       	sbci	r21, 0xFF	; 255
    239a:	8f 01       	movw	r16, r30
    239c:	02 c0       	rjmp	.+4      	; 0x23a2 <check_press+0x74>
    239e:	00 0f       	add	r16, r16
    23a0:	11 1f       	adc	r17, r17
    23a2:	4a 95       	dec	r20
    23a4:	e2 f7       	brpl	.-8      	; 0x239e <check_press+0x70>
    23a6:	a8 01       	movw	r20, r16
    23a8:	40 95       	com	r20
    23aa:	54 2f       	mov	r21, r20
    23ac:	57 23       	and	r21, r23
    23ae:	54 bb       	out	0x14, r21	; 20
			CLR_BIT(PORTC, i + 4);
    23b0:	55 b3       	in	r21, 0x15	; 21
    23b2:	45 23       	and	r20, r21
    23b4:	45 bb       	out	0x15, r20	; 21
FIL Fil;			/* File object needed for each open file */


bool check_press(int r, int c)
{
	for (int i = 0; i < 4; i++) {
    23b6:	2f 5f       	subi	r18, 0xFF	; 255
    23b8:	3f 4f       	sbci	r19, 0xFF	; 255
    23ba:	24 30       	cpi	r18, 0x04	; 4
    23bc:	31 05       	cpc	r19, r1
    23be:	81 f6       	brne	.-96     	; 0x2360 <check_press+0x32>
		}
	}
	
	// Wait a few clock cycles for output voltage to update
	volatile int i;
	for (i = 0; i < 100; i++) { }
    23c0:	1a 82       	std	Y+2, r1	; 0x02
    23c2:	19 82       	std	Y+1, r1	; 0x01
    23c4:	29 81       	ldd	r18, Y+1	; 0x01
    23c6:	3a 81       	ldd	r19, Y+2	; 0x02
    23c8:	24 36       	cpi	r18, 0x64	; 100
    23ca:	31 05       	cpc	r19, r1
    23cc:	5c f4       	brge	.+22     	; 0x23e4 <check_press+0xb6>
    23ce:	29 81       	ldd	r18, Y+1	; 0x01
    23d0:	3a 81       	ldd	r19, Y+2	; 0x02
    23d2:	2f 5f       	subi	r18, 0xFF	; 255
    23d4:	3f 4f       	sbci	r19, 0xFF	; 255
    23d6:	3a 83       	std	Y+2, r19	; 0x02
    23d8:	29 83       	std	Y+1, r18	; 0x01
    23da:	29 81       	ldd	r18, Y+1	; 0x01
    23dc:	3a 81       	ldd	r19, Y+2	; 0x02
    23de:	24 36       	cpi	r18, 0x64	; 100
    23e0:	31 05       	cpc	r19, r1
    23e2:	ac f3       	brlt	.-22     	; 0x23ce <check_press+0xa0>
	
	return GET_BIT(PINC, c) == 0;
    23e4:	83 b3       	in	r24, 0x13	; 19
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	02 c0       	rjmp	.+4      	; 0x23ee <check_press+0xc0>
    23ea:	95 95       	asr	r25
    23ec:	87 95       	ror	r24
    23ee:	6a 95       	dec	r22
    23f0:	e2 f7       	brpl	.-8      	; 0x23ea <check_press+0xbc>
    23f2:	11 e0       	ldi	r17, 0x01	; 1
    23f4:	81 27       	eor	r24, r17
}
    23f6:	81 70       	andi	r24, 0x01	; 1
    23f8:	0f 90       	pop	r0
    23fa:	0f 90       	pop	r0
    23fc:	df 91       	pop	r29
    23fe:	cf 91       	pop	r28
    2400:	1f 91       	pop	r17
    2402:	0f 91       	pop	r16
    2404:	08 95       	ret

00002406 <main>:

int main (void)
{
    2406:	cf 93       	push	r28
    2408:	df 93       	push	r29
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
    240e:	63 97       	sbiw	r28, 0x13	; 19
    2410:	0f b6       	in	r0, 0x3f	; 63
    2412:	f8 94       	cli
    2414:	de bf       	out	0x3e, r29	; 62
    2416:	0f be       	out	0x3f, r0	; 63
    2418:	cd bf       	out	0x3d, r28	; 61
	ini_lcd();
    241a:	53 df       	rcall	.-346    	; 0x22c2 <ini_lcd>
	UINT bw;
	int state = 0;
	put_str_lcd("ready");
    241c:	80 e7       	ldi	r24, 0x70	; 112
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	76 df       	rcall	.-276    	; 0x230e <put_str_lcd>

int main (void)
{
	ini_lcd();
	UINT bw;
	int state = 0;
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
					put_str_lcd("error");
				}
			} else {
				clr_lcd();
				char arr[17];
				sprintf(arr, "%i", res);
    2426:	0f 2e       	mov	r0, r31
    2428:	f9 e7       	ldi	r31, 0x79	; 121
    242a:	af 2e       	mov	r10, r31
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	bf 2e       	mov	r11, r31
    2430:	f0 2d       	mov	r31, r0
    2432:	8e 01       	movw	r16, r28
    2434:	0d 5f       	subi	r16, 0xFD	; 253
    2436:	1f 4f       	sbci	r17, 0xFF	; 255
				put_str_lcd(arr);
			}
			state = 1;
    2438:	dd 24       	eor	r13, r13
    243a:	d3 94       	inc	r13
    243c:	e1 2c       	mov	r14, r1
	ini_lcd();
	UINT bw;
	int state = 0;
	put_str_lcd("ready");
	while (true) {
		if (state == 0 && check_press(0, 0)) {
    243e:	23 2b       	or	r18, r19
    2440:	09 f0       	breq	.+2      	; 0x2444 <main+0x3e>
    2442:	65 c0       	rjmp	.+202    	; 0x250e <main+0x108>
    2444:	60 e0       	ldi	r22, 0x00	; 0
    2446:	70 e0       	ldi	r23, 0x00	; 0
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	70 df       	rcall	.-288    	; 0x232e <check_press>
    244e:	88 23       	and	r24, r24
    2450:	c9 f3       	breq	.-14     	; 0x2444 <main+0x3e>
			FRESULT mR = f_mount(&FatFs, "", 0);		/* Give a work area to the default drive */
    2452:	40 e0       	ldi	r20, 0x00	; 0
    2454:	6f e9       	ldi	r22, 0x9F	; 159
    2456:	70 e0       	ldi	r23, 0x00	; 0
    2458:	87 eb       	ldi	r24, 0xB7	; 183
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	47 db       	rcall	.-2418   	; 0x1aec <f_mount>
    245e:	f8 2e       	mov	r15, r24

			if (mR != FR_OK) {
    2460:	88 23       	and	r24, r24
    2462:	b1 f0       	breq	.+44     	; 0x2490 <main+0x8a>
				clr_lcd();
    2464:	50 df       	rcall	.-352    	; 0x2306 <clr_lcd>
				char arr[17];
				sprintf(arr, "no %i", mR);
    2466:	1f 92       	push	r1
    2468:	ff 92       	push	r15
    246a:	86 e7       	ldi	r24, 0x76	; 118
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	9f 93       	push	r25
    2470:	8f 93       	push	r24
    2472:	8e 01       	movw	r16, r28
    2474:	0d 5f       	subi	r16, 0xFD	; 253
    2476:	1f 4f       	sbci	r17, 0xFF	; 255
    2478:	1f 93       	push	r17
    247a:	0f 93       	push	r16
    247c:	64 d4       	rcall	.+2248   	; 0x2d46 <sprintf>
				put_str_lcd(arr);
    247e:	c8 01       	movw	r24, r16
    2480:	46 df       	rcall	.-372    	; 0x230e <put_str_lcd>
    2482:	0f 90       	pop	r0
    2484:	0f 90       	pop	r0
    2486:	0f 90       	pop	r0
    2488:	0f 90       	pop	r0
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
    248e:	ff cf       	rjmp	.-2      	; 0x248e <main+0x88>
				while (true);
			} else {
				put_str_lcd("YAY");
    2490:	8c e7       	ldi	r24, 0x7C	; 124
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	3c df       	rcall	.-392    	; 0x230e <put_str_lcd>
			}

			FRESULT res = f_open(&Fil, "newfile.txt", FA_WRITE | FA_CREATE_ALWAYS);
    2496:	4a e0       	ldi	r20, 0x0A	; 10
    2498:	60 e8       	ldi	r22, 0x80	; 128
    249a:	70 e0       	ldi	r23, 0x00	; 0
    249c:	85 ee       	ldi	r24, 0xE5	; 229
    249e:	92 e0       	ldi	r25, 0x02	; 2
    24a0:	78 db       	rcall	.-2320   	; 0x1b92 <f_open>
    24a2:	f8 2e       	mov	r15, r24
			if (res == FR_OK) {	/* Create a file */
    24a4:	81 11       	cpse	r24, r1
    24a6:	1d c0       	rjmp	.+58     	; 0x24e2 <main+0xdc>
				put_str_lcd("writing");
    24a8:	8c e8       	ldi	r24, 0x8C	; 140
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	30 df       	rcall	.-416    	; 0x230e <put_str_lcd>
				f_write(&Fil, "It works!\r\n", 11, &bw);	/* Write data to the file */
    24ae:	9e 01       	movw	r18, r28
    24b0:	2f 5f       	subi	r18, 0xFF	; 255
    24b2:	3f 4f       	sbci	r19, 0xFF	; 255
    24b4:	4b e0       	ldi	r20, 0x0B	; 11
    24b6:	50 e0       	ldi	r21, 0x00	; 0
    24b8:	64 e9       	ldi	r22, 0x94	; 148
    24ba:	70 e0       	ldi	r23, 0x00	; 0
    24bc:	85 ee       	ldi	r24, 0xE5	; 229
    24be:	92 e0       	ldi	r25, 0x02	; 2
    24c0:	90 dc       	rcall	.-1760   	; 0x1de2 <f_write>
				f_close(&Fil);								/* Close the file */
    24c2:	85 ee       	ldi	r24, 0xE5	; 229
    24c4:	92 e0       	ldi	r25, 0x02	; 2
    24c6:	cf de       	rcall	.-610    	; 0x2266 <f_close>

				if (bw == 11) {
    24c8:	89 81       	ldd	r24, Y+1	; 0x01
    24ca:	9a 81       	ldd	r25, Y+2	; 0x02
    24cc:	0b 97       	sbiw	r24, 0x0b	; 11
    24ce:	29 f4       	brne	.+10     	; 0x24da <main+0xd4>
					clr_lcd();		/* Lights green LED if data written well */
    24d0:	1a df       	rcall	.-460    	; 0x2306 <clr_lcd>
					put_str_lcd("works");
    24d2:	80 ea       	ldi	r24, 0xA0	; 160
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	1b df       	rcall	.-458    	; 0x230e <put_str_lcd>
    24d8:	14 c0       	rjmp	.+40     	; 0x2502 <main+0xfc>
				} else {
					put_str_lcd("error");
    24da:	86 ea       	ldi	r24, 0xA6	; 166
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	17 df       	rcall	.-466    	; 0x230e <put_str_lcd>
    24e0:	10 c0       	rjmp	.+32     	; 0x2502 <main+0xfc>
				}
			} else {
				clr_lcd();
    24e2:	11 df       	rcall	.-478    	; 0x2306 <clr_lcd>
				char arr[17];
				sprintf(arr, "%i", res);
    24e4:	1f 92       	push	r1
    24e6:	ff 92       	push	r15
    24e8:	bf 92       	push	r11
    24ea:	af 92       	push	r10
    24ec:	1f 93       	push	r17
    24ee:	0f 93       	push	r16
    24f0:	2a d4       	rcall	.+2132   	; 0x2d46 <sprintf>
				put_str_lcd(arr);
    24f2:	c8 01       	movw	r24, r16
    24f4:	0c df       	rcall	.-488    	; 0x230e <put_str_lcd>
    24f6:	0f 90       	pop	r0
    24f8:	0f 90       	pop	r0
    24fa:	0f 90       	pop	r0
    24fc:	0f 90       	pop	r0
    24fe:	0f 90       	pop	r0
    2500:	0f 90       	pop	r0
			}
			state = 1;
			put_str_lcd("done");
    2502:	8c ea       	ldi	r24, 0xAC	; 172
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	03 df       	rcall	.-506    	; 0x230e <put_str_lcd>
				clr_lcd();
				char arr[17];
				sprintf(arr, "%i", res);
				put_str_lcd(arr);
			}
			state = 1;
    2508:	2d 2d       	mov	r18, r13
    250a:	3e 2d       	mov	r19, r14
    250c:	98 cf       	rjmp	.-208    	; 0x243e <main+0x38>
    250e:	ff cf       	rjmp	.-2      	; 0x250e <main+0x108>

00002510 <get_fattime>:
			| ((DWORD)7 << 21)				/* Month 7 */
			| ((DWORD)28 << 16)				/* Mday 28 */
			| ((DWORD)0 << 11)				/* Hour 0 */
			| ((DWORD)0 << 5)				/* Min 0 */
			| ((DWORD)0 >> 1);				/* Sec 0 */
}
    2510:	60 e0       	ldi	r22, 0x00	; 0
    2512:	70 e0       	ldi	r23, 0x00	; 0
    2514:	8c ef       	ldi	r24, 0xFC	; 252
    2516:	92 e4       	ldi	r25, 0x42	; 66
    2518:	08 95       	ret

0000251a <dly_us>:

static
void dly_us (UINT n)	/* Delay n microseconds (avr-gcc -Os) */
{
	do {
		PINB;
    251a:	26 b3       	in	r18, 0x16	; 22
		PINB; PINB;
#endif
#if F_CPU >= 14000000
#error Too fast clock
#endif
	} while (--n);
    251c:	01 97       	sbiw	r24, 0x01	; 1
    251e:	00 97       	sbiw	r24, 0x00	; 0
    2520:	e1 f7       	brne	.-8      	; 0x251a <dly_us>
}
    2522:	08 95       	ret

00002524 <xmit_mmc>:
static
void xmit_mmc (
	const BYTE* buff,	/* Data to be sent */
	UINT bc				/* Number of bytes to send */
)
{
    2524:	fc 01       	movw	r30, r24
    2526:	68 0f       	add	r22, r24
    2528:	79 1f       	adc	r23, r25
	BYTE d;


	do {
		d = *buff++;	/* Get a byte to be sent */
    252a:	81 91       	ld	r24, Z+
		if (d & 0x80) DI_H(); else DI_L();	/* bit7 */
    252c:	88 23       	and	r24, r24
    252e:	14 f4       	brge	.+4      	; 0x2534 <xmit_mmc+0x10>
    2530:	c1 9a       	sbi	0x18, 1	; 24
    2532:	01 c0       	rjmp	.+2      	; 0x2536 <xmit_mmc+0x12>
    2534:	c1 98       	cbi	0x18, 1	; 24
		CK_H(); CK_L();
    2536:	c2 9a       	sbi	0x18, 2	; 24
    2538:	c2 98       	cbi	0x18, 2	; 24
		if (d & 0x40) DI_H(); else DI_L();	/* bit6 */
    253a:	86 ff       	sbrs	r24, 6
    253c:	02 c0       	rjmp	.+4      	; 0x2542 <xmit_mmc+0x1e>
    253e:	c1 9a       	sbi	0x18, 1	; 24
    2540:	01 c0       	rjmp	.+2      	; 0x2544 <xmit_mmc+0x20>
    2542:	c1 98       	cbi	0x18, 1	; 24
		CK_H(); CK_L();
    2544:	c2 9a       	sbi	0x18, 2	; 24
    2546:	c2 98       	cbi	0x18, 2	; 24
		if (d & 0x20) DI_H(); else DI_L();	/* bit5 */
    2548:	85 ff       	sbrs	r24, 5
    254a:	02 c0       	rjmp	.+4      	; 0x2550 <xmit_mmc+0x2c>
    254c:	c1 9a       	sbi	0x18, 1	; 24
    254e:	01 c0       	rjmp	.+2      	; 0x2552 <xmit_mmc+0x2e>
    2550:	c1 98       	cbi	0x18, 1	; 24
		CK_H(); CK_L();
    2552:	c2 9a       	sbi	0x18, 2	; 24
    2554:	c2 98       	cbi	0x18, 2	; 24
		if (d & 0x10) DI_H(); else DI_L();	/* bit4 */
    2556:	84 ff       	sbrs	r24, 4
    2558:	02 c0       	rjmp	.+4      	; 0x255e <xmit_mmc+0x3a>
    255a:	c1 9a       	sbi	0x18, 1	; 24
    255c:	01 c0       	rjmp	.+2      	; 0x2560 <xmit_mmc+0x3c>
    255e:	c1 98       	cbi	0x18, 1	; 24
		CK_H(); CK_L();
    2560:	c2 9a       	sbi	0x18, 2	; 24
    2562:	c2 98       	cbi	0x18, 2	; 24
		if (d & 0x08) DI_H(); else DI_L();	/* bit3 */
    2564:	83 ff       	sbrs	r24, 3
    2566:	02 c0       	rjmp	.+4      	; 0x256c <xmit_mmc+0x48>
    2568:	c1 9a       	sbi	0x18, 1	; 24
    256a:	01 c0       	rjmp	.+2      	; 0x256e <xmit_mmc+0x4a>
    256c:	c1 98       	cbi	0x18, 1	; 24
		CK_H(); CK_L();
    256e:	c2 9a       	sbi	0x18, 2	; 24
    2570:	c2 98       	cbi	0x18, 2	; 24
		if (d & 0x04) DI_H(); else DI_L();	/* bit2 */
    2572:	82 ff       	sbrs	r24, 2
    2574:	02 c0       	rjmp	.+4      	; 0x257a <xmit_mmc+0x56>
    2576:	c1 9a       	sbi	0x18, 1	; 24
    2578:	01 c0       	rjmp	.+2      	; 0x257c <xmit_mmc+0x58>
    257a:	c1 98       	cbi	0x18, 1	; 24
		CK_H(); CK_L();
    257c:	c2 9a       	sbi	0x18, 2	; 24
    257e:	c2 98       	cbi	0x18, 2	; 24
		if (d & 0x02) DI_H(); else DI_L();	/* bit1 */
    2580:	81 ff       	sbrs	r24, 1
    2582:	02 c0       	rjmp	.+4      	; 0x2588 <xmit_mmc+0x64>
    2584:	c1 9a       	sbi	0x18, 1	; 24
    2586:	01 c0       	rjmp	.+2      	; 0x258a <xmit_mmc+0x66>
    2588:	c1 98       	cbi	0x18, 1	; 24
		CK_H(); CK_L();
    258a:	c2 9a       	sbi	0x18, 2	; 24
    258c:	c2 98       	cbi	0x18, 2	; 24
		if (d & 0x01) DI_H(); else DI_L();	/* bit0 */
    258e:	80 ff       	sbrs	r24, 0
    2590:	02 c0       	rjmp	.+4      	; 0x2596 <xmit_mmc+0x72>
    2592:	c1 9a       	sbi	0x18, 1	; 24
    2594:	01 c0       	rjmp	.+2      	; 0x2598 <xmit_mmc+0x74>
    2596:	c1 98       	cbi	0x18, 1	; 24
		CK_H(); CK_L();
    2598:	c2 9a       	sbi	0x18, 2	; 24
    259a:	c2 98       	cbi	0x18, 2	; 24
	} while (--bc);
    259c:	e6 17       	cp	r30, r22
    259e:	f7 07       	cpc	r31, r23
    25a0:	21 f6       	brne	.-120    	; 0x252a <xmit_mmc+0x6>
}
    25a2:	08 95       	ret

000025a4 <rcvr_mmc>:
)
{
	BYTE r;


	DI_H();	/* Send 0xFF */
    25a4:	c1 9a       	sbi	0x18, 1	; 24
    25a6:	fc 01       	movw	r30, r24
    25a8:	68 0f       	add	r22, r24
    25aa:	79 1f       	adc	r23, r25

	do {
		r = 0;	 if (DO) r++;	/* bit7 */
    25ac:	86 b3       	in	r24, 0x16	; 22
		CK_H(); CK_L();
    25ae:	c2 9a       	sbi	0x18, 2	; 24
    25b0:	c2 98       	cbi	0x18, 2	; 24


	DI_H();	/* Send 0xFF */

	do {
		r = 0;	 if (DO) r++;	/* bit7 */
    25b2:	81 70       	andi	r24, 0x01	; 1
		CK_H(); CK_L();
		r <<= 1; if (DO) r++;	/* bit6 */
    25b4:	88 0f       	add	r24, r24
    25b6:	b0 99       	sbic	0x16, 0	; 22
    25b8:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    25ba:	c2 9a       	sbi	0x18, 2	; 24
    25bc:	c2 98       	cbi	0x18, 2	; 24
		r <<= 1; if (DO) r++;	/* bit5 */
    25be:	88 0f       	add	r24, r24
    25c0:	b0 99       	sbic	0x16, 0	; 22
    25c2:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    25c4:	c2 9a       	sbi	0x18, 2	; 24
    25c6:	c2 98       	cbi	0x18, 2	; 24
		r <<= 1; if (DO) r++;	/* bit4 */
    25c8:	88 0f       	add	r24, r24
    25ca:	b0 99       	sbic	0x16, 0	; 22
    25cc:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    25ce:	c2 9a       	sbi	0x18, 2	; 24
    25d0:	c2 98       	cbi	0x18, 2	; 24
		r <<= 1; if (DO) r++;	/* bit3 */
    25d2:	88 0f       	add	r24, r24
    25d4:	b0 99       	sbic	0x16, 0	; 22
    25d6:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    25d8:	c2 9a       	sbi	0x18, 2	; 24
    25da:	c2 98       	cbi	0x18, 2	; 24
		r <<= 1; if (DO) r++;	/* bit2 */
    25dc:	88 0f       	add	r24, r24
    25de:	b0 99       	sbic	0x16, 0	; 22
    25e0:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    25e2:	c2 9a       	sbi	0x18, 2	; 24
    25e4:	c2 98       	cbi	0x18, 2	; 24
		r <<= 1; if (DO) r++;	/* bit1 */
    25e6:	88 0f       	add	r24, r24
    25e8:	b0 99       	sbic	0x16, 0	; 22
    25ea:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    25ec:	c2 9a       	sbi	0x18, 2	; 24
    25ee:	c2 98       	cbi	0x18, 2	; 24
		r <<= 1; if (DO) r++;	/* bit0 */
    25f0:	88 0f       	add	r24, r24
    25f2:	b0 99       	sbic	0x16, 0	; 22
    25f4:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    25f6:	c2 9a       	sbi	0x18, 2	; 24
    25f8:	c2 98       	cbi	0x18, 2	; 24
		*buff++ = r;			/* Store a received byte */
    25fa:	81 93       	st	Z+, r24
	} while (--bc);
    25fc:	e6 17       	cp	r30, r22
    25fe:	f7 07       	cpc	r31, r23
    2600:	a9 f6       	brne	.-86     	; 0x25ac <rcvr_mmc+0x8>
}
    2602:	08 95       	ret

00002604 <wait_ready>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
    2604:	0f 93       	push	r16
    2606:	1f 93       	push	r17
    2608:	cf 93       	push	r28
    260a:	df 93       	push	r29
    260c:	1f 92       	push	r1
    260e:	cd b7       	in	r28, 0x3d	; 61
    2610:	de b7       	in	r29, 0x3e	; 62
	BYTE d;
	UINT tmr;


	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
    2612:	08 e8       	ldi	r16, 0x88	; 136
    2614:	13 e1       	ldi	r17, 0x13	; 19
		rcvr_mmc(&d, 1);
    2616:	61 e0       	ldi	r22, 0x01	; 1
    2618:	70 e0       	ldi	r23, 0x00	; 0
    261a:	ce 01       	movw	r24, r28
    261c:	01 96       	adiw	r24, 0x01	; 1
    261e:	c2 df       	rcall	.-124    	; 0x25a4 <rcvr_mmc>
		if (d == 0xFF) break;
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	8f 3f       	cpi	r24, 0xFF	; 255
    2624:	41 f0       	breq	.+16     	; 0x2636 <wait_ready+0x32>
		dly_us(100);
    2626:	84 e6       	ldi	r24, 0x64	; 100
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	77 df       	rcall	.-274    	; 0x251a <dly_us>
{
	BYTE d;
	UINT tmr;


	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
    262c:	01 50       	subi	r16, 0x01	; 1
    262e:	11 09       	sbc	r17, r1
    2630:	01 15       	cp	r16, r1
    2632:	11 05       	cpc	r17, r1
    2634:	81 f7       	brne	.-32     	; 0x2616 <wait_ready+0x12>
		rcvr_mmc(&d, 1);
		if (d == 0xFF) break;
		dly_us(100);
	}

	return tmr ? 1 : 0;
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	01 2b       	or	r16, r17
    263c:	11 f4       	brne	.+4      	; 0x2642 <wait_ready+0x3e>
    263e:	80 e0       	ldi	r24, 0x00	; 0
    2640:	90 e0       	ldi	r25, 0x00	; 0
}
    2642:	0f 90       	pop	r0
    2644:	df 91       	pop	r29
    2646:	cf 91       	pop	r28
    2648:	1f 91       	pop	r17
    264a:	0f 91       	pop	r16
    264c:	08 95       	ret

0000264e <deselect>:
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
    264e:	cf 93       	push	r28
    2650:	df 93       	push	r29
    2652:	1f 92       	push	r1
    2654:	cd b7       	in	r28, 0x3d	; 61
    2656:	de b7       	in	r29, 0x3e	; 62
	BYTE d;

	CS_H();
    2658:	c3 9a       	sbi	0x18, 3	; 24
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    265a:	61 e0       	ldi	r22, 0x01	; 1
    265c:	70 e0       	ldi	r23, 0x00	; 0
    265e:	ce 01       	movw	r24, r28
    2660:	01 96       	adiw	r24, 0x01	; 1
    2662:	a0 df       	rcall	.-192    	; 0x25a4 <rcvr_mmc>
}
    2664:	0f 90       	pop	r0
    2666:	df 91       	pop	r29
    2668:	cf 91       	pop	r28
    266a:	08 95       	ret

0000266c <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:OK, 0:Timeout */
{
    266c:	0f 93       	push	r16
    266e:	1f 93       	push	r17
    2670:	cf 93       	push	r28
    2672:	df 93       	push	r29
    2674:	1f 92       	push	r1
    2676:	cd b7       	in	r28, 0x3d	; 61
    2678:	de b7       	in	r29, 0x3e	; 62
	BYTE d;

	CS_L();
    267a:	c3 98       	cbi	0x18, 3	; 24
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */
    267c:	61 e0       	ldi	r22, 0x01	; 1
    267e:	70 e0       	ldi	r23, 0x00	; 0
    2680:	ce 01       	movw	r24, r28
    2682:	01 96       	adiw	r24, 0x01	; 1
    2684:	8f df       	rcall	.-226    	; 0x25a4 <rcvr_mmc>

	if (wait_ready()) return 1;	/* OK */
    2686:	be df       	rcall	.-132    	; 0x2604 <wait_ready>
    2688:	8c 01       	movw	r16, r24
    268a:	00 97       	sbiw	r24, 0x00	; 0
    268c:	11 f4       	brne	.+4      	; 0x2692 <select+0x26>
	deselect();
    268e:	df df       	rcall	.-66     	; 0x264e <deselect>
	return 0;			/* Failed */
    2690:	02 c0       	rjmp	.+4      	; 0x2696 <select+0x2a>
	BYTE d;

	CS_L();
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */

	if (wait_ready()) return 1;	/* OK */
    2692:	01 e0       	ldi	r16, 0x01	; 1
    2694:	10 e0       	ldi	r17, 0x00	; 0
	deselect();
	return 0;			/* Failed */
}
    2696:	c8 01       	movw	r24, r16
    2698:	0f 90       	pop	r0
    269a:	df 91       	pop	r29
    269c:	cf 91       	pop	r28
    269e:	1f 91       	pop	r17
    26a0:	0f 91       	pop	r16
    26a2:	08 95       	ret

000026a4 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Failed */
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count */
)
{
    26a4:	cf 92       	push	r12
    26a6:	df 92       	push	r13
    26a8:	ef 92       	push	r14
    26aa:	ff 92       	push	r15
    26ac:	0f 93       	push	r16
    26ae:	1f 93       	push	r17
    26b0:	cf 93       	push	r28
    26b2:	df 93       	push	r29
    26b4:	00 d0       	rcall	.+0      	; 0x26b6 <rcvr_datablock+0x12>
    26b6:	cd b7       	in	r28, 0x3d	; 61
    26b8:	de b7       	in	r29, 0x3e	; 62
    26ba:	7c 01       	movw	r14, r24
    26bc:	6b 01       	movw	r12, r22
    26be:	08 ee       	ldi	r16, 0xE8	; 232
    26c0:	13 e0       	ldi	r17, 0x03	; 3
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
		rcvr_mmc(d, 1);
    26c2:	61 e0       	ldi	r22, 0x01	; 1
    26c4:	70 e0       	ldi	r23, 0x00	; 0
    26c6:	ce 01       	movw	r24, r28
    26c8:	01 96       	adiw	r24, 0x01	; 1
    26ca:	6c df       	rcall	.-296    	; 0x25a4 <rcvr_mmc>
		if (d[0] != 0xFF) break;
    26cc:	89 81       	ldd	r24, Y+1	; 0x01
    26ce:	8f 3f       	cpi	r24, 0xFF	; 255
    26d0:	41 f4       	brne	.+16     	; 0x26e2 <rcvr_datablock+0x3e>
		dly_us(100);
    26d2:	84 e6       	ldi	r24, 0x64	; 100
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	21 df       	rcall	.-446    	; 0x251a <dly_us>
    26d8:	01 50       	subi	r16, 0x01	; 1
    26da:	11 09       	sbc	r17, r1
{
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
    26dc:	01 15       	cp	r16, r1
    26de:	11 05       	cpc	r17, r1
    26e0:	81 f7       	brne	.-32     	; 0x26c2 <rcvr_datablock+0x1e>
		rcvr_mmc(d, 1);
		if (d[0] != 0xFF) break;
		dly_us(100);
	}
	if (d[0] != 0xFE) return 0;		/* If not valid data token, return with error */
    26e2:	89 81       	ldd	r24, Y+1	; 0x01
    26e4:	8e 3f       	cpi	r24, 0xFE	; 254
    26e6:	59 f4       	brne	.+22     	; 0x26fe <rcvr_datablock+0x5a>

	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
    26e8:	b6 01       	movw	r22, r12
    26ea:	c7 01       	movw	r24, r14
    26ec:	5b df       	rcall	.-330    	; 0x25a4 <rcvr_mmc>
	rcvr_mmc(d, 2);					/* Discard CRC */
    26ee:	62 e0       	ldi	r22, 0x02	; 2
    26f0:	70 e0       	ldi	r23, 0x00	; 0
    26f2:	ce 01       	movw	r24, r28
    26f4:	01 96       	adiw	r24, 0x01	; 1
    26f6:	56 df       	rcall	.-340    	; 0x25a4 <rcvr_mmc>

	return 1;						/* Return with success */
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	02 c0       	rjmp	.+4      	; 0x2702 <rcvr_datablock+0x5e>
	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
		rcvr_mmc(d, 1);
		if (d[0] != 0xFF) break;
		dly_us(100);
	}
	if (d[0] != 0xFE) return 0;		/* If not valid data token, return with error */
    26fe:	80 e0       	ldi	r24, 0x00	; 0
    2700:	90 e0       	ldi	r25, 0x00	; 0

	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
	rcvr_mmc(d, 2);					/* Discard CRC */

	return 1;						/* Return with success */
}
    2702:	0f 90       	pop	r0
    2704:	0f 90       	pop	r0
    2706:	df 91       	pop	r29
    2708:	cf 91       	pop	r28
    270a:	1f 91       	pop	r17
    270c:	0f 91       	pop	r16
    270e:	ff 90       	pop	r15
    2710:	ef 90       	pop	r14
    2712:	df 90       	pop	r13
    2714:	cf 90       	pop	r12
    2716:	08 95       	ret

00002718 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    2718:	ff 92       	push	r15
    271a:	0f 93       	push	r16
    271c:	1f 93       	push	r17
    271e:	cf 93       	push	r28
    2720:	df 93       	push	r29
    2722:	00 d0       	rcall	.+0      	; 0x2724 <xmit_datablock+0xc>
    2724:	cd b7       	in	r28, 0x3d	; 61
    2726:	de b7       	in	r29, 0x3e	; 62
    2728:	8c 01       	movw	r16, r24
    272a:	f6 2e       	mov	r15, r22
	BYTE d[2];


	if (!wait_ready()) return 0;
    272c:	6b df       	rcall	.-298    	; 0x2604 <wait_ready>
    272e:	00 97       	sbiw	r24, 0x00	; 0
    2730:	19 f1       	breq	.+70     	; 0x2778 <xmit_datablock+0x60>

	d[0] = token;
    2732:	f9 82       	std	Y+1, r15	; 0x01
	xmit_mmc(d, 1);				/* Xmit a token */
    2734:	61 e0       	ldi	r22, 0x01	; 1
    2736:	70 e0       	ldi	r23, 0x00	; 0
    2738:	ce 01       	movw	r24, r28
    273a:	01 96       	adiw	r24, 0x01	; 1
    273c:	f3 de       	rcall	.-538    	; 0x2524 <xmit_mmc>
	if (token != 0xFD) {		/* Is it data token? */
    273e:	8d ef       	ldi	r24, 0xFD	; 253
    2740:	f8 16       	cp	r15, r24
    2742:	c1 f0       	breq	.+48     	; 0x2774 <xmit_datablock+0x5c>
		xmit_mmc(buff, 512);	/* Xmit the 512 byte data block to MMC */
    2744:	60 e0       	ldi	r22, 0x00	; 0
    2746:	72 e0       	ldi	r23, 0x02	; 2
    2748:	c8 01       	movw	r24, r16
    274a:	ec de       	rcall	.-552    	; 0x2524 <xmit_mmc>
		rcvr_mmc(d, 2);			/* Xmit dummy CRC (0xFF,0xFF) */
    274c:	62 e0       	ldi	r22, 0x02	; 2
    274e:	70 e0       	ldi	r23, 0x00	; 0
    2750:	ce 01       	movw	r24, r28
    2752:	01 96       	adiw	r24, 0x01	; 1
    2754:	27 df       	rcall	.-434    	; 0x25a4 <rcvr_mmc>
		rcvr_mmc(d, 1);			/* Receive data response */
    2756:	61 e0       	ldi	r22, 0x01	; 1
    2758:	70 e0       	ldi	r23, 0x00	; 0
    275a:	ce 01       	movw	r24, r28
    275c:	01 96       	adiw	r24, 0x01	; 1
    275e:	22 df       	rcall	.-444    	; 0x25a4 <rcvr_mmc>
		if ((d[0] & 0x1F) != 0x05)	/* If not accepted, return with error */
    2760:	89 81       	ldd	r24, Y+1	; 0x01
    2762:	8f 71       	andi	r24, 0x1F	; 31
    2764:	31 e0       	ldi	r19, 0x01	; 1
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	85 30       	cpi	r24, 0x05	; 5
    276a:	09 f0       	breq	.+2      	; 0x276e <xmit_datablock+0x56>
    276c:	30 e0       	ldi	r19, 0x00	; 0
)
{
	BYTE d[2];


	if (!wait_ready()) return 0;
    276e:	83 2f       	mov	r24, r19
    2770:	92 2f       	mov	r25, r18
    2772:	02 c0       	rjmp	.+4      	; 0x2778 <xmit_datablock+0x60>
		rcvr_mmc(d, 1);			/* Receive data response */
		if ((d[0] & 0x1F) != 0x05)	/* If not accepted, return with error */
			return 0;
	}

	return 1;
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	90 e0       	ldi	r25, 0x00	; 0
}
    2778:	0f 90       	pop	r0
    277a:	0f 90       	pop	r0
    277c:	df 91       	pop	r29
    277e:	cf 91       	pop	r28
    2780:	1f 91       	pop	r17
    2782:	0f 91       	pop	r16
    2784:	ff 90       	pop	r15
    2786:	08 95       	ret

00002788 <send_cmd>:
static
BYTE send_cmd (		/* Returns command response (bit7==1:Send failed)*/
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    2788:	df 92       	push	r13
    278a:	ef 92       	push	r14
    278c:	ff 92       	push	r15
    278e:	0f 93       	push	r16
    2790:	1f 93       	push	r17
    2792:	cf 93       	push	r28
    2794:	df 93       	push	r29
    2796:	cd b7       	in	r28, 0x3d	; 61
    2798:	de b7       	in	r29, 0x3e	; 62
    279a:	27 97       	sbiw	r28, 0x07	; 7
    279c:	0f b6       	in	r0, 0x3f	; 63
    279e:	f8 94       	cli
    27a0:	de bf       	out	0x3e, r29	; 62
    27a2:	0f be       	out	0x3f, r0	; 63
    27a4:	cd bf       	out	0x3d, r28	; 61
    27a6:	18 2f       	mov	r17, r24
    27a8:	04 2f       	mov	r16, r20
    27aa:	f5 2e       	mov	r15, r21
    27ac:	e6 2e       	mov	r14, r22
    27ae:	d7 2e       	mov	r13, r23
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    27b0:	88 23       	and	r24, r24
    27b2:	4c f4       	brge	.+18     	; 0x27c6 <send_cmd+0x3e>
		cmd &= 0x7F;
		n = send_cmd(CMD55, 0);
    27b4:	40 e0       	ldi	r20, 0x00	; 0
    27b6:	50 e0       	ldi	r21, 0x00	; 0
    27b8:	ba 01       	movw	r22, r20
    27ba:	87 e3       	ldi	r24, 0x37	; 55
    27bc:	e5 df       	rcall	.-54     	; 0x2788 <send_cmd>
		if (n > 1) return n;
    27be:	82 30       	cpi	r24, 0x02	; 2
    27c0:	08 f0       	brcs	.+2      	; 0x27c4 <send_cmd+0x3c>
    27c2:	45 c0       	rjmp	.+138    	; 0x284e <send_cmd+0xc6>
{
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    27c4:	1f 77       	andi	r17, 0x7F	; 127
		n = send_cmd(CMD55, 0);
		if (n > 1) return n;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    27c6:	1c 30       	cpi	r17, 0x0C	; 12
    27c8:	59 f1       	breq	.+86     	; 0x2820 <send_cmd+0x98>
		deselect();
    27ca:	41 df       	rcall	.-382    	; 0x264e <deselect>
		if (!select()) return 0xFF;
    27cc:	4f df       	rcall	.-354    	; 0x266c <select>
    27ce:	89 2b       	or	r24, r25
    27d0:	29 f1       	breq	.+74     	; 0x281c <send_cmd+0x94>
	}

	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
    27d2:	81 2f       	mov	r24, r17
    27d4:	80 64       	ori	r24, 0x40	; 64
    27d6:	8a 83       	std	Y+2, r24	; 0x02
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
    27d8:	db 82       	std	Y+3, r13	; 0x03
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
    27da:	ec 82       	std	Y+4, r14	; 0x04
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
    27dc:	fd 82       	std	Y+5, r15	; 0x05
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
    27de:	0e 83       	std	Y+6, r16	; 0x06
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
    27e0:	11 23       	and	r17, r17
    27e2:	69 f1       	breq	.+90     	; 0x283e <send_cmd+0xb6>
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
    27e4:	18 30       	cpi	r17, 0x08	; 8
    27e6:	19 f1       	breq	.+70     	; 0x282e <send_cmd+0xa6>
	buf[5] = n;
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    27ec:	66 e0       	ldi	r22, 0x06	; 6
    27ee:	70 e0       	ldi	r23, 0x00	; 0
    27f0:	ce 01       	movw	r24, r28
    27f2:	02 96       	adiw	r24, 0x02	; 2
    27f4:	97 de       	rcall	.-722    	; 0x2524 <xmit_mmc>

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
    27f6:	1c 30       	cpi	r17, 0x0C	; 12
    27f8:	29 f4       	brne	.+10     	; 0x2804 <send_cmd+0x7c>
    27fa:	61 e0       	ldi	r22, 0x01	; 1
    27fc:	70 e0       	ldi	r23, 0x00	; 0
    27fe:	ce 01       	movw	r24, r28
    2800:	01 96       	adiw	r24, 0x01	; 1
    2802:	d0 de       	rcall	.-608    	; 0x25a4 <rcvr_mmc>
static
BYTE send_cmd (		/* Returns command response (bit7==1:Send failed)*/
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    2804:	1a e0       	ldi	r17, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		rcvr_mmc(&d, 1);
    2806:	61 e0       	ldi	r22, 0x01	; 1
    2808:	70 e0       	ldi	r23, 0x00	; 0
    280a:	ce 01       	movw	r24, r28
    280c:	01 96       	adiw	r24, 0x01	; 1
    280e:	ca de       	rcall	.-620    	; 0x25a4 <rcvr_mmc>
	while ((d & 0x80) && --n);
    2810:	89 81       	ldd	r24, Y+1	; 0x01
    2812:	88 23       	and	r24, r24
    2814:	e4 f4       	brge	.+56     	; 0x284e <send_cmd+0xc6>
    2816:	11 50       	subi	r17, 0x01	; 1
    2818:	b1 f7       	brne	.-20     	; 0x2806 <send_cmd+0x7e>
    281a:	19 c0       	rjmp	.+50     	; 0x284e <send_cmd+0xc6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
    281c:	8f ef       	ldi	r24, 0xFF	; 255
    281e:	17 c0       	rjmp	.+46     	; 0x284e <send_cmd+0xc6>
	}

	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
    2820:	8c e4       	ldi	r24, 0x4C	; 76
    2822:	8a 83       	std	Y+2, r24	; 0x02
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
    2824:	db 82       	std	Y+3, r13	; 0x03
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
    2826:	ec 82       	std	Y+4, r14	; 0x04
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
    2828:	fd 82       	std	Y+5, r15	; 0x05
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
    282a:	0e 83       	std	Y+6, r16	; 0x06
    282c:	dd cf       	rjmp	.-70     	; 0x27e8 <send_cmd+0x60>
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
    282e:	87 e8       	ldi	r24, 0x87	; 135
    2830:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    2832:	66 e0       	ldi	r22, 0x06	; 6
    2834:	70 e0       	ldi	r23, 0x00	; 0
    2836:	ce 01       	movw	r24, r28
    2838:	02 96       	adiw	r24, 0x02	; 2
    283a:	74 de       	rcall	.-792    	; 0x2524 <xmit_mmc>
    283c:	e3 cf       	rjmp	.-58     	; 0x2804 <send_cmd+0x7c>
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
    283e:	85 e9       	ldi	r24, 0x95	; 149
    2840:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    2842:	66 e0       	ldi	r22, 0x06	; 6
    2844:	70 e0       	ldi	r23, 0x00	; 0
    2846:	ce 01       	movw	r24, r28
    2848:	02 96       	adiw	r24, 0x02	; 2
    284a:	6c de       	rcall	.-808    	; 0x2524 <xmit_mmc>
    284c:	db cf       	rjmp	.-74     	; 0x2804 <send_cmd+0x7c>
	do
		rcvr_mmc(&d, 1);
	while ((d & 0x80) && --n);

	return d;			/* Return with the response value */
}
    284e:	27 96       	adiw	r28, 0x07	; 7
    2850:	0f b6       	in	r0, 0x3f	; 63
    2852:	f8 94       	cli
    2854:	de bf       	out	0x3e, r29	; 62
    2856:	0f be       	out	0x3f, r0	; 63
    2858:	cd bf       	out	0x3d, r28	; 61
    285a:	df 91       	pop	r29
    285c:	cf 91       	pop	r28
    285e:	1f 91       	pop	r17
    2860:	0f 91       	pop	r16
    2862:	ff 90       	pop	r15
    2864:	ef 90       	pop	r14
    2866:	df 90       	pop	r13
    2868:	08 95       	ret

0000286a <disk_status>:

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    286a:	81 11       	cpse	r24, r1
    286c:	03 c0       	rjmp	.+6      	; 0x2874 <disk_status+0xa>

	return Stat;
    286e:	80 91 60 00 	lds	r24, 0x0060
    2872:	08 95       	ret

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    2874:	81 e0       	ldi	r24, 0x01	; 1

	return Stat;
}
    2876:	08 95       	ret

00002878 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
    2878:	ef 92       	push	r14
    287a:	ff 92       	push	r15
    287c:	0f 93       	push	r16
    287e:	1f 93       	push	r17
    2880:	cf 93       	push	r28
    2882:	df 93       	push	r29
    2884:	00 d0       	rcall	.+0      	; 0x2886 <disk_initialize+0xe>
    2886:	00 d0       	rcall	.+0      	; 0x2888 <disk_initialize+0x10>
    2888:	cd b7       	in	r28, 0x3d	; 61
    288a:	de b7       	in	r29, 0x3e	; 62
	BYTE n, ty, cmd, buf[4];
	UINT tmr;
	DSTATUS s;


	if (drv) return RES_NOTRDY;
    288c:	81 11       	cpse	r24, r1
    288e:	a7 c0       	rjmp	.+334    	; 0x29de <disk_initialize+0x166>

	dly_us(10000);			/* 10ms */
    2890:	80 e1       	ldi	r24, 0x10	; 16
    2892:	97 e2       	ldi	r25, 0x27	; 39
    2894:	42 de       	rcall	.-892    	; 0x251a <dly_us>
	CS_INIT(); CS_H();		/* Initialize port pin tied to CS */
    2896:	bb 9a       	sbi	0x17, 3	; 23
    2898:	c3 9a       	sbi	0x18, 3	; 24
	CK_INIT(); CK_L();		/* Initialize port pin tied to SCLK */
    289a:	ba 9a       	sbi	0x17, 2	; 23
    289c:	c2 98       	cbi	0x18, 2	; 24
	DI_INIT();				/* Initialize port pin tied to DI */
    289e:	b9 9a       	sbi	0x17, 1	; 23
	DO_INIT();				/* Initialize port pin tied to DO */
    28a0:	b8 9a       	sbi	0x17, 0	; 23
    28a2:	1a e0       	ldi	r17, 0x0A	; 10

	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */
    28a4:	61 e0       	ldi	r22, 0x01	; 1
    28a6:	70 e0       	ldi	r23, 0x00	; 0
    28a8:	ce 01       	movw	r24, r28
    28aa:	01 96       	adiw	r24, 0x01	; 1
    28ac:	7b de       	rcall	.-778    	; 0x25a4 <rcvr_mmc>
    28ae:	11 50       	subi	r17, 0x01	; 1
    28b0:	c9 f7       	brne	.-14     	; 0x28a4 <disk_initialize+0x2c>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    28b2:	40 e0       	ldi	r20, 0x00	; 0
    28b4:	50 e0       	ldi	r21, 0x00	; 0
    28b6:	ba 01       	movw	r22, r20
    28b8:	80 e0       	ldi	r24, 0x00	; 0
    28ba:	66 df       	rcall	.-308    	; 0x2788 <send_cmd>
    28bc:	81 30       	cpi	r24, 0x01	; 1
    28be:	09 f0       	breq	.+2      	; 0x28c2 <disk_initialize+0x4a>
    28c0:	6f c0       	rjmp	.+222    	; 0x29a0 <disk_initialize+0x128>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    28c2:	4a ea       	ldi	r20, 0xAA	; 170
    28c4:	51 e0       	ldi	r21, 0x01	; 1
    28c6:	60 e0       	ldi	r22, 0x00	; 0
    28c8:	70 e0       	ldi	r23, 0x00	; 0
    28ca:	88 e0       	ldi	r24, 0x08	; 8
    28cc:	5d df       	rcall	.-326    	; 0x2788 <send_cmd>
    28ce:	81 30       	cpi	r24, 0x01	; 1
    28d0:	b9 f5       	brne	.+110    	; 0x2940 <disk_initialize+0xc8>
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
    28d2:	64 e0       	ldi	r22, 0x04	; 4
    28d4:	70 e0       	ldi	r23, 0x00	; 0
    28d6:	ce 01       	movw	r24, r28
    28d8:	01 96       	adiw	r24, 0x01	; 1
    28da:	64 de       	rcall	.-824    	; 0x25a4 <rcvr_mmc>
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
    28dc:	8b 81       	ldd	r24, Y+3	; 0x03
    28de:	81 30       	cpi	r24, 0x01	; 1
    28e0:	09 f0       	breq	.+2      	; 0x28e4 <disk_initialize+0x6c>
    28e2:	60 c0       	rjmp	.+192    	; 0x29a4 <disk_initialize+0x12c>
    28e4:	8c 81       	ldd	r24, Y+4	; 0x04
    28e6:	8a 3a       	cpi	r24, 0xAA	; 170
    28e8:	09 f0       	breq	.+2      	; 0x28ec <disk_initialize+0x74>
    28ea:	5e c0       	rjmp	.+188    	; 0x29a8 <disk_initialize+0x130>
    28ec:	08 ee       	ldi	r16, 0xE8	; 232
    28ee:	13 e0       	ldi	r17, 0x03	; 3
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
    28f0:	40 e0       	ldi	r20, 0x00	; 0
    28f2:	50 e0       	ldi	r21, 0x00	; 0
    28f4:	60 e0       	ldi	r22, 0x00	; 0
    28f6:	70 e4       	ldi	r23, 0x40	; 64
    28f8:	89 ea       	ldi	r24, 0xA9	; 169
    28fa:	46 df       	rcall	.-372    	; 0x2788 <send_cmd>
    28fc:	88 23       	and	r24, r24
    28fe:	49 f0       	breq	.+18     	; 0x2912 <disk_initialize+0x9a>
					dly_us(1000);
    2900:	88 ee       	ldi	r24, 0xE8	; 232
    2902:	93 e0       	ldi	r25, 0x03	; 3
    2904:	0a de       	rcall	.-1004   	; 0x251a <dly_us>
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
    2906:	01 50       	subi	r16, 0x01	; 1
    2908:	11 09       	sbc	r17, r1
    290a:	01 15       	cp	r16, r1
    290c:	11 05       	cpc	r17, r1
    290e:	81 f7       	brne	.-32     	; 0x28f0 <disk_initialize+0x78>
    2910:	4d c0       	rjmp	.+154    	; 0x29ac <disk_initialize+0x134>
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
					dly_us(1000);
				}
				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
    2912:	01 2b       	or	r16, r17
    2914:	09 f4       	brne	.+2      	; 0x2918 <disk_initialize+0xa0>
    2916:	4c c0       	rjmp	.+152    	; 0x29b0 <disk_initialize+0x138>
    2918:	40 e0       	ldi	r20, 0x00	; 0
    291a:	50 e0       	ldi	r21, 0x00	; 0
    291c:	ba 01       	movw	r22, r20
    291e:	8a e3       	ldi	r24, 0x3A	; 58
    2920:	33 df       	rcall	.-410    	; 0x2788 <send_cmd>
    2922:	81 11       	cpse	r24, r1
    2924:	47 c0       	rjmp	.+142    	; 0x29b4 <disk_initialize+0x13c>
					rcvr_mmc(buf, 4);
    2926:	64 e0       	ldi	r22, 0x04	; 4
    2928:	70 e0       	ldi	r23, 0x00	; 0
    292a:	ce 01       	movw	r24, r28
    292c:	01 96       	adiw	r24, 0x01	; 1
    292e:	3a de       	rcall	.-908    	; 0x25a4 <rcvr_mmc>
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    2930:	89 81       	ldd	r24, Y+1	; 0x01
    2932:	86 ff       	sbrs	r24, 6
    2934:	41 c0       	rjmp	.+130    	; 0x29b8 <disk_initialize+0x140>
    2936:	0f 2e       	mov	r0, r31
    2938:	fc e0       	ldi	r31, 0x0C	; 12
    293a:	ff 2e       	mov	r15, r31
    293c:	f0 2d       	mov	r31, r0
    293e:	45 c0       	rjmp	.+138    	; 0x29ca <disk_initialize+0x152>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    2940:	40 e0       	ldi	r20, 0x00	; 0
    2942:	50 e0       	ldi	r21, 0x00	; 0
    2944:	ba 01       	movw	r22, r20
    2946:	89 ea       	ldi	r24, 0xA9	; 169
    2948:	1f df       	rcall	.-450    	; 0x2788 <send_cmd>
    294a:	82 30       	cpi	r24, 0x02	; 2
    294c:	40 f4       	brcc	.+16     	; 0x295e <disk_initialize+0xe6>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    294e:	0f 2e       	mov	r0, r31
    2950:	f9 ea       	ldi	r31, 0xA9	; 169
    2952:	ef 2e       	mov	r14, r31
    2954:	f0 2d       	mov	r31, r0
    2956:	68 94       	set
    2958:	ff 24       	eor	r15, r15
    295a:	f1 f8       	bld	r15, 1
    295c:	04 c0       	rjmp	.+8      	; 0x2966 <disk_initialize+0xee>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    295e:	ee 24       	eor	r14, r14
    2960:	e3 94       	inc	r14
    2962:	ff 24       	eor	r15, r15
    2964:	f3 94       	inc	r15
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    2966:	08 ee       	ldi	r16, 0xE8	; 232
    2968:	13 e0       	ldi	r17, 0x03	; 3
				if (send_cmd(cmd, 0) == 0) break;
    296a:	40 e0       	ldi	r20, 0x00	; 0
    296c:	50 e0       	ldi	r21, 0x00	; 0
    296e:	ba 01       	movw	r22, r20
    2970:	8e 2d       	mov	r24, r14
    2972:	0a df       	rcall	.-492    	; 0x2788 <send_cmd>
    2974:	88 23       	and	r24, r24
    2976:	49 f0       	breq	.+18     	; 0x298a <disk_initialize+0x112>
				dly_us(1000);
    2978:	88 ee       	ldi	r24, 0xE8	; 232
    297a:	93 e0       	ldi	r25, 0x03	; 3
    297c:	ce dd       	rcall	.-1124   	; 0x251a <dly_us>
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    297e:	01 50       	subi	r16, 0x01	; 1
    2980:	11 09       	sbc	r17, r1
    2982:	01 15       	cp	r16, r1
    2984:	11 05       	cpc	r17, r1
    2986:	89 f7       	brne	.-30     	; 0x296a <disk_initialize+0xf2>
    2988:	1b c0       	rjmp	.+54     	; 0x29c0 <disk_initialize+0x148>
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    298a:	01 2b       	or	r16, r17
    298c:	d9 f0       	breq	.+54     	; 0x29c4 <disk_initialize+0x14c>
    298e:	40 e0       	ldi	r20, 0x00	; 0
    2990:	52 e0       	ldi	r21, 0x02	; 2
    2992:	60 e0       	ldi	r22, 0x00	; 0
    2994:	70 e0       	ldi	r23, 0x00	; 0
    2996:	80 e1       	ldi	r24, 0x10	; 16
    2998:	f7 de       	rcall	.-530    	; 0x2788 <send_cmd>
    299a:	81 11       	cpse	r24, r1
    299c:	15 c0       	rjmp	.+42     	; 0x29c8 <disk_initialize+0x150>
    299e:	15 c0       	rjmp	.+42     	; 0x29ca <disk_initialize+0x152>
	DI_INIT();				/* Initialize port pin tied to DI */
	DO_INIT();				/* Initialize port pin tied to DO */

	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */

	ty = 0;
    29a0:	f1 2c       	mov	r15, r1
    29a2:	13 c0       	rjmp	.+38     	; 0x29ca <disk_initialize+0x152>
    29a4:	f1 2c       	mov	r15, r1
    29a6:	11 c0       	rjmp	.+34     	; 0x29ca <disk_initialize+0x152>
    29a8:	f1 2c       	mov	r15, r1
    29aa:	0f c0       	rjmp	.+30     	; 0x29ca <disk_initialize+0x152>
    29ac:	f1 2c       	mov	r15, r1
    29ae:	0d c0       	rjmp	.+26     	; 0x29ca <disk_initialize+0x152>
    29b0:	f1 2c       	mov	r15, r1
    29b2:	0b c0       	rjmp	.+22     	; 0x29ca <disk_initialize+0x152>
    29b4:	f1 2c       	mov	r15, r1
    29b6:	09 c0       	rjmp	.+18     	; 0x29ca <disk_initialize+0x152>
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
					dly_us(1000);
				}
				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
					rcvr_mmc(buf, 4);
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    29b8:	68 94       	set
    29ba:	ff 24       	eor	r15, r15
    29bc:	f2 f8       	bld	r15, 2
    29be:	05 c0       	rjmp	.+10     	; 0x29ca <disk_initialize+0x152>
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
    29c0:	f1 2c       	mov	r15, r1
    29c2:	03 c0       	rjmp	.+6      	; 0x29ca <disk_initialize+0x152>
    29c4:	f1 2c       	mov	r15, r1
    29c6:	01 c0       	rjmp	.+2      	; 0x29ca <disk_initialize+0x152>
    29c8:	f1 2c       	mov	r15, r1
		}
	}
	CardType = ty;
    29ca:	f0 92 b6 00 	sts	0x00B6, r15
	s = ty ? 0 : STA_NOINIT;
    29ce:	11 e0       	ldi	r17, 0x01	; 1
    29d0:	f1 10       	cpse	r15, r1
    29d2:	10 e0       	ldi	r17, 0x00	; 0
	Stat = s;
    29d4:	10 93 60 00 	sts	0x0060, r17

	deselect();
    29d8:	3a de       	rcall	.-908    	; 0x264e <deselect>

	return s;
    29da:	81 2f       	mov	r24, r17
    29dc:	01 c0       	rjmp	.+2      	; 0x29e0 <disk_initialize+0x168>
	BYTE n, ty, cmd, buf[4];
	UINT tmr;
	DSTATUS s;


	if (drv) return RES_NOTRDY;
    29de:	83 e0       	ldi	r24, 0x03	; 3
	Stat = s;

	deselect();

	return s;
}
    29e0:	0f 90       	pop	r0
    29e2:	0f 90       	pop	r0
    29e4:	0f 90       	pop	r0
    29e6:	0f 90       	pop	r0
    29e8:	df 91       	pop	r29
    29ea:	cf 91       	pop	r28
    29ec:	1f 91       	pop	r17
    29ee:	0f 91       	pop	r16
    29f0:	ff 90       	pop	r15
    29f2:	ef 90       	pop	r14
    29f4:	08 95       	ret

000029f6 <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    29f6:	ff 92       	push	r15
    29f8:	0f 93       	push	r16
    29fa:	1f 93       	push	r17
    29fc:	cf 93       	push	r28
    29fe:	df 93       	push	r29
    2a00:	eb 01       	movw	r28, r22

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    2a02:	81 11       	cpse	r24, r1
    2a04:	3d c0       	rjmp	.+122    	; 0x2a80 <disk_read+0x8a>
)
{
	BYTE cmd;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    2a06:	80 91 60 00 	lds	r24, 0x0060
    2a0a:	80 fd       	sbrc	r24, 0
    2a0c:	3b c0       	rjmp	.+118    	; 0x2a84 <disk_read+0x8e>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert LBA to byte address if needed */
    2a0e:	80 91 b6 00 	lds	r24, 0x00B6
    2a12:	83 fd       	sbrc	r24, 3
    2a14:	09 c0       	rjmp	.+18     	; 0x2a28 <disk_read+0x32>
    2a16:	01 2e       	mov	r0, r17
    2a18:	19 e0       	ldi	r17, 0x09	; 9
    2a1a:	22 0f       	add	r18, r18
    2a1c:	33 1f       	adc	r19, r19
    2a1e:	44 1f       	adc	r20, r20
    2a20:	55 1f       	adc	r21, r21
    2a22:	1a 95       	dec	r17
    2a24:	d1 f7       	brne	.-12     	; 0x2a1a <disk_read+0x24>
    2a26:	10 2d       	mov	r17, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    2a28:	02 30       	cpi	r16, 0x02	; 2
    2a2a:	11 05       	cpc	r17, r1
    2a2c:	28 f0       	brcs	.+10     	; 0x2a38 <disk_read+0x42>
    2a2e:	0f 2e       	mov	r0, r31
    2a30:	f2 e1       	ldi	r31, 0x12	; 18
    2a32:	ff 2e       	mov	r15, r31
    2a34:	f0 2d       	mov	r31, r0
    2a36:	04 c0       	rjmp	.+8      	; 0x2a40 <disk_read+0x4a>
    2a38:	0f 2e       	mov	r0, r31
    2a3a:	f1 e1       	ldi	r31, 0x11	; 17
    2a3c:	ff 2e       	mov	r15, r31
    2a3e:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sector) == 0) {
    2a40:	ba 01       	movw	r22, r20
    2a42:	a9 01       	movw	r20, r18
    2a44:	8f 2d       	mov	r24, r15
    2a46:	a0 de       	rcall	.-704    	; 0x2788 <send_cmd>
    2a48:	81 11       	cpse	r24, r1
    2a4a:	14 c0       	rjmp	.+40     	; 0x2a74 <disk_read+0x7e>
		do {
			if (!rcvr_datablock(buff, 512)) break;
    2a4c:	60 e0       	ldi	r22, 0x00	; 0
    2a4e:	72 e0       	ldi	r23, 0x02	; 2
    2a50:	ce 01       	movw	r24, r28
    2a52:	28 de       	rcall	.-944    	; 0x26a4 <rcvr_datablock>
    2a54:	89 2b       	or	r24, r25
    2a56:	31 f0       	breq	.+12     	; 0x2a64 <disk_read+0x6e>
			buff += 512;
    2a58:	de 5f       	subi	r29, 0xFE	; 254
		} while (--count);
    2a5a:	01 50       	subi	r16, 0x01	; 1
    2a5c:	11 09       	sbc	r17, r1
    2a5e:	01 15       	cp	r16, r1
    2a60:	11 05       	cpc	r17, r1
    2a62:	a1 f7       	brne	.-24     	; 0x2a4c <disk_read+0x56>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    2a64:	82 e1       	ldi	r24, 0x12	; 18
    2a66:	f8 12       	cpse	r15, r24
    2a68:	05 c0       	rjmp	.+10     	; 0x2a74 <disk_read+0x7e>
    2a6a:	40 e0       	ldi	r20, 0x00	; 0
    2a6c:	50 e0       	ldi	r21, 0x00	; 0
    2a6e:	ba 01       	movw	r22, r20
    2a70:	8c e0       	ldi	r24, 0x0C	; 12
    2a72:	8a de       	rcall	.-748    	; 0x2788 <send_cmd>
	}
	deselect();
    2a74:	ec dd       	rcall	.-1064   	; 0x264e <deselect>

	return count ? RES_ERROR : RES_OK;
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	01 2b       	or	r16, r17
    2a7a:	29 f4       	brne	.+10     	; 0x2a86 <disk_read+0x90>
    2a7c:	80 e0       	ldi	r24, 0x00	; 0
    2a7e:	03 c0       	rjmp	.+6      	; 0x2a86 <disk_read+0x90>
)
{
	BYTE cmd;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    2a80:	83 e0       	ldi	r24, 0x03	; 3
    2a82:	01 c0       	rjmp	.+2      	; 0x2a86 <disk_read+0x90>
    2a84:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    2a86:	df 91       	pop	r29
    2a88:	cf 91       	pop	r28
    2a8a:	1f 91       	pop	r17
    2a8c:	0f 91       	pop	r16
    2a8e:	ff 90       	pop	r15
    2a90:	08 95       	ret

00002a92 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    2a92:	cf 92       	push	r12
    2a94:	df 92       	push	r13
    2a96:	ef 92       	push	r14
    2a98:	ff 92       	push	r15
    2a9a:	0f 93       	push	r16
    2a9c:	1f 93       	push	r17
    2a9e:	cf 93       	push	r28
    2aa0:	df 93       	push	r29
    2aa2:	eb 01       	movw	r28, r22
    2aa4:	69 01       	movw	r12, r18
    2aa6:	7a 01       	movw	r14, r20

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    2aa8:	81 11       	cpse	r24, r1
    2aaa:	4b c0       	rjmp	.+150    	; 0x2b42 <disk_write+0xb0>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    2aac:	80 91 60 00 	lds	r24, 0x0060
    2ab0:	80 fd       	sbrc	r24, 0
    2ab2:	49 c0       	rjmp	.+146    	; 0x2b46 <disk_write+0xb4>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert LBA to byte address if needed */
    2ab4:	80 91 b6 00 	lds	r24, 0x00B6
    2ab8:	83 fd       	sbrc	r24, 3
    2aba:	09 c0       	rjmp	.+18     	; 0x2ace <disk_write+0x3c>
    2abc:	0b 2e       	mov	r0, r27
    2abe:	b9 e0       	ldi	r27, 0x09	; 9
    2ac0:	cc 0c       	add	r12, r12
    2ac2:	dd 1c       	adc	r13, r13
    2ac4:	ee 1c       	adc	r14, r14
    2ac6:	ff 1c       	adc	r15, r15
    2ac8:	ba 95       	dec	r27
    2aca:	d1 f7       	brne	.-12     	; 0x2ac0 <disk_write+0x2e>
    2acc:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    2ace:	01 30       	cpi	r16, 0x01	; 1
    2ad0:	11 05       	cpc	r17, r1
    2ad2:	89 f4       	brne	.+34     	; 0x2af6 <disk_write+0x64>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    2ad4:	b7 01       	movw	r22, r14
    2ad6:	a6 01       	movw	r20, r12
    2ad8:	88 e1       	ldi	r24, 0x18	; 24
    2ada:	56 de       	rcall	.-852    	; 0x2788 <send_cmd>
    2adc:	81 11       	cpse	r24, r1
    2ade:	2b c0       	rjmp	.+86     	; 0x2b36 <disk_write+0xa4>
			&& xmit_datablock(buff, 0xFE))
    2ae0:	6e ef       	ldi	r22, 0xFE	; 254
    2ae2:	ce 01       	movw	r24, r28
    2ae4:	19 de       	rcall	.-974    	; 0x2718 <xmit_datablock>
    2ae6:	31 e0       	ldi	r19, 0x01	; 1
    2ae8:	20 e0       	ldi	r18, 0x00	; 0
    2aea:	89 2b       	or	r24, r25
    2aec:	09 f0       	breq	.+2      	; 0x2af0 <disk_write+0x5e>
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	03 2f       	mov	r16, r19
    2af2:	12 2f       	mov	r17, r18
    2af4:	20 c0       	rjmp	.+64     	; 0x2b36 <disk_write+0xa4>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    2af6:	86 70       	andi	r24, 0x06	; 6
    2af8:	29 f0       	breq	.+10     	; 0x2b04 <disk_write+0x72>
    2afa:	a8 01       	movw	r20, r16
    2afc:	60 e0       	ldi	r22, 0x00	; 0
    2afe:	70 e0       	ldi	r23, 0x00	; 0
    2b00:	87 e9       	ldi	r24, 0x97	; 151
    2b02:	42 de       	rcall	.-892    	; 0x2788 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    2b04:	b7 01       	movw	r22, r14
    2b06:	a6 01       	movw	r20, r12
    2b08:	89 e1       	ldi	r24, 0x19	; 25
    2b0a:	3e de       	rcall	.-900    	; 0x2788 <send_cmd>
    2b0c:	81 11       	cpse	r24, r1
    2b0e:	13 c0       	rjmp	.+38     	; 0x2b36 <disk_write+0xa4>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    2b10:	6c ef       	ldi	r22, 0xFC	; 252
    2b12:	ce 01       	movw	r24, r28
    2b14:	01 de       	rcall	.-1022   	; 0x2718 <xmit_datablock>
    2b16:	89 2b       	or	r24, r25
    2b18:	31 f0       	breq	.+12     	; 0x2b26 <disk_write+0x94>
				buff += 512;
    2b1a:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    2b1c:	01 50       	subi	r16, 0x01	; 1
    2b1e:	11 09       	sbc	r17, r1
    2b20:	01 15       	cp	r16, r1
    2b22:	11 05       	cpc	r17, r1
    2b24:	a9 f7       	brne	.-22     	; 0x2b10 <disk_write+0x7e>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    2b26:	6d ef       	ldi	r22, 0xFD	; 253
    2b28:	80 e0       	ldi	r24, 0x00	; 0
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	f5 dd       	rcall	.-1046   	; 0x2718 <xmit_datablock>
    2b2e:	89 2b       	or	r24, r25
    2b30:	11 f4       	brne	.+4      	; 0x2b36 <disk_write+0xa4>
				count = 1;
    2b32:	01 e0       	ldi	r16, 0x01	; 1
    2b34:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	deselect();
    2b36:	8b dd       	rcall	.-1258   	; 0x264e <deselect>

	return count ? RES_ERROR : RES_OK;
    2b38:	81 e0       	ldi	r24, 0x01	; 1
    2b3a:	01 2b       	or	r16, r17
    2b3c:	29 f4       	brne	.+10     	; 0x2b48 <disk_write+0xb6>
    2b3e:	80 e0       	ldi	r24, 0x00	; 0
    2b40:	03 c0       	rjmp	.+6      	; 0x2b48 <disk_write+0xb6>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    2b42:	83 e0       	ldi	r24, 0x03	; 3
    2b44:	01 c0       	rjmp	.+2      	; 0x2b48 <disk_write+0xb6>
    2b46:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    2b48:	df 91       	pop	r29
    2b4a:	cf 91       	pop	r28
    2b4c:	1f 91       	pop	r17
    2b4e:	0f 91       	pop	r16
    2b50:	ff 90       	pop	r15
    2b52:	ef 90       	pop	r14
    2b54:	df 90       	pop	r13
    2b56:	cf 90       	pop	r12
    2b58:	08 95       	ret

00002b5a <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    2b5a:	cf 92       	push	r12
    2b5c:	df 92       	push	r13
    2b5e:	ef 92       	push	r14
    2b60:	ff 92       	push	r15
    2b62:	0f 93       	push	r16
    2b64:	1f 93       	push	r17
    2b66:	cf 93       	push	r28
    2b68:	df 93       	push	r29
    2b6a:	cd b7       	in	r28, 0x3d	; 61
    2b6c:	de b7       	in	r29, 0x3e	; 62
    2b6e:	60 97       	sbiw	r28, 0x10	; 16
    2b70:	0f b6       	in	r0, 0x3f	; 63
    2b72:	f8 94       	cli
    2b74:	de bf       	out	0x3e, r29	; 62
    2b76:	0f be       	out	0x3f, r0	; 63
    2b78:	cd bf       	out	0x3d, r28	; 61
    2b7a:	8a 01       	movw	r16, r20

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    2b7c:	81 11       	cpse	r24, r1
    2b7e:	96 c0       	rjmp	.+300    	; 0x2cac <disk_ioctl+0x152>
	DRESULT res;
	BYTE n, csd[16];
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
    2b80:	80 91 60 00 	lds	r24, 0x0060
    2b84:	80 fd       	sbrc	r24, 0
    2b86:	94 c0       	rjmp	.+296    	; 0x2cb0 <disk_ioctl+0x156>

	res = RES_ERROR;
	switch (ctrl) {
    2b88:	61 30       	cpi	r22, 0x01	; 1
    2b8a:	61 f0       	breq	.+24     	; 0x2ba4 <disk_ioctl+0x4a>
    2b8c:	20 f0       	brcs	.+8      	; 0x2b96 <disk_ioctl+0x3c>
    2b8e:	63 30       	cpi	r22, 0x03	; 3
    2b90:	09 f4       	brne	.+2      	; 0x2b94 <disk_ioctl+0x3a>
    2b92:	79 c0       	rjmp	.+242    	; 0x2c86 <disk_ioctl+0x12c>
    2b94:	83 c0       	rjmp	.+262    	; 0x2c9c <disk_ioctl+0x142>
		case CTRL_SYNC :		/* Make sure that no pending write process */
			if (select()) res = RES_OK;
    2b96:	6a dd       	rcall	.-1324   	; 0x266c <select>
    2b98:	11 e0       	ldi	r17, 0x01	; 1
    2b9a:	89 2b       	or	r24, r25
    2b9c:	09 f4       	brne	.+2      	; 0x2ba0 <disk_ioctl+0x46>
    2b9e:	83 c0       	rjmp	.+262    	; 0x2ca6 <disk_ioctl+0x14c>
    2ba0:	10 e0       	ldi	r17, 0x00	; 0
    2ba2:	81 c0       	rjmp	.+258    	; 0x2ca6 <disk_ioctl+0x14c>
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    2ba4:	40 e0       	ldi	r20, 0x00	; 0
    2ba6:	50 e0       	ldi	r21, 0x00	; 0
    2ba8:	ba 01       	movw	r22, r20
    2baa:	89 e0       	ldi	r24, 0x09	; 9
    2bac:	ed dd       	rcall	.-1062   	; 0x2788 <send_cmd>
    2bae:	81 11       	cpse	r24, r1
    2bb0:	77 c0       	rjmp	.+238    	; 0x2ca0 <disk_ioctl+0x146>
    2bb2:	60 e1       	ldi	r22, 0x10	; 16
    2bb4:	70 e0       	ldi	r23, 0x00	; 0
    2bb6:	ce 01       	movw	r24, r28
    2bb8:	01 96       	adiw	r24, 0x01	; 1
    2bba:	74 dd       	rcall	.-1304   	; 0x26a4 <rcvr_datablock>
    2bbc:	89 2b       	or	r24, r25
    2bbe:	09 f4       	brne	.+2      	; 0x2bc2 <disk_ioctl+0x68>
    2bc0:	71 c0       	rjmp	.+226    	; 0x2ca4 <disk_ioctl+0x14a>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    2bc2:	89 81       	ldd	r24, Y+1	; 0x01
    2bc4:	82 95       	swap	r24
    2bc6:	86 95       	lsr	r24
    2bc8:	86 95       	lsr	r24
    2bca:	83 70       	andi	r24, 0x03	; 3
    2bcc:	81 30       	cpi	r24, 0x01	; 1
    2bce:	31 f5       	brne	.+76     	; 0x2c1c <disk_ioctl+0xc2>
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    2bd0:	88 85       	ldd	r24, Y+8	; 0x08
    2bd2:	8f 73       	andi	r24, 0x3F	; 63
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	a0 e0       	ldi	r26, 0x00	; 0
    2bd8:	b0 e0       	ldi	r27, 0x00	; 0
    2bda:	dc 01       	movw	r26, r24
    2bdc:	99 27       	eor	r25, r25
    2bde:	88 27       	eor	r24, r24
    2be0:	01 96       	adiw	r24, 0x01	; 1
    2be2:	a1 1d       	adc	r26, r1
    2be4:	b1 1d       	adc	r27, r1
    2be6:	29 85       	ldd	r18, Y+9	; 0x09
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	32 2f       	mov	r19, r18
    2bec:	22 27       	eor	r18, r18
    2bee:	4a 85       	ldd	r20, Y+10	; 0x0a
    2bf0:	24 0f       	add	r18, r20
    2bf2:	31 1d       	adc	r19, r1
    2bf4:	82 0f       	add	r24, r18
    2bf6:	93 1f       	adc	r25, r19
    2bf8:	a1 1d       	adc	r26, r1
    2bfa:	b1 1d       	adc	r27, r1
					*(DWORD*)buff = cs << 10;
    2bfc:	07 2e       	mov	r0, r23
    2bfe:	7a e0       	ldi	r23, 0x0A	; 10
    2c00:	88 0f       	add	r24, r24
    2c02:	99 1f       	adc	r25, r25
    2c04:	aa 1f       	adc	r26, r26
    2c06:	bb 1f       	adc	r27, r27
    2c08:	7a 95       	dec	r23
    2c0a:	d1 f7       	brne	.-12     	; 0x2c00 <disk_ioctl+0xa6>
    2c0c:	70 2d       	mov	r23, r0
    2c0e:	f8 01       	movw	r30, r16
    2c10:	80 83       	st	Z, r24
    2c12:	91 83       	std	Z+1, r25	; 0x01
    2c14:	a2 83       	std	Z+2, r26	; 0x02
    2c16:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = cs << (n - 9);
				}
				res = RES_OK;
    2c18:	10 e0       	ldi	r17, 0x00	; 0
    2c1a:	45 c0       	rjmp	.+138    	; 0x2ca6 <disk_ioctl+0x14c>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = cs << 10;
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    2c1c:	49 85       	ldd	r20, Y+9	; 0x09
    2c1e:	42 95       	swap	r20
    2c20:	46 95       	lsr	r20
    2c22:	46 95       	lsr	r20
    2c24:	43 70       	andi	r20, 0x03	; 3
    2c26:	88 85       	ldd	r24, Y+8	; 0x08
    2c28:	50 e0       	ldi	r21, 0x00	; 0
    2c2a:	f4 e0       	ldi	r31, 0x04	; 4
    2c2c:	8f 9f       	mul	r24, r31
    2c2e:	40 0d       	add	r20, r0
    2c30:	51 1d       	adc	r21, r1
    2c32:	11 24       	eor	r1, r1
    2c34:	4f 5f       	subi	r20, 0xFF	; 255
    2c36:	5f 4f       	sbci	r21, 0xFF	; 255
    2c38:	8f 81       	ldd	r24, Y+7	; 0x07
    2c3a:	83 70       	andi	r24, 0x03	; 3
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	98 2f       	mov	r25, r24
    2c40:	88 27       	eor	r24, r24
    2c42:	99 0f       	add	r25, r25
    2c44:	99 0f       	add	r25, r25
    2c46:	48 0f       	add	r20, r24
    2c48:	59 1f       	adc	r21, r25
    2c4a:	60 e0       	ldi	r22, 0x00	; 0
    2c4c:	70 e0       	ldi	r23, 0x00	; 0
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = cs << 10;
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    2c4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c50:	9f 70       	andi	r25, 0x0F	; 15
    2c52:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c54:	88 1f       	adc	r24, r24
    2c56:	88 27       	eor	r24, r24
    2c58:	88 1f       	adc	r24, r24
    2c5a:	89 0f       	add	r24, r25
    2c5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c5e:	93 70       	andi	r25, 0x03	; 3
    2c60:	99 0f       	add	r25, r25
    2c62:	89 0f       	add	r24, r25
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = cs << (n - 9);
    2c64:	87 50       	subi	r24, 0x07	; 7
    2c66:	6a 01       	movw	r12, r20
    2c68:	7b 01       	movw	r14, r22
    2c6a:	04 c0       	rjmp	.+8      	; 0x2c74 <disk_ioctl+0x11a>
    2c6c:	cc 0c       	add	r12, r12
    2c6e:	dd 1c       	adc	r13, r13
    2c70:	ee 1c       	adc	r14, r14
    2c72:	ff 1c       	adc	r15, r15
    2c74:	8a 95       	dec	r24
    2c76:	d2 f7       	brpl	.-12     	; 0x2c6c <disk_ioctl+0x112>
    2c78:	f8 01       	movw	r30, r16
    2c7a:	c0 82       	st	Z, r12
    2c7c:	d1 82       	std	Z+1, r13	; 0x01
    2c7e:	e2 82       	std	Z+2, r14	; 0x02
    2c80:	f3 82       	std	Z+3, r15	; 0x03
				}
				res = RES_OK;
    2c82:	10 e0       	ldi	r17, 0x00	; 0
    2c84:	10 c0       	rjmp	.+32     	; 0x2ca6 <disk_ioctl+0x14c>
			}
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			*(DWORD*)buff = 128;
    2c86:	80 e8       	ldi	r24, 0x80	; 128
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	a0 e0       	ldi	r26, 0x00	; 0
    2c8c:	b0 e0       	ldi	r27, 0x00	; 0
    2c8e:	fa 01       	movw	r30, r20
    2c90:	80 83       	st	Z, r24
    2c92:	91 83       	std	Z+1, r25	; 0x01
    2c94:	a2 83       	std	Z+2, r26	; 0x02
    2c96:	b3 83       	std	Z+3, r27	; 0x03
			res = RES_OK;
    2c98:	10 e0       	ldi	r17, 0x00	; 0
			break;
    2c9a:	05 c0       	rjmp	.+10     	; 0x2ca6 <disk_ioctl+0x14c>

		default:
			res = RES_PARERR;
    2c9c:	14 e0       	ldi	r17, 0x04	; 4
    2c9e:	03 c0       	rjmp	.+6      	; 0x2ca6 <disk_ioctl+0x14c>
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */

	res = RES_ERROR;
    2ca0:	11 e0       	ldi	r17, 0x01	; 1
    2ca2:	01 c0       	rjmp	.+2      	; 0x2ca6 <disk_ioctl+0x14c>
    2ca4:	11 e0       	ldi	r17, 0x01	; 1

		default:
			res = RES_PARERR;
	}

	deselect();
    2ca6:	d3 dc       	rcall	.-1626   	; 0x264e <deselect>

	return res;
    2ca8:	81 2f       	mov	r24, r17
    2caa:	03 c0       	rjmp	.+6      	; 0x2cb2 <disk_ioctl+0x158>
	DRESULT res;
	BYTE n, csd[16];
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
    2cac:	83 e0       	ldi	r24, 0x03	; 3
    2cae:	01 c0       	rjmp	.+2      	; 0x2cb2 <disk_ioctl+0x158>
    2cb0:	83 e0       	ldi	r24, 0x03	; 3
	}

	deselect();

	return res;
}
    2cb2:	60 96       	adiw	r28, 0x10	; 16
    2cb4:	0f b6       	in	r0, 0x3f	; 63
    2cb6:	f8 94       	cli
    2cb8:	de bf       	out	0x3e, r29	; 62
    2cba:	0f be       	out	0x3f, r0	; 63
    2cbc:	cd bf       	out	0x3d, r28	; 61
    2cbe:	df 91       	pop	r29
    2cc0:	cf 91       	pop	r28
    2cc2:	1f 91       	pop	r17
    2cc4:	0f 91       	pop	r16
    2cc6:	ff 90       	pop	r15
    2cc8:	ef 90       	pop	r14
    2cca:	df 90       	pop	r13
    2ccc:	cf 90       	pop	r12
    2cce:	08 95       	ret

00002cd0 <__udivmodsi4>:
    2cd0:	a1 e2       	ldi	r26, 0x21	; 33
    2cd2:	1a 2e       	mov	r1, r26
    2cd4:	aa 1b       	sub	r26, r26
    2cd6:	bb 1b       	sub	r27, r27
    2cd8:	fd 01       	movw	r30, r26
    2cda:	0d c0       	rjmp	.+26     	; 0x2cf6 <__udivmodsi4_ep>

00002cdc <__udivmodsi4_loop>:
    2cdc:	aa 1f       	adc	r26, r26
    2cde:	bb 1f       	adc	r27, r27
    2ce0:	ee 1f       	adc	r30, r30
    2ce2:	ff 1f       	adc	r31, r31
    2ce4:	a2 17       	cp	r26, r18
    2ce6:	b3 07       	cpc	r27, r19
    2ce8:	e4 07       	cpc	r30, r20
    2cea:	f5 07       	cpc	r31, r21
    2cec:	20 f0       	brcs	.+8      	; 0x2cf6 <__udivmodsi4_ep>
    2cee:	a2 1b       	sub	r26, r18
    2cf0:	b3 0b       	sbc	r27, r19
    2cf2:	e4 0b       	sbc	r30, r20
    2cf4:	f5 0b       	sbc	r31, r21

00002cf6 <__udivmodsi4_ep>:
    2cf6:	66 1f       	adc	r22, r22
    2cf8:	77 1f       	adc	r23, r23
    2cfa:	88 1f       	adc	r24, r24
    2cfc:	99 1f       	adc	r25, r25
    2cfe:	1a 94       	dec	r1
    2d00:	69 f7       	brne	.-38     	; 0x2cdc <__udivmodsi4_loop>
    2d02:	60 95       	com	r22
    2d04:	70 95       	com	r23
    2d06:	80 95       	com	r24
    2d08:	90 95       	com	r25
    2d0a:	9b 01       	movw	r18, r22
    2d0c:	ac 01       	movw	r20, r24
    2d0e:	bd 01       	movw	r22, r26
    2d10:	cf 01       	movw	r24, r30
    2d12:	08 95       	ret

00002d14 <__muluhisi3>:
    2d14:	09 d0       	rcall	.+18     	; 0x2d28 <__umulhisi3>
    2d16:	a5 9f       	mul	r26, r21
    2d18:	90 0d       	add	r25, r0
    2d1a:	b4 9f       	mul	r27, r20
    2d1c:	90 0d       	add	r25, r0
    2d1e:	a4 9f       	mul	r26, r20
    2d20:	80 0d       	add	r24, r0
    2d22:	91 1d       	adc	r25, r1
    2d24:	11 24       	eor	r1, r1
    2d26:	08 95       	ret

00002d28 <__umulhisi3>:
    2d28:	a2 9f       	mul	r26, r18
    2d2a:	b0 01       	movw	r22, r0
    2d2c:	b3 9f       	mul	r27, r19
    2d2e:	c0 01       	movw	r24, r0
    2d30:	a3 9f       	mul	r26, r19
    2d32:	70 0d       	add	r23, r0
    2d34:	81 1d       	adc	r24, r1
    2d36:	11 24       	eor	r1, r1
    2d38:	91 1d       	adc	r25, r1
    2d3a:	b2 9f       	mul	r27, r18
    2d3c:	70 0d       	add	r23, r0
    2d3e:	81 1d       	adc	r24, r1
    2d40:	11 24       	eor	r1, r1
    2d42:	91 1d       	adc	r25, r1
    2d44:	08 95       	ret

00002d46 <sprintf>:
    2d46:	ae e0       	ldi	r26, 0x0E	; 14
    2d48:	b0 e0       	ldi	r27, 0x00	; 0
    2d4a:	e8 ea       	ldi	r30, 0xA8	; 168
    2d4c:	f6 e1       	ldi	r31, 0x16	; 22
    2d4e:	91 c2       	rjmp	.+1314   	; 0x3272 <__prologue_saves__+0x1c>
    2d50:	0d 89       	ldd	r16, Y+21	; 0x15
    2d52:	1e 89       	ldd	r17, Y+22	; 0x16
    2d54:	86 e0       	ldi	r24, 0x06	; 6
    2d56:	8c 83       	std	Y+4, r24	; 0x04
    2d58:	1a 83       	std	Y+2, r17	; 0x02
    2d5a:	09 83       	std	Y+1, r16	; 0x01
    2d5c:	8f ef       	ldi	r24, 0xFF	; 255
    2d5e:	9f e7       	ldi	r25, 0x7F	; 127
    2d60:	9e 83       	std	Y+6, r25	; 0x06
    2d62:	8d 83       	std	Y+5, r24	; 0x05
    2d64:	ae 01       	movw	r20, r28
    2d66:	47 5e       	subi	r20, 0xE7	; 231
    2d68:	5f 4f       	sbci	r21, 0xFF	; 255
    2d6a:	6f 89       	ldd	r22, Y+23	; 0x17
    2d6c:	78 8d       	ldd	r23, Y+24	; 0x18
    2d6e:	ce 01       	movw	r24, r28
    2d70:	01 96       	adiw	r24, 0x01	; 1
    2d72:	08 d0       	rcall	.+16     	; 0x2d84 <vfprintf>
    2d74:	ef 81       	ldd	r30, Y+7	; 0x07
    2d76:	f8 85       	ldd	r31, Y+8	; 0x08
    2d78:	e0 0f       	add	r30, r16
    2d7a:	f1 1f       	adc	r31, r17
    2d7c:	10 82       	st	Z, r1
    2d7e:	2e 96       	adiw	r28, 0x0e	; 14
    2d80:	e4 e0       	ldi	r30, 0x04	; 4
    2d82:	93 c2       	rjmp	.+1318   	; 0x32aa <__epilogue_restores__+0x1c>

00002d84 <vfprintf>:
    2d84:	ac e0       	ldi	r26, 0x0C	; 12
    2d86:	b0 e0       	ldi	r27, 0x00	; 0
    2d88:	e7 ec       	ldi	r30, 0xC7	; 199
    2d8a:	f6 e1       	ldi	r31, 0x16	; 22
    2d8c:	64 c2       	rjmp	.+1224   	; 0x3256 <__prologue_saves__>
    2d8e:	7c 01       	movw	r14, r24
    2d90:	6b 01       	movw	r12, r22
    2d92:	8a 01       	movw	r16, r20
    2d94:	fc 01       	movw	r30, r24
    2d96:	17 82       	std	Z+7, r1	; 0x07
    2d98:	16 82       	std	Z+6, r1	; 0x06
    2d9a:	83 81       	ldd	r24, Z+3	; 0x03
    2d9c:	81 ff       	sbrs	r24, 1
    2d9e:	b0 c1       	rjmp	.+864    	; 0x3100 <vfprintf+0x37c>
    2da0:	ce 01       	movw	r24, r28
    2da2:	01 96       	adiw	r24, 0x01	; 1
    2da4:	4c 01       	movw	r8, r24
    2da6:	f7 01       	movw	r30, r14
    2da8:	93 81       	ldd	r25, Z+3	; 0x03
    2daa:	f6 01       	movw	r30, r12
    2dac:	93 fd       	sbrc	r25, 3
    2dae:	85 91       	lpm	r24, Z+
    2db0:	93 ff       	sbrs	r25, 3
    2db2:	81 91       	ld	r24, Z+
    2db4:	6f 01       	movw	r12, r30
    2db6:	88 23       	and	r24, r24
    2db8:	09 f4       	brne	.+2      	; 0x2dbc <vfprintf+0x38>
    2dba:	9e c1       	rjmp	.+828    	; 0x30f8 <vfprintf+0x374>
    2dbc:	85 32       	cpi	r24, 0x25	; 37
    2dbe:	39 f4       	brne	.+14     	; 0x2dce <vfprintf+0x4a>
    2dc0:	93 fd       	sbrc	r25, 3
    2dc2:	85 91       	lpm	r24, Z+
    2dc4:	93 ff       	sbrs	r25, 3
    2dc6:	81 91       	ld	r24, Z+
    2dc8:	6f 01       	movw	r12, r30
    2dca:	85 32       	cpi	r24, 0x25	; 37
    2dcc:	21 f4       	brne	.+8      	; 0x2dd6 <vfprintf+0x52>
    2dce:	b7 01       	movw	r22, r14
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	b1 d1       	rcall	.+866    	; 0x3136 <fputc>
    2dd4:	e8 cf       	rjmp	.-48     	; 0x2da6 <vfprintf+0x22>
    2dd6:	51 2c       	mov	r5, r1
    2dd8:	31 2c       	mov	r3, r1
    2dda:	20 e0       	ldi	r18, 0x00	; 0
    2ddc:	20 32       	cpi	r18, 0x20	; 32
    2dde:	a0 f4       	brcc	.+40     	; 0x2e08 <vfprintf+0x84>
    2de0:	8b 32       	cpi	r24, 0x2B	; 43
    2de2:	69 f0       	breq	.+26     	; 0x2dfe <vfprintf+0x7a>
    2de4:	30 f4       	brcc	.+12     	; 0x2df2 <vfprintf+0x6e>
    2de6:	80 32       	cpi	r24, 0x20	; 32
    2de8:	59 f0       	breq	.+22     	; 0x2e00 <vfprintf+0x7c>
    2dea:	83 32       	cpi	r24, 0x23	; 35
    2dec:	69 f4       	brne	.+26     	; 0x2e08 <vfprintf+0x84>
    2dee:	20 61       	ori	r18, 0x10	; 16
    2df0:	2c c0       	rjmp	.+88     	; 0x2e4a <vfprintf+0xc6>
    2df2:	8d 32       	cpi	r24, 0x2D	; 45
    2df4:	39 f0       	breq	.+14     	; 0x2e04 <vfprintf+0x80>
    2df6:	80 33       	cpi	r24, 0x30	; 48
    2df8:	39 f4       	brne	.+14     	; 0x2e08 <vfprintf+0x84>
    2dfa:	21 60       	ori	r18, 0x01	; 1
    2dfc:	26 c0       	rjmp	.+76     	; 0x2e4a <vfprintf+0xc6>
    2dfe:	22 60       	ori	r18, 0x02	; 2
    2e00:	24 60       	ori	r18, 0x04	; 4
    2e02:	23 c0       	rjmp	.+70     	; 0x2e4a <vfprintf+0xc6>
    2e04:	28 60       	ori	r18, 0x08	; 8
    2e06:	21 c0       	rjmp	.+66     	; 0x2e4a <vfprintf+0xc6>
    2e08:	27 fd       	sbrc	r18, 7
    2e0a:	27 c0       	rjmp	.+78     	; 0x2e5a <vfprintf+0xd6>
    2e0c:	30 ed       	ldi	r19, 0xD0	; 208
    2e0e:	38 0f       	add	r19, r24
    2e10:	3a 30       	cpi	r19, 0x0A	; 10
    2e12:	78 f4       	brcc	.+30     	; 0x2e32 <vfprintf+0xae>
    2e14:	26 ff       	sbrs	r18, 6
    2e16:	06 c0       	rjmp	.+12     	; 0x2e24 <vfprintf+0xa0>
    2e18:	fa e0       	ldi	r31, 0x0A	; 10
    2e1a:	5f 9e       	mul	r5, r31
    2e1c:	30 0d       	add	r19, r0
    2e1e:	11 24       	eor	r1, r1
    2e20:	53 2e       	mov	r5, r19
    2e22:	13 c0       	rjmp	.+38     	; 0x2e4a <vfprintf+0xc6>
    2e24:	8a e0       	ldi	r24, 0x0A	; 10
    2e26:	38 9e       	mul	r3, r24
    2e28:	30 0d       	add	r19, r0
    2e2a:	11 24       	eor	r1, r1
    2e2c:	33 2e       	mov	r3, r19
    2e2e:	20 62       	ori	r18, 0x20	; 32
    2e30:	0c c0       	rjmp	.+24     	; 0x2e4a <vfprintf+0xc6>
    2e32:	8e 32       	cpi	r24, 0x2E	; 46
    2e34:	21 f4       	brne	.+8      	; 0x2e3e <vfprintf+0xba>
    2e36:	26 fd       	sbrc	r18, 6
    2e38:	5f c1       	rjmp	.+702    	; 0x30f8 <vfprintf+0x374>
    2e3a:	20 64       	ori	r18, 0x40	; 64
    2e3c:	06 c0       	rjmp	.+12     	; 0x2e4a <vfprintf+0xc6>
    2e3e:	8c 36       	cpi	r24, 0x6C	; 108
    2e40:	11 f4       	brne	.+4      	; 0x2e46 <vfprintf+0xc2>
    2e42:	20 68       	ori	r18, 0x80	; 128
    2e44:	02 c0       	rjmp	.+4      	; 0x2e4a <vfprintf+0xc6>
    2e46:	88 36       	cpi	r24, 0x68	; 104
    2e48:	41 f4       	brne	.+16     	; 0x2e5a <vfprintf+0xd6>
    2e4a:	f6 01       	movw	r30, r12
    2e4c:	93 fd       	sbrc	r25, 3
    2e4e:	85 91       	lpm	r24, Z+
    2e50:	93 ff       	sbrs	r25, 3
    2e52:	81 91       	ld	r24, Z+
    2e54:	6f 01       	movw	r12, r30
    2e56:	81 11       	cpse	r24, r1
    2e58:	c1 cf       	rjmp	.-126    	; 0x2ddc <vfprintf+0x58>
    2e5a:	98 2f       	mov	r25, r24
    2e5c:	9f 7d       	andi	r25, 0xDF	; 223
    2e5e:	95 54       	subi	r25, 0x45	; 69
    2e60:	93 30       	cpi	r25, 0x03	; 3
    2e62:	28 f4       	brcc	.+10     	; 0x2e6e <vfprintf+0xea>
    2e64:	0c 5f       	subi	r16, 0xFC	; 252
    2e66:	1f 4f       	sbci	r17, 0xFF	; 255
    2e68:	ff e3       	ldi	r31, 0x3F	; 63
    2e6a:	f9 83       	std	Y+1, r31	; 0x01
    2e6c:	0d c0       	rjmp	.+26     	; 0x2e88 <vfprintf+0x104>
    2e6e:	83 36       	cpi	r24, 0x63	; 99
    2e70:	31 f0       	breq	.+12     	; 0x2e7e <vfprintf+0xfa>
    2e72:	83 37       	cpi	r24, 0x73	; 115
    2e74:	71 f0       	breq	.+28     	; 0x2e92 <vfprintf+0x10e>
    2e76:	83 35       	cpi	r24, 0x53	; 83
    2e78:	09 f0       	breq	.+2      	; 0x2e7c <vfprintf+0xf8>
    2e7a:	57 c0       	rjmp	.+174    	; 0x2f2a <vfprintf+0x1a6>
    2e7c:	21 c0       	rjmp	.+66     	; 0x2ec0 <vfprintf+0x13c>
    2e7e:	f8 01       	movw	r30, r16
    2e80:	80 81       	ld	r24, Z
    2e82:	89 83       	std	Y+1, r24	; 0x01
    2e84:	0e 5f       	subi	r16, 0xFE	; 254
    2e86:	1f 4f       	sbci	r17, 0xFF	; 255
    2e88:	44 24       	eor	r4, r4
    2e8a:	43 94       	inc	r4
    2e8c:	51 2c       	mov	r5, r1
    2e8e:	54 01       	movw	r10, r8
    2e90:	14 c0       	rjmp	.+40     	; 0x2eba <vfprintf+0x136>
    2e92:	38 01       	movw	r6, r16
    2e94:	f2 e0       	ldi	r31, 0x02	; 2
    2e96:	6f 0e       	add	r6, r31
    2e98:	71 1c       	adc	r7, r1
    2e9a:	f8 01       	movw	r30, r16
    2e9c:	a0 80       	ld	r10, Z
    2e9e:	b1 80       	ldd	r11, Z+1	; 0x01
    2ea0:	26 ff       	sbrs	r18, 6
    2ea2:	03 c0       	rjmp	.+6      	; 0x2eaa <vfprintf+0x126>
    2ea4:	65 2d       	mov	r22, r5
    2ea6:	70 e0       	ldi	r23, 0x00	; 0
    2ea8:	02 c0       	rjmp	.+4      	; 0x2eae <vfprintf+0x12a>
    2eaa:	6f ef       	ldi	r22, 0xFF	; 255
    2eac:	7f ef       	ldi	r23, 0xFF	; 255
    2eae:	c5 01       	movw	r24, r10
    2eb0:	2c 87       	std	Y+12, r18	; 0x0c
    2eb2:	36 d1       	rcall	.+620    	; 0x3120 <strnlen>
    2eb4:	2c 01       	movw	r4, r24
    2eb6:	83 01       	movw	r16, r6
    2eb8:	2c 85       	ldd	r18, Y+12	; 0x0c
    2eba:	2f 77       	andi	r18, 0x7F	; 127
    2ebc:	22 2e       	mov	r2, r18
    2ebe:	16 c0       	rjmp	.+44     	; 0x2eec <vfprintf+0x168>
    2ec0:	38 01       	movw	r6, r16
    2ec2:	f2 e0       	ldi	r31, 0x02	; 2
    2ec4:	6f 0e       	add	r6, r31
    2ec6:	71 1c       	adc	r7, r1
    2ec8:	f8 01       	movw	r30, r16
    2eca:	a0 80       	ld	r10, Z
    2ecc:	b1 80       	ldd	r11, Z+1	; 0x01
    2ece:	26 ff       	sbrs	r18, 6
    2ed0:	03 c0       	rjmp	.+6      	; 0x2ed8 <vfprintf+0x154>
    2ed2:	65 2d       	mov	r22, r5
    2ed4:	70 e0       	ldi	r23, 0x00	; 0
    2ed6:	02 c0       	rjmp	.+4      	; 0x2edc <vfprintf+0x158>
    2ed8:	6f ef       	ldi	r22, 0xFF	; 255
    2eda:	7f ef       	ldi	r23, 0xFF	; 255
    2edc:	c5 01       	movw	r24, r10
    2ede:	2c 87       	std	Y+12, r18	; 0x0c
    2ee0:	14 d1       	rcall	.+552    	; 0x310a <strnlen_P>
    2ee2:	2c 01       	movw	r4, r24
    2ee4:	2c 85       	ldd	r18, Y+12	; 0x0c
    2ee6:	20 68       	ori	r18, 0x80	; 128
    2ee8:	22 2e       	mov	r2, r18
    2eea:	83 01       	movw	r16, r6
    2eec:	23 fc       	sbrc	r2, 3
    2eee:	19 c0       	rjmp	.+50     	; 0x2f22 <vfprintf+0x19e>
    2ef0:	83 2d       	mov	r24, r3
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	48 16       	cp	r4, r24
    2ef6:	59 06       	cpc	r5, r25
    2ef8:	a0 f4       	brcc	.+40     	; 0x2f22 <vfprintf+0x19e>
    2efa:	b7 01       	movw	r22, r14
    2efc:	80 e2       	ldi	r24, 0x20	; 32
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	1a d1       	rcall	.+564    	; 0x3136 <fputc>
    2f02:	3a 94       	dec	r3
    2f04:	f5 cf       	rjmp	.-22     	; 0x2ef0 <vfprintf+0x16c>
    2f06:	f5 01       	movw	r30, r10
    2f08:	27 fc       	sbrc	r2, 7
    2f0a:	85 91       	lpm	r24, Z+
    2f0c:	27 fe       	sbrs	r2, 7
    2f0e:	81 91       	ld	r24, Z+
    2f10:	5f 01       	movw	r10, r30
    2f12:	b7 01       	movw	r22, r14
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	0f d1       	rcall	.+542    	; 0x3136 <fputc>
    2f18:	31 10       	cpse	r3, r1
    2f1a:	3a 94       	dec	r3
    2f1c:	f1 e0       	ldi	r31, 0x01	; 1
    2f1e:	4f 1a       	sub	r4, r31
    2f20:	51 08       	sbc	r5, r1
    2f22:	41 14       	cp	r4, r1
    2f24:	51 04       	cpc	r5, r1
    2f26:	79 f7       	brne	.-34     	; 0x2f06 <vfprintf+0x182>
    2f28:	de c0       	rjmp	.+444    	; 0x30e6 <vfprintf+0x362>
    2f2a:	84 36       	cpi	r24, 0x64	; 100
    2f2c:	11 f0       	breq	.+4      	; 0x2f32 <vfprintf+0x1ae>
    2f2e:	89 36       	cpi	r24, 0x69	; 105
    2f30:	31 f5       	brne	.+76     	; 0x2f7e <vfprintf+0x1fa>
    2f32:	f8 01       	movw	r30, r16
    2f34:	27 ff       	sbrs	r18, 7
    2f36:	07 c0       	rjmp	.+14     	; 0x2f46 <vfprintf+0x1c2>
    2f38:	60 81       	ld	r22, Z
    2f3a:	71 81       	ldd	r23, Z+1	; 0x01
    2f3c:	82 81       	ldd	r24, Z+2	; 0x02
    2f3e:	93 81       	ldd	r25, Z+3	; 0x03
    2f40:	0c 5f       	subi	r16, 0xFC	; 252
    2f42:	1f 4f       	sbci	r17, 0xFF	; 255
    2f44:	08 c0       	rjmp	.+16     	; 0x2f56 <vfprintf+0x1d2>
    2f46:	60 81       	ld	r22, Z
    2f48:	71 81       	ldd	r23, Z+1	; 0x01
    2f4a:	88 27       	eor	r24, r24
    2f4c:	77 fd       	sbrc	r23, 7
    2f4e:	80 95       	com	r24
    2f50:	98 2f       	mov	r25, r24
    2f52:	0e 5f       	subi	r16, 0xFE	; 254
    2f54:	1f 4f       	sbci	r17, 0xFF	; 255
    2f56:	2f 76       	andi	r18, 0x6F	; 111
    2f58:	b2 2e       	mov	r11, r18
    2f5a:	97 ff       	sbrs	r25, 7
    2f5c:	09 c0       	rjmp	.+18     	; 0x2f70 <vfprintf+0x1ec>
    2f5e:	90 95       	com	r25
    2f60:	80 95       	com	r24
    2f62:	70 95       	com	r23
    2f64:	61 95       	neg	r22
    2f66:	7f 4f       	sbci	r23, 0xFF	; 255
    2f68:	8f 4f       	sbci	r24, 0xFF	; 255
    2f6a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f6c:	20 68       	ori	r18, 0x80	; 128
    2f6e:	b2 2e       	mov	r11, r18
    2f70:	2a e0       	ldi	r18, 0x0A	; 10
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	a4 01       	movw	r20, r8
    2f76:	11 d1       	rcall	.+546    	; 0x319a <__ultoa_invert>
    2f78:	a8 2e       	mov	r10, r24
    2f7a:	a8 18       	sub	r10, r8
    2f7c:	43 c0       	rjmp	.+134    	; 0x3004 <vfprintf+0x280>
    2f7e:	85 37       	cpi	r24, 0x75	; 117
    2f80:	29 f4       	brne	.+10     	; 0x2f8c <vfprintf+0x208>
    2f82:	2f 7e       	andi	r18, 0xEF	; 239
    2f84:	b2 2e       	mov	r11, r18
    2f86:	2a e0       	ldi	r18, 0x0A	; 10
    2f88:	30 e0       	ldi	r19, 0x00	; 0
    2f8a:	25 c0       	rjmp	.+74     	; 0x2fd6 <vfprintf+0x252>
    2f8c:	f2 2f       	mov	r31, r18
    2f8e:	f9 7f       	andi	r31, 0xF9	; 249
    2f90:	bf 2e       	mov	r11, r31
    2f92:	8f 36       	cpi	r24, 0x6F	; 111
    2f94:	c1 f0       	breq	.+48     	; 0x2fc6 <vfprintf+0x242>
    2f96:	18 f4       	brcc	.+6      	; 0x2f9e <vfprintf+0x21a>
    2f98:	88 35       	cpi	r24, 0x58	; 88
    2f9a:	79 f0       	breq	.+30     	; 0x2fba <vfprintf+0x236>
    2f9c:	ad c0       	rjmp	.+346    	; 0x30f8 <vfprintf+0x374>
    2f9e:	80 37       	cpi	r24, 0x70	; 112
    2fa0:	19 f0       	breq	.+6      	; 0x2fa8 <vfprintf+0x224>
    2fa2:	88 37       	cpi	r24, 0x78	; 120
    2fa4:	21 f0       	breq	.+8      	; 0x2fae <vfprintf+0x22a>
    2fa6:	a8 c0       	rjmp	.+336    	; 0x30f8 <vfprintf+0x374>
    2fa8:	2f 2f       	mov	r18, r31
    2faa:	20 61       	ori	r18, 0x10	; 16
    2fac:	b2 2e       	mov	r11, r18
    2fae:	b4 fe       	sbrs	r11, 4
    2fb0:	0d c0       	rjmp	.+26     	; 0x2fcc <vfprintf+0x248>
    2fb2:	8b 2d       	mov	r24, r11
    2fb4:	84 60       	ori	r24, 0x04	; 4
    2fb6:	b8 2e       	mov	r11, r24
    2fb8:	09 c0       	rjmp	.+18     	; 0x2fcc <vfprintf+0x248>
    2fba:	24 ff       	sbrs	r18, 4
    2fbc:	0a c0       	rjmp	.+20     	; 0x2fd2 <vfprintf+0x24e>
    2fbe:	9f 2f       	mov	r25, r31
    2fc0:	96 60       	ori	r25, 0x06	; 6
    2fc2:	b9 2e       	mov	r11, r25
    2fc4:	06 c0       	rjmp	.+12     	; 0x2fd2 <vfprintf+0x24e>
    2fc6:	28 e0       	ldi	r18, 0x08	; 8
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	05 c0       	rjmp	.+10     	; 0x2fd6 <vfprintf+0x252>
    2fcc:	20 e1       	ldi	r18, 0x10	; 16
    2fce:	30 e0       	ldi	r19, 0x00	; 0
    2fd0:	02 c0       	rjmp	.+4      	; 0x2fd6 <vfprintf+0x252>
    2fd2:	20 e1       	ldi	r18, 0x10	; 16
    2fd4:	32 e0       	ldi	r19, 0x02	; 2
    2fd6:	f8 01       	movw	r30, r16
    2fd8:	b7 fe       	sbrs	r11, 7
    2fda:	07 c0       	rjmp	.+14     	; 0x2fea <vfprintf+0x266>
    2fdc:	60 81       	ld	r22, Z
    2fde:	71 81       	ldd	r23, Z+1	; 0x01
    2fe0:	82 81       	ldd	r24, Z+2	; 0x02
    2fe2:	93 81       	ldd	r25, Z+3	; 0x03
    2fe4:	0c 5f       	subi	r16, 0xFC	; 252
    2fe6:	1f 4f       	sbci	r17, 0xFF	; 255
    2fe8:	06 c0       	rjmp	.+12     	; 0x2ff6 <vfprintf+0x272>
    2fea:	60 81       	ld	r22, Z
    2fec:	71 81       	ldd	r23, Z+1	; 0x01
    2fee:	80 e0       	ldi	r24, 0x00	; 0
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	0e 5f       	subi	r16, 0xFE	; 254
    2ff4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ff6:	a4 01       	movw	r20, r8
    2ff8:	d0 d0       	rcall	.+416    	; 0x319a <__ultoa_invert>
    2ffa:	a8 2e       	mov	r10, r24
    2ffc:	a8 18       	sub	r10, r8
    2ffe:	fb 2d       	mov	r31, r11
    3000:	ff 77       	andi	r31, 0x7F	; 127
    3002:	bf 2e       	mov	r11, r31
    3004:	b6 fe       	sbrs	r11, 6
    3006:	0b c0       	rjmp	.+22     	; 0x301e <vfprintf+0x29a>
    3008:	2b 2d       	mov	r18, r11
    300a:	2e 7f       	andi	r18, 0xFE	; 254
    300c:	a5 14       	cp	r10, r5
    300e:	50 f4       	brcc	.+20     	; 0x3024 <vfprintf+0x2a0>
    3010:	b4 fe       	sbrs	r11, 4
    3012:	0a c0       	rjmp	.+20     	; 0x3028 <vfprintf+0x2a4>
    3014:	b2 fc       	sbrc	r11, 2
    3016:	08 c0       	rjmp	.+16     	; 0x3028 <vfprintf+0x2a4>
    3018:	2b 2d       	mov	r18, r11
    301a:	2e 7e       	andi	r18, 0xEE	; 238
    301c:	05 c0       	rjmp	.+10     	; 0x3028 <vfprintf+0x2a4>
    301e:	7a 2c       	mov	r7, r10
    3020:	2b 2d       	mov	r18, r11
    3022:	03 c0       	rjmp	.+6      	; 0x302a <vfprintf+0x2a6>
    3024:	7a 2c       	mov	r7, r10
    3026:	01 c0       	rjmp	.+2      	; 0x302a <vfprintf+0x2a6>
    3028:	75 2c       	mov	r7, r5
    302a:	24 ff       	sbrs	r18, 4
    302c:	0d c0       	rjmp	.+26     	; 0x3048 <vfprintf+0x2c4>
    302e:	fe 01       	movw	r30, r28
    3030:	ea 0d       	add	r30, r10
    3032:	f1 1d       	adc	r31, r1
    3034:	80 81       	ld	r24, Z
    3036:	80 33       	cpi	r24, 0x30	; 48
    3038:	11 f4       	brne	.+4      	; 0x303e <vfprintf+0x2ba>
    303a:	29 7e       	andi	r18, 0xE9	; 233
    303c:	09 c0       	rjmp	.+18     	; 0x3050 <vfprintf+0x2cc>
    303e:	22 ff       	sbrs	r18, 2
    3040:	06 c0       	rjmp	.+12     	; 0x304e <vfprintf+0x2ca>
    3042:	73 94       	inc	r7
    3044:	73 94       	inc	r7
    3046:	04 c0       	rjmp	.+8      	; 0x3050 <vfprintf+0x2cc>
    3048:	82 2f       	mov	r24, r18
    304a:	86 78       	andi	r24, 0x86	; 134
    304c:	09 f0       	breq	.+2      	; 0x3050 <vfprintf+0x2cc>
    304e:	73 94       	inc	r7
    3050:	23 fd       	sbrc	r18, 3
    3052:	12 c0       	rjmp	.+36     	; 0x3078 <vfprintf+0x2f4>
    3054:	20 ff       	sbrs	r18, 0
    3056:	06 c0       	rjmp	.+12     	; 0x3064 <vfprintf+0x2e0>
    3058:	5a 2c       	mov	r5, r10
    305a:	73 14       	cp	r7, r3
    305c:	18 f4       	brcc	.+6      	; 0x3064 <vfprintf+0x2e0>
    305e:	53 0c       	add	r5, r3
    3060:	57 18       	sub	r5, r7
    3062:	73 2c       	mov	r7, r3
    3064:	73 14       	cp	r7, r3
    3066:	60 f4       	brcc	.+24     	; 0x3080 <vfprintf+0x2fc>
    3068:	b7 01       	movw	r22, r14
    306a:	80 e2       	ldi	r24, 0x20	; 32
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	2c 87       	std	Y+12, r18	; 0x0c
    3070:	62 d0       	rcall	.+196    	; 0x3136 <fputc>
    3072:	73 94       	inc	r7
    3074:	2c 85       	ldd	r18, Y+12	; 0x0c
    3076:	f6 cf       	rjmp	.-20     	; 0x3064 <vfprintf+0x2e0>
    3078:	73 14       	cp	r7, r3
    307a:	10 f4       	brcc	.+4      	; 0x3080 <vfprintf+0x2fc>
    307c:	37 18       	sub	r3, r7
    307e:	01 c0       	rjmp	.+2      	; 0x3082 <vfprintf+0x2fe>
    3080:	31 2c       	mov	r3, r1
    3082:	24 ff       	sbrs	r18, 4
    3084:	11 c0       	rjmp	.+34     	; 0x30a8 <vfprintf+0x324>
    3086:	b7 01       	movw	r22, r14
    3088:	80 e3       	ldi	r24, 0x30	; 48
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	2c 87       	std	Y+12, r18	; 0x0c
    308e:	53 d0       	rcall	.+166    	; 0x3136 <fputc>
    3090:	2c 85       	ldd	r18, Y+12	; 0x0c
    3092:	22 ff       	sbrs	r18, 2
    3094:	16 c0       	rjmp	.+44     	; 0x30c2 <vfprintf+0x33e>
    3096:	21 ff       	sbrs	r18, 1
    3098:	03 c0       	rjmp	.+6      	; 0x30a0 <vfprintf+0x31c>
    309a:	88 e5       	ldi	r24, 0x58	; 88
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	02 c0       	rjmp	.+4      	; 0x30a4 <vfprintf+0x320>
    30a0:	88 e7       	ldi	r24, 0x78	; 120
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	b7 01       	movw	r22, r14
    30a6:	0c c0       	rjmp	.+24     	; 0x30c0 <vfprintf+0x33c>
    30a8:	82 2f       	mov	r24, r18
    30aa:	86 78       	andi	r24, 0x86	; 134
    30ac:	51 f0       	breq	.+20     	; 0x30c2 <vfprintf+0x33e>
    30ae:	21 fd       	sbrc	r18, 1
    30b0:	02 c0       	rjmp	.+4      	; 0x30b6 <vfprintf+0x332>
    30b2:	80 e2       	ldi	r24, 0x20	; 32
    30b4:	01 c0       	rjmp	.+2      	; 0x30b8 <vfprintf+0x334>
    30b6:	8b e2       	ldi	r24, 0x2B	; 43
    30b8:	27 fd       	sbrc	r18, 7
    30ba:	8d e2       	ldi	r24, 0x2D	; 45
    30bc:	b7 01       	movw	r22, r14
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	3a d0       	rcall	.+116    	; 0x3136 <fputc>
    30c2:	a5 14       	cp	r10, r5
    30c4:	30 f4       	brcc	.+12     	; 0x30d2 <vfprintf+0x34e>
    30c6:	b7 01       	movw	r22, r14
    30c8:	80 e3       	ldi	r24, 0x30	; 48
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	34 d0       	rcall	.+104    	; 0x3136 <fputc>
    30ce:	5a 94       	dec	r5
    30d0:	f8 cf       	rjmp	.-16     	; 0x30c2 <vfprintf+0x33e>
    30d2:	aa 94       	dec	r10
    30d4:	f4 01       	movw	r30, r8
    30d6:	ea 0d       	add	r30, r10
    30d8:	f1 1d       	adc	r31, r1
    30da:	80 81       	ld	r24, Z
    30dc:	b7 01       	movw	r22, r14
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	2a d0       	rcall	.+84     	; 0x3136 <fputc>
    30e2:	a1 10       	cpse	r10, r1
    30e4:	f6 cf       	rjmp	.-20     	; 0x30d2 <vfprintf+0x34e>
    30e6:	33 20       	and	r3, r3
    30e8:	09 f4       	brne	.+2      	; 0x30ec <vfprintf+0x368>
    30ea:	5d ce       	rjmp	.-838    	; 0x2da6 <vfprintf+0x22>
    30ec:	b7 01       	movw	r22, r14
    30ee:	80 e2       	ldi	r24, 0x20	; 32
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	21 d0       	rcall	.+66     	; 0x3136 <fputc>
    30f4:	3a 94       	dec	r3
    30f6:	f7 cf       	rjmp	.-18     	; 0x30e6 <vfprintf+0x362>
    30f8:	f7 01       	movw	r30, r14
    30fa:	86 81       	ldd	r24, Z+6	; 0x06
    30fc:	97 81       	ldd	r25, Z+7	; 0x07
    30fe:	02 c0       	rjmp	.+4      	; 0x3104 <vfprintf+0x380>
    3100:	8f ef       	ldi	r24, 0xFF	; 255
    3102:	9f ef       	ldi	r25, 0xFF	; 255
    3104:	2c 96       	adiw	r28, 0x0c	; 12
    3106:	e2 e1       	ldi	r30, 0x12	; 18
    3108:	c2 c0       	rjmp	.+388    	; 0x328e <__epilogue_restores__>

0000310a <strnlen_P>:
    310a:	fc 01       	movw	r30, r24
    310c:	05 90       	lpm	r0, Z+
    310e:	61 50       	subi	r22, 0x01	; 1
    3110:	70 40       	sbci	r23, 0x00	; 0
    3112:	01 10       	cpse	r0, r1
    3114:	d8 f7       	brcc	.-10     	; 0x310c <strnlen_P+0x2>
    3116:	80 95       	com	r24
    3118:	90 95       	com	r25
    311a:	8e 0f       	add	r24, r30
    311c:	9f 1f       	adc	r25, r31
    311e:	08 95       	ret

00003120 <strnlen>:
    3120:	fc 01       	movw	r30, r24
    3122:	61 50       	subi	r22, 0x01	; 1
    3124:	70 40       	sbci	r23, 0x00	; 0
    3126:	01 90       	ld	r0, Z+
    3128:	01 10       	cpse	r0, r1
    312a:	d8 f7       	brcc	.-10     	; 0x3122 <strnlen+0x2>
    312c:	80 95       	com	r24
    312e:	90 95       	com	r25
    3130:	8e 0f       	add	r24, r30
    3132:	9f 1f       	adc	r25, r31
    3134:	08 95       	ret

00003136 <fputc>:
    3136:	0f 93       	push	r16
    3138:	1f 93       	push	r17
    313a:	cf 93       	push	r28
    313c:	df 93       	push	r29
    313e:	18 2f       	mov	r17, r24
    3140:	09 2f       	mov	r16, r25
    3142:	eb 01       	movw	r28, r22
    3144:	8b 81       	ldd	r24, Y+3	; 0x03
    3146:	81 fd       	sbrc	r24, 1
    3148:	03 c0       	rjmp	.+6      	; 0x3150 <fputc+0x1a>
    314a:	8f ef       	ldi	r24, 0xFF	; 255
    314c:	9f ef       	ldi	r25, 0xFF	; 255
    314e:	20 c0       	rjmp	.+64     	; 0x3190 <fputc+0x5a>
    3150:	82 ff       	sbrs	r24, 2
    3152:	10 c0       	rjmp	.+32     	; 0x3174 <fputc+0x3e>
    3154:	4e 81       	ldd	r20, Y+6	; 0x06
    3156:	5f 81       	ldd	r21, Y+7	; 0x07
    3158:	2c 81       	ldd	r18, Y+4	; 0x04
    315a:	3d 81       	ldd	r19, Y+5	; 0x05
    315c:	42 17       	cp	r20, r18
    315e:	53 07       	cpc	r21, r19
    3160:	7c f4       	brge	.+30     	; 0x3180 <fputc+0x4a>
    3162:	e8 81       	ld	r30, Y
    3164:	f9 81       	ldd	r31, Y+1	; 0x01
    3166:	9f 01       	movw	r18, r30
    3168:	2f 5f       	subi	r18, 0xFF	; 255
    316a:	3f 4f       	sbci	r19, 0xFF	; 255
    316c:	39 83       	std	Y+1, r19	; 0x01
    316e:	28 83       	st	Y, r18
    3170:	10 83       	st	Z, r17
    3172:	06 c0       	rjmp	.+12     	; 0x3180 <fputc+0x4a>
    3174:	e8 85       	ldd	r30, Y+8	; 0x08
    3176:	f9 85       	ldd	r31, Y+9	; 0x09
    3178:	81 2f       	mov	r24, r17
    317a:	09 95       	icall
    317c:	89 2b       	or	r24, r25
    317e:	29 f7       	brne	.-54     	; 0x314a <fputc+0x14>
    3180:	2e 81       	ldd	r18, Y+6	; 0x06
    3182:	3f 81       	ldd	r19, Y+7	; 0x07
    3184:	2f 5f       	subi	r18, 0xFF	; 255
    3186:	3f 4f       	sbci	r19, 0xFF	; 255
    3188:	3f 83       	std	Y+7, r19	; 0x07
    318a:	2e 83       	std	Y+6, r18	; 0x06
    318c:	81 2f       	mov	r24, r17
    318e:	90 2f       	mov	r25, r16
    3190:	df 91       	pop	r29
    3192:	cf 91       	pop	r28
    3194:	1f 91       	pop	r17
    3196:	0f 91       	pop	r16
    3198:	08 95       	ret

0000319a <__ultoa_invert>:
    319a:	fa 01       	movw	r30, r20
    319c:	aa 27       	eor	r26, r26
    319e:	28 30       	cpi	r18, 0x08	; 8
    31a0:	51 f1       	breq	.+84     	; 0x31f6 <__ultoa_invert+0x5c>
    31a2:	20 31       	cpi	r18, 0x10	; 16
    31a4:	81 f1       	breq	.+96     	; 0x3206 <__ultoa_invert+0x6c>
    31a6:	e8 94       	clt
    31a8:	6f 93       	push	r22
    31aa:	6e 7f       	andi	r22, 0xFE	; 254
    31ac:	6e 5f       	subi	r22, 0xFE	; 254
    31ae:	7f 4f       	sbci	r23, 0xFF	; 255
    31b0:	8f 4f       	sbci	r24, 0xFF	; 255
    31b2:	9f 4f       	sbci	r25, 0xFF	; 255
    31b4:	af 4f       	sbci	r26, 0xFF	; 255
    31b6:	b1 e0       	ldi	r27, 0x01	; 1
    31b8:	3e d0       	rcall	.+124    	; 0x3236 <__ultoa_invert+0x9c>
    31ba:	b4 e0       	ldi	r27, 0x04	; 4
    31bc:	3c d0       	rcall	.+120    	; 0x3236 <__ultoa_invert+0x9c>
    31be:	67 0f       	add	r22, r23
    31c0:	78 1f       	adc	r23, r24
    31c2:	89 1f       	adc	r24, r25
    31c4:	9a 1f       	adc	r25, r26
    31c6:	a1 1d       	adc	r26, r1
    31c8:	68 0f       	add	r22, r24
    31ca:	79 1f       	adc	r23, r25
    31cc:	8a 1f       	adc	r24, r26
    31ce:	91 1d       	adc	r25, r1
    31d0:	a1 1d       	adc	r26, r1
    31d2:	6a 0f       	add	r22, r26
    31d4:	71 1d       	adc	r23, r1
    31d6:	81 1d       	adc	r24, r1
    31d8:	91 1d       	adc	r25, r1
    31da:	a1 1d       	adc	r26, r1
    31dc:	20 d0       	rcall	.+64     	; 0x321e <__ultoa_invert+0x84>
    31de:	09 f4       	brne	.+2      	; 0x31e2 <__ultoa_invert+0x48>
    31e0:	68 94       	set
    31e2:	3f 91       	pop	r19
    31e4:	2a e0       	ldi	r18, 0x0A	; 10
    31e6:	26 9f       	mul	r18, r22
    31e8:	11 24       	eor	r1, r1
    31ea:	30 19       	sub	r19, r0
    31ec:	30 5d       	subi	r19, 0xD0	; 208
    31ee:	31 93       	st	Z+, r19
    31f0:	de f6       	brtc	.-74     	; 0x31a8 <__ultoa_invert+0xe>
    31f2:	cf 01       	movw	r24, r30
    31f4:	08 95       	ret
    31f6:	46 2f       	mov	r20, r22
    31f8:	47 70       	andi	r20, 0x07	; 7
    31fa:	40 5d       	subi	r20, 0xD0	; 208
    31fc:	41 93       	st	Z+, r20
    31fe:	b3 e0       	ldi	r27, 0x03	; 3
    3200:	0f d0       	rcall	.+30     	; 0x3220 <__ultoa_invert+0x86>
    3202:	c9 f7       	brne	.-14     	; 0x31f6 <__ultoa_invert+0x5c>
    3204:	f6 cf       	rjmp	.-20     	; 0x31f2 <__ultoa_invert+0x58>
    3206:	46 2f       	mov	r20, r22
    3208:	4f 70       	andi	r20, 0x0F	; 15
    320a:	40 5d       	subi	r20, 0xD0	; 208
    320c:	4a 33       	cpi	r20, 0x3A	; 58
    320e:	18 f0       	brcs	.+6      	; 0x3216 <__ultoa_invert+0x7c>
    3210:	49 5d       	subi	r20, 0xD9	; 217
    3212:	31 fd       	sbrc	r19, 1
    3214:	40 52       	subi	r20, 0x20	; 32
    3216:	41 93       	st	Z+, r20
    3218:	02 d0       	rcall	.+4      	; 0x321e <__ultoa_invert+0x84>
    321a:	a9 f7       	brne	.-22     	; 0x3206 <__ultoa_invert+0x6c>
    321c:	ea cf       	rjmp	.-44     	; 0x31f2 <__ultoa_invert+0x58>
    321e:	b4 e0       	ldi	r27, 0x04	; 4
    3220:	a6 95       	lsr	r26
    3222:	97 95       	ror	r25
    3224:	87 95       	ror	r24
    3226:	77 95       	ror	r23
    3228:	67 95       	ror	r22
    322a:	ba 95       	dec	r27
    322c:	c9 f7       	brne	.-14     	; 0x3220 <__ultoa_invert+0x86>
    322e:	00 97       	sbiw	r24, 0x00	; 0
    3230:	61 05       	cpc	r22, r1
    3232:	71 05       	cpc	r23, r1
    3234:	08 95       	ret
    3236:	9b 01       	movw	r18, r22
    3238:	ac 01       	movw	r20, r24
    323a:	0a 2e       	mov	r0, r26
    323c:	06 94       	lsr	r0
    323e:	57 95       	ror	r21
    3240:	47 95       	ror	r20
    3242:	37 95       	ror	r19
    3244:	27 95       	ror	r18
    3246:	ba 95       	dec	r27
    3248:	c9 f7       	brne	.-14     	; 0x323c <__ultoa_invert+0xa2>
    324a:	62 0f       	add	r22, r18
    324c:	73 1f       	adc	r23, r19
    324e:	84 1f       	adc	r24, r20
    3250:	95 1f       	adc	r25, r21
    3252:	a0 1d       	adc	r26, r0
    3254:	08 95       	ret

00003256 <__prologue_saves__>:
    3256:	2f 92       	push	r2
    3258:	3f 92       	push	r3
    325a:	4f 92       	push	r4
    325c:	5f 92       	push	r5
    325e:	6f 92       	push	r6
    3260:	7f 92       	push	r7
    3262:	8f 92       	push	r8
    3264:	9f 92       	push	r9
    3266:	af 92       	push	r10
    3268:	bf 92       	push	r11
    326a:	cf 92       	push	r12
    326c:	df 92       	push	r13
    326e:	ef 92       	push	r14
    3270:	ff 92       	push	r15
    3272:	0f 93       	push	r16
    3274:	1f 93       	push	r17
    3276:	cf 93       	push	r28
    3278:	df 93       	push	r29
    327a:	cd b7       	in	r28, 0x3d	; 61
    327c:	de b7       	in	r29, 0x3e	; 62
    327e:	ca 1b       	sub	r28, r26
    3280:	db 0b       	sbc	r29, r27
    3282:	0f b6       	in	r0, 0x3f	; 63
    3284:	f8 94       	cli
    3286:	de bf       	out	0x3e, r29	; 62
    3288:	0f be       	out	0x3f, r0	; 63
    328a:	cd bf       	out	0x3d, r28	; 61
    328c:	09 94       	ijmp

0000328e <__epilogue_restores__>:
    328e:	2a 88       	ldd	r2, Y+18	; 0x12
    3290:	39 88       	ldd	r3, Y+17	; 0x11
    3292:	48 88       	ldd	r4, Y+16	; 0x10
    3294:	5f 84       	ldd	r5, Y+15	; 0x0f
    3296:	6e 84       	ldd	r6, Y+14	; 0x0e
    3298:	7d 84       	ldd	r7, Y+13	; 0x0d
    329a:	8c 84       	ldd	r8, Y+12	; 0x0c
    329c:	9b 84       	ldd	r9, Y+11	; 0x0b
    329e:	aa 84       	ldd	r10, Y+10	; 0x0a
    32a0:	b9 84       	ldd	r11, Y+9	; 0x09
    32a2:	c8 84       	ldd	r12, Y+8	; 0x08
    32a4:	df 80       	ldd	r13, Y+7	; 0x07
    32a6:	ee 80       	ldd	r14, Y+6	; 0x06
    32a8:	fd 80       	ldd	r15, Y+5	; 0x05
    32aa:	0c 81       	ldd	r16, Y+4	; 0x04
    32ac:	1b 81       	ldd	r17, Y+3	; 0x03
    32ae:	aa 81       	ldd	r26, Y+2	; 0x02
    32b0:	b9 81       	ldd	r27, Y+1	; 0x01
    32b2:	ce 0f       	add	r28, r30
    32b4:	d1 1d       	adc	r29, r1
    32b6:	0f b6       	in	r0, 0x3f	; 63
    32b8:	f8 94       	cli
    32ba:	de bf       	out	0x3e, r29	; 62
    32bc:	0f be       	out	0x3f, r0	; 63
    32be:	cd bf       	out	0x3d, r28	; 61
    32c0:	ed 01       	movw	r28, r26
    32c2:	08 95       	ret

000032c4 <_exit>:
    32c4:	f8 94       	cli

000032c6 <__stop_program>:
    32c6:	ff cf       	rjmp	.-2      	; 0x32c6 <__stop_program>
