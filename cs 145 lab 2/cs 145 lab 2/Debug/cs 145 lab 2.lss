
cs 145 lab 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000be  00800060  000013d0  00001464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080011e  0080011e  00001522  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001522  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  0000157e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ef6  00000000  00000000  00001676  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004c4  00000000  00000000  0000256c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012c1  00000000  00000000  00002a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000035c  00000000  00000000  00003cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000ce0b  00000000  00000000  00004050  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000010b1  00000000  00000000  00010e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  00011f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000314c  00000000  00000000  00011ff4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
       2:	00 00       	nop
       4:	43 c0       	rjmp	.+134    	; 0x8c <__bad_interrupt>
       6:	00 00       	nop
       8:	41 c0       	rjmp	.+130    	; 0x8c <__bad_interrupt>
       a:	00 00       	nop
       c:	3f c0       	rjmp	.+126    	; 0x8c <__bad_interrupt>
       e:	00 00       	nop
      10:	3d c0       	rjmp	.+122    	; 0x8c <__bad_interrupt>
      12:	00 00       	nop
      14:	3b c0       	rjmp	.+118    	; 0x8c <__bad_interrupt>
      16:	00 00       	nop
      18:	39 c0       	rjmp	.+114    	; 0x8c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	37 c0       	rjmp	.+110    	; 0x8c <__bad_interrupt>
      1e:	00 00       	nop
      20:	35 c0       	rjmp	.+106    	; 0x8c <__bad_interrupt>
      22:	00 00       	nop
      24:	33 c0       	rjmp	.+102    	; 0x8c <__bad_interrupt>
      26:	00 00       	nop
      28:	31 c0       	rjmp	.+98     	; 0x8c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2f c0       	rjmp	.+94     	; 0x8c <__bad_interrupt>
      2e:	00 00       	nop
      30:	2d c0       	rjmp	.+90     	; 0x8c <__bad_interrupt>
      32:	00 00       	nop
      34:	2b c0       	rjmp	.+86     	; 0x8c <__bad_interrupt>
      36:	00 00       	nop
      38:	29 c0       	rjmp	.+82     	; 0x8c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	27 c0       	rjmp	.+78     	; 0x8c <__bad_interrupt>
      3e:	00 00       	nop
      40:	25 c0       	rjmp	.+74     	; 0x8c <__bad_interrupt>
      42:	00 00       	nop
      44:	23 c0       	rjmp	.+70     	; 0x8c <__bad_interrupt>
      46:	00 00       	nop
      48:	21 c0       	rjmp	.+66     	; 0x8c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1f c0       	rjmp	.+62     	; 0x8c <__bad_interrupt>
      4e:	00 00       	nop
      50:	1d c0       	rjmp	.+58     	; 0x8c <__bad_interrupt>
	...

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ed       	ldi	r30, 0xD0	; 208
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 31       	cpi	r26, 0x1E	; 30
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	ae e1       	ldi	r26, 0x1E	; 30
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 32       	cpi	r26, 0x24	; 36
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	a7 d3       	rcall	.+1870   	; 0x7d6 <main>
      88:	0c 94 e6 09 	jmp	0x13cc	; 0x13cc <_exit>

0000008c <__bad_interrupt>:
      8c:	b9 cf       	rjmp	.-142    	; 0x0 <__vectors>

0000008e <board_init>:
#include <compiler.h>
#include <conf_board.h>


void board_init(void)
{
      8e:	08 95       	ret

00000090 <ini_avr>:
#include "avr.h"

void
ini_avr(void)
{
	WDTCR = 15;
      90:	8f e0       	ldi	r24, 0x0F	; 15
      92:	81 bd       	out	0x21, r24	; 33
      94:	08 95       	ret

00000096 <wait_avr>:
}

void
wait_avr(unsigned short msec)
{
	TCCR0 = 3;
      96:	23 e0       	ldi	r18, 0x03	; 3
      98:	23 bf       	out	0x33, r18	; 51
	while (msec--) {
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
      9a:	33 e8       	ldi	r19, 0x83	; 131

void
wait_avr(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
      9c:	08 c0       	rjmp	.+16     	; 0xae <wait_avr+0x18>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
      9e:	32 bf       	out	0x32, r19	; 50
		SET_BIT(TIFR, TOV0);
      a0:	28 b7       	in	r18, 0x38	; 56
      a2:	21 60       	ori	r18, 0x01	; 1
      a4:	28 bf       	out	0x38, r18	; 56
		WDR();
      a6:	a8 95       	wdr
		while (!GET_BIT(TIFR, TOV0));
      a8:	08 b6       	in	r0, 0x38	; 56
      aa:	00 fe       	sbrs	r0, 0
      ac:	fd cf       	rjmp	.-6      	; 0xa8 <wait_avr+0x12>

void
wait_avr(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
      ae:	01 97       	sbiw	r24, 0x01	; 1
      b0:	b0 f7       	brcc	.-20     	; 0x9e <wait_avr+0x8>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
		SET_BIT(TIFR, TOV0);
		WDR();
		while (!GET_BIT(TIFR, TOV0));
	}
	TCCR0 = 0;
      b2:	13 be       	out	0x33, r1	; 51
      b4:	08 95       	ret

000000b6 <output>:
{
	char c;
	while ((c = pgm_read_byte(s++)) != 0) {
		write(c, 1);
	}
}
      b6:	66 23       	and	r22, r22
      b8:	11 f0       	breq	.+4      	; 0xbe <output+0x8>
      ba:	d8 9a       	sbi	0x1b, 0	; 27
      bc:	01 c0       	rjmp	.+2      	; 0xc0 <output+0xa>
      be:	d8 98       	cbi	0x1b, 0	; 27
      c0:	d9 98       	cbi	0x1b, 1	; 27
      c2:	82 bb       	out	0x12, r24	; 18
      c4:	8f ef       	ldi	r24, 0xFF	; 255
      c6:	81 bb       	out	0x11, r24	; 17
      c8:	da 9a       	sbi	0x1b, 2	; 27
      ca:	00 00       	nop
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	da 98       	cbi	0x1b, 2	; 27
      d2:	08 95       	ret

000000d4 <write>:
      d4:	d8 98       	cbi	0x1b, 0	; 27
      d6:	d9 9a       	sbi	0x1b, 1	; 27
      d8:	11 ba       	out	0x11, r1	; 17
      da:	90 b3       	in	r25, 0x10	; 16
      dc:	da 9a       	sbi	0x1b, 2	; 27
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	00 00       	nop
      e4:	11 ba       	out	0x11, r1	; 17
      e6:	90 b3       	in	r25, 0x10	; 16
      e8:	da 98       	cbi	0x1b, 2	; 27
      ea:	99 23       	and	r25, r25
      ec:	9c f3       	brlt	.-26     	; 0xd4 <write>
      ee:	e3 cf       	rjmp	.-58     	; 0xb6 <output>
      f0:	08 95       	ret

000000f2 <ini_lcd>:
      f2:	d0 9a       	sbi	0x1a, 0	; 26
      f4:	d1 9a       	sbi	0x1a, 1	; 26
      f6:	d2 9a       	sbi	0x1a, 2	; 26
      f8:	80 e1       	ldi	r24, 0x10	; 16
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	cc df       	rcall	.-104    	; 0x96 <wait_avr>
      fe:	60 e0       	ldi	r22, 0x00	; 0
     100:	80 e3       	ldi	r24, 0x30	; 48
     102:	d9 df       	rcall	.-78     	; 0xb6 <output>
     104:	85 e0       	ldi	r24, 0x05	; 5
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	c6 df       	rcall	.-116    	; 0x96 <wait_avr>
     10a:	60 e0       	ldi	r22, 0x00	; 0
     10c:	80 e3       	ldi	r24, 0x30	; 48
     10e:	d3 df       	rcall	.-90     	; 0xb6 <output>
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	c0 df       	rcall	.-128    	; 0x96 <wait_avr>
     116:	60 e0       	ldi	r22, 0x00	; 0
     118:	8c e3       	ldi	r24, 0x3C	; 60
     11a:	dc df       	rcall	.-72     	; 0xd4 <write>
     11c:	60 e0       	ldi	r22, 0x00	; 0
     11e:	8c e0       	ldi	r24, 0x0C	; 12
     120:	d9 df       	rcall	.-78     	; 0xd4 <write>
     122:	60 e0       	ldi	r22, 0x00	; 0
     124:	86 e0       	ldi	r24, 0x06	; 6
     126:	d6 df       	rcall	.-84     	; 0xd4 <write>
     128:	60 e0       	ldi	r22, 0x00	; 0
     12a:	81 e0       	ldi	r24, 0x01	; 1
     12c:	d3 cf       	rjmp	.-90     	; 0xd4 <write>
     12e:	08 95       	ret

00000130 <clr_lcd>:
     130:	60 e0       	ldi	r22, 0x00	; 0
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	cf cf       	rjmp	.-98     	; 0xd4 <write>
     136:	08 95       	ret

00000138 <pos_lcd>:
     138:	cf 93       	push	r28
     13a:	c6 2f       	mov	r28, r22
     13c:	98 e2       	ldi	r25, 0x28	; 40
     13e:	89 9f       	mul	r24, r25
     140:	c0 0d       	add	r28, r0
     142:	11 24       	eor	r1, r1
     144:	60 e0       	ldi	r22, 0x00	; 0
     146:	82 e0       	ldi	r24, 0x02	; 2
     148:	c5 df       	rcall	.-118    	; 0xd4 <write>
     14a:	cc 23       	and	r28, r28
     14c:	29 f0       	breq	.+10     	; 0x158 <pos_lcd+0x20>
     14e:	60 e0       	ldi	r22, 0x00	; 0
     150:	84 e1       	ldi	r24, 0x14	; 20
     152:	c0 df       	rcall	.-128    	; 0xd4 <write>
     154:	c1 50       	subi	r28, 0x01	; 1
     156:	d9 f7       	brne	.-10     	; 0x14e <pos_lcd+0x16>
     158:	cf 91       	pop	r28
     15a:	08 95       	ret

0000015c <put_str_lcd>:

void
put_str_lcd(const char *s)
{
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
	char c;
	while ((c = *(s++)) != 0) {
     160:	ec 01       	movw	r28, r24
     162:	21 96       	adiw	r28, 0x01	; 1
     164:	fc 01       	movw	r30, r24
     166:	80 81       	ld	r24, Z
     168:	88 23       	and	r24, r24
     16a:	29 f0       	breq	.+10     	; 0x176 <put_str_lcd+0x1a>
		write(c, 1);
     16c:	61 e0       	ldi	r22, 0x01	; 1
     16e:	b2 df       	rcall	.-156    	; 0xd4 <write>

void
put_str_lcd(const char *s)
{
	char c;
	while ((c = *(s++)) != 0) {
     170:	89 91       	ld	r24, Y+
     172:	81 11       	cpse	r24, r1
     174:	fb cf       	rjmp	.-10     	; 0x16c <put_str_lcd+0x10>
		write(c, 1);
	}
     176:	df 91       	pop	r29
     178:	cf 91       	pop	r28
     17a:	08 95       	ret

0000017c <isLeapYear>:
}

void out (char str[], int col) {
	pos_lcd(0, col);
	put_str_lcd(str);
}
     17c:	ac 01       	movw	r20, r24
     17e:	83 70       	andi	r24, 0x03	; 3
     180:	99 27       	eor	r25, r25
     182:	89 2b       	or	r24, r25
     184:	61 f5       	brne	.+88     	; 0x1de <isLeapYear+0x62>
     186:	9a 01       	movw	r18, r20
     188:	36 95       	lsr	r19
     18a:	27 95       	ror	r18
     18c:	36 95       	lsr	r19
     18e:	27 95       	ror	r18
     190:	ab e7       	ldi	r26, 0x7B	; 123
     192:	b4 e1       	ldi	r27, 0x14	; 20
     194:	4d d6       	rcall	.+3226   	; 0xe30 <__umulhisi3>
     196:	96 95       	lsr	r25
     198:	87 95       	ror	r24
     19a:	64 e6       	ldi	r22, 0x64	; 100
     19c:	68 9f       	mul	r22, r24
     19e:	90 01       	movw	r18, r0
     1a0:	69 9f       	mul	r22, r25
     1a2:	30 0d       	add	r19, r0
     1a4:	11 24       	eor	r1, r1
     1a6:	42 17       	cp	r20, r18
     1a8:	53 07       	cpc	r21, r19
     1aa:	d9 f4       	brne	.+54     	; 0x1e2 <isLeapYear+0x66>
     1ac:	9a 01       	movw	r18, r20
     1ae:	32 95       	swap	r19
     1b0:	22 95       	swap	r18
     1b2:	2f 70       	andi	r18, 0x0F	; 15
     1b4:	23 27       	eor	r18, r19
     1b6:	3f 70       	andi	r19, 0x0F	; 15
     1b8:	23 27       	eor	r18, r19
     1ba:	ae e3       	ldi	r26, 0x3E	; 62
     1bc:	ba e0       	ldi	r27, 0x0A	; 10
     1be:	38 d6       	rcall	.+3184   	; 0xe30 <__umulhisi3>
     1c0:	20 e9       	ldi	r18, 0x90	; 144
     1c2:	31 e0       	ldi	r19, 0x01	; 1
     1c4:	82 9f       	mul	r24, r18
     1c6:	b0 01       	movw	r22, r0
     1c8:	83 9f       	mul	r24, r19
     1ca:	70 0d       	add	r23, r0
     1cc:	92 9f       	mul	r25, r18
     1ce:	70 0d       	add	r23, r0
     1d0:	11 24       	eor	r1, r1
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	46 17       	cp	r20, r22
     1d6:	57 07       	cpc	r21, r23
     1d8:	29 f0       	breq	.+10     	; 0x1e4 <isLeapYear+0x68>
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	08 95       	ret
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	08 95       	ret
     1e2:	81 e0       	ldi	r24, 0x01	; 1
     1e4:	08 95       	ret

000001e6 <check_press>:
     1e6:	6c 5f       	subi	r22, 0xFC	; 252
     1e8:	7f 4f       	sbci	r23, 0xFF	; 255
     1ea:	21 e0       	ldi	r18, 0x01	; 1
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	06 2e       	mov	r0, r22
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <check_press+0x10>
     1f2:	22 0f       	add	r18, r18
     1f4:	33 1f       	adc	r19, r19
     1f6:	0a 94       	dec	r0
     1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <check_press+0xc>
     1fa:	b2 2f       	mov	r27, r18
     1fc:	b0 95       	com	r27
     1fe:	a2 2f       	mov	r26, r18
     200:	24 e0       	ldi	r18, 0x04	; 4
     202:	30 e0       	ldi	r19, 0x00	; 0
     204:	e1 e0       	ldi	r30, 0x01	; 1
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	94 b3       	in	r25, 0x14	; 20
     20a:	af 01       	movw	r20, r30
     20c:	02 2e       	mov	r0, r18
     20e:	02 c0       	rjmp	.+4      	; 0x214 <check_press+0x2e>
     210:	44 0f       	add	r20, r20
     212:	55 1f       	adc	r21, r21
     214:	0a 94       	dec	r0
     216:	e2 f7       	brpl	.-8      	; 0x210 <check_press+0x2a>
     218:	49 2b       	or	r20, r25
     21a:	44 bb       	out	0x14, r20	; 20
     21c:	62 17       	cp	r22, r18
     21e:	73 07       	cpc	r23, r19
     220:	21 f4       	brne	.+8      	; 0x22a <check_press+0x44>
     222:	95 b3       	in	r25, 0x15	; 21
     224:	9b 23       	and	r25, r27
     226:	95 bb       	out	0x15, r25	; 21
     228:	03 c0       	rjmp	.+6      	; 0x230 <check_press+0x4a>
     22a:	95 b3       	in	r25, 0x15	; 21
     22c:	9a 2b       	or	r25, r26
     22e:	95 bb       	out	0x15, r25	; 21
     230:	2f 5f       	subi	r18, 0xFF	; 255
     232:	3f 4f       	sbci	r19, 0xFF	; 255
     234:	28 30       	cpi	r18, 0x08	; 8
     236:	31 05       	cpc	r19, r1
     238:	39 f7       	brne	.-50     	; 0x208 <check_press+0x22>
     23a:	94 b3       	in	r25, 0x14	; 20
     23c:	21 e0       	ldi	r18, 0x01	; 1
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	08 2e       	mov	r0, r24
     242:	02 c0       	rjmp	.+4      	; 0x248 <check_press+0x62>
     244:	22 0f       	add	r18, r18
     246:	33 1f       	adc	r19, r19
     248:	0a 94       	dec	r0
     24a:	e2 f7       	brpl	.-8      	; 0x244 <check_press+0x5e>
     24c:	32 2f       	mov	r19, r18
     24e:	30 95       	com	r19
     250:	93 23       	and	r25, r19
     252:	94 bb       	out	0x14, r25	; 20
     254:	95 b3       	in	r25, 0x15	; 21
     256:	29 2b       	or	r18, r25
     258:	25 bb       	out	0x15, r18	; 21
     25a:	23 b3       	in	r18, 0x13	; 19
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	a9 01       	movw	r20, r18
     260:	02 c0       	rjmp	.+4      	; 0x266 <check_press+0x80>
     262:	55 95       	asr	r21
     264:	47 95       	ror	r20
     266:	8a 95       	dec	r24
     268:	e2 f7       	brpl	.-8      	; 0x262 <check_press+0x7c>
     26a:	ca 01       	movw	r24, r20
     26c:	51 e0       	ldi	r21, 0x01	; 1
     26e:	85 27       	eor	r24, r21
     270:	81 70       	andi	r24, 0x01	; 1
     272:	08 95       	ret

00000274 <get_numberPres>:
     274:	af 92       	push	r10
     276:	bf 92       	push	r11
     278:	cf 92       	push	r12
     27a:	df 92       	push	r13
     27c:	ef 92       	push	r14
     27e:	ff 92       	push	r15
     280:	0f 93       	push	r16
     282:	1f 93       	push	r17
     284:	cf 93       	push	r28
     286:	df 93       	push	r29
     288:	6c 01       	movw	r12, r24
     28a:	7c 01       	movw	r14, r24
     28c:	00 e0       	ldi	r16, 0x00	; 0
     28e:	10 e0       	ldi	r17, 0x00	; 0
     290:	a1 2c       	mov	r10, r1
     292:	b1 2c       	mov	r11, r1
     294:	21 c0       	rjmp	.+66     	; 0x2d8 <get_numberPres+0x64>
     296:	be 01       	movw	r22, r28
     298:	c8 01       	movw	r24, r16
     29a:	a5 df       	rcall	.-182    	; 0x1e6 <check_press>
     29c:	88 23       	and	r24, r24
     29e:	81 f0       	breq	.+32     	; 0x2c0 <get_numberPres+0x4c>
     2a0:	f7 01       	movw	r30, r14
     2a2:	ec 0f       	add	r30, r28
     2a4:	fd 1f       	adc	r31, r29
     2a6:	80 81       	ld	r24, Z
     2a8:	81 11       	cpse	r24, r1
     2aa:	0a c0       	rjmp	.+20     	; 0x2c0 <get_numberPres+0x4c>
     2ac:	c8 01       	movw	r24, r16
     2ae:	88 0f       	add	r24, r24
     2b0:	99 1f       	adc	r25, r25
     2b2:	08 0f       	add	r16, r24
     2b4:	19 1f       	adc	r17, r25
     2b6:	c0 0f       	add	r28, r16
     2b8:	d1 1f       	adc	r29, r17
     2ba:	ce 01       	movw	r24, r28
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	1f c0       	rjmp	.+62     	; 0x2fe <get_numberPres+0x8a>
     2c0:	21 96       	adiw	r28, 0x01	; 1
     2c2:	c3 30       	cpi	r28, 0x03	; 3
     2c4:	d1 05       	cpc	r29, r1
     2c6:	39 f7       	brne	.-50     	; 0x296 <get_numberPres+0x22>
     2c8:	0f 5f       	subi	r16, 0xFF	; 255
     2ca:	1f 4f       	sbci	r17, 0xFF	; 255
     2cc:	84 e0       	ldi	r24, 0x04	; 4
     2ce:	e8 0e       	add	r14, r24
     2d0:	f1 1c       	adc	r15, r1
     2d2:	03 30       	cpi	r16, 0x03	; 3
     2d4:	11 05       	cpc	r17, r1
     2d6:	19 f0       	breq	.+6      	; 0x2de <get_numberPres+0x6a>
     2d8:	ca 2d       	mov	r28, r10
     2da:	db 2d       	mov	r29, r11
     2dc:	dc cf       	rjmp	.-72     	; 0x296 <get_numberPres+0x22>
     2de:	61 e0       	ldi	r22, 0x01	; 1
     2e0:	70 e0       	ldi	r23, 0x00	; 0
     2e2:	83 e0       	ldi	r24, 0x03	; 3
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	7f df       	rcall	.-258    	; 0x1e6 <check_press>
     2e8:	88 23       	and	r24, r24
     2ea:	39 f0       	breq	.+14     	; 0x2fa <get_numberPres+0x86>
     2ec:	f6 01       	movw	r30, r12
     2ee:	85 85       	ldd	r24, Z+13	; 0x0d
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	91 95       	neg	r25
     2f4:	81 95       	neg	r24
     2f6:	91 09       	sbc	r25, r1
     2f8:	02 c0       	rjmp	.+4      	; 0x2fe <get_numberPres+0x8a>
     2fa:	8f ef       	ldi	r24, 0xFF	; 255
     2fc:	9f ef       	ldi	r25, 0xFF	; 255
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	1f 91       	pop	r17
     304:	0f 91       	pop	r16
     306:	ff 90       	pop	r15
     308:	ef 90       	pop	r14
     30a:	df 90       	pop	r13
     30c:	cf 90       	pop	r12
     30e:	bf 90       	pop	r11
     310:	af 90       	pop	r10
     312:	08 95       	ret

00000314 <formatHour>:
     314:	61 11       	cpse	r22, r1
     316:	08 c0       	rjmp	.+16     	; 0x328 <formatHour+0x14>
     318:	8c 30       	cpi	r24, 0x0C	; 12
     31a:	91 05       	cpc	r25, r1
     31c:	0c f0       	brlt	.+2      	; 0x320 <formatHour+0xc>
     31e:	0c 97       	sbiw	r24, 0x0c	; 12
     320:	00 97       	sbiw	r24, 0x00	; 0
     322:	11 f4       	brne	.+4      	; 0x328 <formatHour+0x14>
     324:	8c e0       	ldi	r24, 0x0C	; 12
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	08 95       	ret

0000032a <formatValid>:
     32a:	0f 93       	push	r16
     32c:	fc 01       	movw	r30, r24
     32e:	64 30       	cpi	r22, 0x04	; 4
     330:	71 05       	cpc	r23, r1
     332:	3c f4       	brge	.+14     	; 0x342 <formatValid+0x18>
     334:	62 30       	cpi	r22, 0x02	; 2
     336:	71 05       	cpc	r23, r1
     338:	d4 f4       	brge	.+52     	; 0x36e <formatValid+0x44>
     33a:	61 30       	cpi	r22, 0x01	; 1
     33c:	71 05       	cpc	r23, r1
     33e:	49 f0       	breq	.+18     	; 0x352 <formatValid+0x28>
     340:	39 c0       	rjmp	.+114    	; 0x3b4 <formatValid+0x8a>
     342:	65 30       	cpi	r22, 0x05	; 5
     344:	71 05       	cpc	r23, r1
     346:	f9 f0       	breq	.+62     	; 0x386 <formatValid+0x5c>
     348:	c4 f0       	brlt	.+48     	; 0x37a <formatValid+0x50>
     34a:	66 30       	cpi	r22, 0x06	; 6
     34c:	71 05       	cpc	r23, r1
     34e:	09 f1       	breq	.+66     	; 0x392 <formatValid+0x68>
     350:	31 c0       	rjmp	.+98     	; 0x3b4 <formatValid+0x8a>
     352:	00 23       	and	r16, r16
     354:	31 f0       	breq	.+12     	; 0x362 <formatValid+0x38>
     356:	88 31       	cpi	r24, 0x18	; 24
     358:	91 05       	cpc	r25, r1
     35a:	7c f1       	brlt	.+94     	; 0x3ba <formatValid+0x90>
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	36 c0       	rjmp	.+108    	; 0x3ce <formatValid+0xa4>
     362:	8c 30       	cpi	r24, 0x0C	; 12
     364:	91 05       	cpc	r25, r1
     366:	5c f1       	brlt	.+86     	; 0x3be <formatValid+0x94>
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	30 c0       	rjmp	.+96     	; 0x3ce <formatValid+0xa4>
     36e:	8c 33       	cpi	r24, 0x3C	; 60
     370:	91 05       	cpc	r25, r1
     372:	3c f1       	brlt	.+78     	; 0x3c2 <formatValid+0x98>
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	2a c0       	rjmp	.+84     	; 0x3ce <formatValid+0xa4>
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	ef 2b       	or	r30, r31
     380:	31 f5       	brne	.+76     	; 0x3ce <formatValid+0xa4>
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	24 c0       	rjmp	.+72     	; 0x3ce <formatValid+0xa4>
     386:	8d 30       	cpi	r24, 0x0D	; 13
     388:	91 05       	cpc	r25, r1
     38a:	ec f0       	brlt	.+58     	; 0x3c6 <formatValid+0x9c>
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	1e c0       	rjmp	.+60     	; 0x3ce <formatValid+0xa4>
     392:	da 01       	movw	r26, r20
     394:	13 96       	adiw	r26, 0x03	; 3
     396:	8c 91       	ld	r24, X
     398:	86 95       	lsr	r24
     39a:	86 95       	lsr	r24
     39c:	8f 70       	andi	r24, 0x0F	; 15
     39e:	d9 01       	movw	r26, r18
     3a0:	a8 0f       	add	r26, r24
     3a2:	b1 1d       	adc	r27, r1
     3a4:	8c 91       	ld	r24, X
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	8e 17       	cp	r24, r30
     3aa:	9f 07       	cpc	r25, r31
     3ac:	74 f4       	brge	.+28     	; 0x3ca <formatValid+0xa0>
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	0d c0       	rjmp	.+26     	; 0x3ce <formatValid+0xa4>
     3b4:	8e 2f       	mov	r24, r30
     3b6:	9f 2f       	mov	r25, r31
     3b8:	0a c0       	rjmp	.+20     	; 0x3ce <formatValid+0xa4>
     3ba:	9f 2f       	mov	r25, r31
     3bc:	08 c0       	rjmp	.+16     	; 0x3ce <formatValid+0xa4>
     3be:	9f 2f       	mov	r25, r31
     3c0:	06 c0       	rjmp	.+12     	; 0x3ce <formatValid+0xa4>
     3c2:	9f 2f       	mov	r25, r31
     3c4:	04 c0       	rjmp	.+8      	; 0x3ce <formatValid+0xa4>
     3c6:	9f 2f       	mov	r25, r31
     3c8:	02 c0       	rjmp	.+4      	; 0x3ce <formatValid+0xa4>
     3ca:	8e 2f       	mov	r24, r30
     3cc:	9f 2f       	mov	r25, r31
     3ce:	0f 91       	pop	r16
     3d0:	08 95       	ret

000003d2 <printData>:

// Redraws the data on the LCD, changes depending on the state
void printData(int currValue, int state, struct Calendar* cal, char dateBuff[], char timeBuff[], bool isMilitary) {
     3d2:	7f 92       	push	r7
     3d4:	8f 92       	push	r8
     3d6:	9f 92       	push	r9
     3d8:	af 92       	push	r10
     3da:	bf 92       	push	r11
     3dc:	cf 92       	push	r12
     3de:	df 92       	push	r13
     3e0:	ef 92       	push	r14
     3e2:	ff 92       	push	r15
     3e4:	0f 93       	push	r16
     3e6:	1f 93       	push	r17
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	4c 01       	movw	r8, r24
     3ee:	6b 01       	movw	r12, r22
     3f0:	ea 01       	movw	r28, r20
     3f2:	f2 2e       	mov	r15, r18
     3f4:	73 2e       	mov	r7, r19
	clr_lcd();
     3f6:	9c de       	rcall	.-712    	; 0x130 <clr_lcd>
	if (state == 7 || state == 6 || state == 5 || state == 0) {
     3f8:	c6 01       	movw	r24, r12
     3fa:	05 97       	sbiw	r24, 0x05	; 5
     3fc:	03 97       	sbiw	r24, 0x03	; 3
     3fe:	20 f0       	brcs	.+8      	; 0x408 <printData+0x36>
     400:	c1 14       	cp	r12, r1
     402:	d1 04       	cpc	r13, r1
     404:	09 f0       	breq	.+2      	; 0x408 <printData+0x36>
     406:	50 c0       	rjmp	.+160    	; 0x4a8 <printData+0xd6>
		sprintf(timeBuff,"%02i:%02i:%02i %s     ",
     408:	e1 10       	cpse	r14, r1
     40a:	12 c0       	rjmp	.+36     	; 0x430 <printData+0x5e>
		formatHour(cal->hour, isMilitary),
		cal->min,
		cal->sec,
		isMilitary ? "  " : (cal->hour >= 12 ? "pm" : "am"));
     40c:	99 81       	ldd	r25, Y+1	; 0x01
     40e:	92 95       	swap	r25
     410:	9f 70       	andi	r25, 0x0F	; 15
     412:	8a 81       	ldd	r24, Y+2	; 0x02
     414:	81 70       	andi	r24, 0x01	; 1
     416:	82 95       	swap	r24
     418:	80 7f       	andi	r24, 0xF0	; 240
     41a:	89 2b       	or	r24, r25
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	0c 97       	sbiw	r24, 0x0c	; 12
     420:	74 f0       	brlt	.+28     	; 0x43e <printData+0x6c>
     422:	0f 2e       	mov	r0, r31
     424:	f0 e7       	ldi	r31, 0x70	; 112
     426:	af 2e       	mov	r10, r31
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	bf 2e       	mov	r11, r31
     42c:	f0 2d       	mov	r31, r0
     42e:	0d c0       	rjmp	.+26     	; 0x44a <printData+0x78>

// Redraws the data on the LCD, changes depending on the state
void printData(int currValue, int state, struct Calendar* cal, char dateBuff[], char timeBuff[], bool isMilitary) {
	clr_lcd();
	if (state == 7 || state == 6 || state == 5 || state == 0) {
		sprintf(timeBuff,"%02i:%02i:%02i %s     ",
     430:	0f 2e       	mov	r0, r31
     432:	f3 ec       	ldi	r31, 0xC3	; 195
     434:	af 2e       	mov	r10, r31
     436:	f0 e0       	ldi	r31, 0x00	; 0
     438:	bf 2e       	mov	r11, r31
     43a:	f0 2d       	mov	r31, r0
     43c:	06 c0       	rjmp	.+12     	; 0x44a <printData+0x78>
		formatHour(cal->hour, isMilitary),
		cal->min,
		cal->sec,
		isMilitary ? "  " : (cal->hour >= 12 ? "pm" : "am"));
     43e:	0f 2e       	mov	r0, r31
     440:	fd e6       	ldi	r31, 0x6D	; 109
     442:	af 2e       	mov	r10, r31
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	bf 2e       	mov	r11, r31
     448:	f0 2d       	mov	r31, r0
// Redraws the data on the LCD, changes depending on the state
void printData(int currValue, int state, struct Calendar* cal, char dateBuff[], char timeBuff[], bool isMilitary) {
	clr_lcd();
	if (state == 7 || state == 6 || state == 5 || state == 0) {
		sprintf(timeBuff,"%02i:%02i:%02i %s     ",
		formatHour(cal->hour, isMilitary),
     44a:	99 81       	ldd	r25, Y+1	; 0x01
     44c:	92 95       	swap	r25
     44e:	9f 70       	andi	r25, 0x0F	; 15
     450:	8a 81       	ldd	r24, Y+2	; 0x02
     452:	81 70       	andi	r24, 0x01	; 1
     454:	82 95       	swap	r24
     456:	80 7f       	andi	r24, 0xF0	; 240
     458:	89 2b       	or	r24, r25

// Redraws the data on the LCD, changes depending on the state
void printData(int currValue, int state, struct Calendar* cal, char dateBuff[], char timeBuff[], bool isMilitary) {
	clr_lcd();
	if (state == 7 || state == 6 || state == 5 || state == 0) {
		sprintf(timeBuff,"%02i:%02i:%02i %s     ",
     45a:	6e 2d       	mov	r22, r14
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	5a df       	rcall	.-332    	; 0x314 <formatHour>
     460:	bf 92       	push	r11
     462:	af 92       	push	r10
		formatHour(cal->hour, isMilitary),
		cal->min,
		cal->sec,
     464:	28 81       	ld	r18, Y
     466:	2f 73       	andi	r18, 0x3F	; 63

// Redraws the data on the LCD, changes depending on the state
void printData(int currValue, int state, struct Calendar* cal, char dateBuff[], char timeBuff[], bool isMilitary) {
	clr_lcd();
	if (state == 7 || state == 6 || state == 5 || state == 0) {
		sprintf(timeBuff,"%02i:%02i:%02i %s     ",
     468:	1f 92       	push	r1
     46a:	2f 93       	push	r18
		formatHour(cal->hour, isMilitary),
		cal->min,
     46c:	38 81       	ld	r19, Y
     46e:	32 95       	swap	r19
     470:	36 95       	lsr	r19
     472:	36 95       	lsr	r19
     474:	33 70       	andi	r19, 0x03	; 3
     476:	29 81       	ldd	r18, Y+1	; 0x01
     478:	2f 70       	andi	r18, 0x0F	; 15
     47a:	22 0f       	add	r18, r18
     47c:	22 0f       	add	r18, r18
     47e:	23 2b       	or	r18, r19

// Redraws the data on the LCD, changes depending on the state
void printData(int currValue, int state, struct Calendar* cal, char dateBuff[], char timeBuff[], bool isMilitary) {
	clr_lcd();
	if (state == 7 || state == 6 || state == 5 || state == 0) {
		sprintf(timeBuff,"%02i:%02i:%02i %s     ",
     480:	1f 92       	push	r1
     482:	2f 93       	push	r18
     484:	9f 93       	push	r25
     486:	8f 93       	push	r24
     488:	86 e7       	ldi	r24, 0x76	; 118
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	9f 93       	push	r25
     48e:	8f 93       	push	r24
     490:	1f 93       	push	r17
     492:	0f 93       	push	r16
     494:	dc d4       	rcall	.+2488   	; 0xe4e <sprintf>
     496:	8d b7       	in	r24, 0x3d	; 61
     498:	9e b7       	in	r25, 0x3e	; 62
     49a:	0c 96       	adiw	r24, 0x0c	; 12
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	f8 94       	cli
     4a0:	9e bf       	out	0x3e, r25	; 62
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	8d bf       	out	0x3d, r24	; 61
     4a6:	d6 c0       	rjmp	.+428    	; 0x654 <printData+0x282>
		formatHour(cal->hour, isMilitary),
		cal->min,
		cal->sec,
		isMilitary ? "  " : (cal->hour >= 12 ? "pm" : "am"));
		} else if (state == 4) {
     4a8:	94 e0       	ldi	r25, 0x04	; 4
     4aa:	c9 16       	cp	r12, r25
     4ac:	d1 04       	cpc	r13, r1
     4ae:	09 f0       	breq	.+2      	; 0x4b2 <printData+0xe0>
     4b0:	3e c0       	rjmp	.+124    	; 0x52e <printData+0x15c>
		sprintf(timeBuff,"%02i:%02i:%02i %s     ", formatHour(cal->hour, isMilitary), cal->min, cal->sec, currValue == 0 ? "am" : "pm");
     4b2:	89 28       	or	r8, r9
     4b4:	39 f4       	brne	.+14     	; 0x4c4 <printData+0xf2>
     4b6:	0f 2e       	mov	r0, r31
     4b8:	fd e6       	ldi	r31, 0x6D	; 109
     4ba:	af 2e       	mov	r10, r31
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	bf 2e       	mov	r11, r31
     4c0:	f0 2d       	mov	r31, r0
     4c2:	06 c0       	rjmp	.+12     	; 0x4d0 <printData+0xfe>
     4c4:	0f 2e       	mov	r0, r31
     4c6:	f0 e7       	ldi	r31, 0x70	; 112
     4c8:	af 2e       	mov	r10, r31
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	bf 2e       	mov	r11, r31
     4ce:	f0 2d       	mov	r31, r0
     4d0:	99 81       	ldd	r25, Y+1	; 0x01
     4d2:	92 95       	swap	r25
     4d4:	9f 70       	andi	r25, 0x0F	; 15
     4d6:	8a 81       	ldd	r24, Y+2	; 0x02
     4d8:	81 70       	andi	r24, 0x01	; 1
     4da:	82 95       	swap	r24
     4dc:	80 7f       	andi	r24, 0xF0	; 240
     4de:	89 2b       	or	r24, r25
     4e0:	6e 2d       	mov	r22, r14
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	17 df       	rcall	.-466    	; 0x314 <formatHour>
     4e6:	bf 92       	push	r11
     4e8:	af 92       	push	r10
     4ea:	28 81       	ld	r18, Y
     4ec:	2f 73       	andi	r18, 0x3F	; 63
     4ee:	1f 92       	push	r1
     4f0:	2f 93       	push	r18
     4f2:	38 81       	ld	r19, Y
     4f4:	32 95       	swap	r19
     4f6:	36 95       	lsr	r19
     4f8:	36 95       	lsr	r19
     4fa:	33 70       	andi	r19, 0x03	; 3
     4fc:	29 81       	ldd	r18, Y+1	; 0x01
     4fe:	2f 70       	andi	r18, 0x0F	; 15
     500:	22 0f       	add	r18, r18
     502:	22 0f       	add	r18, r18
     504:	23 2b       	or	r18, r19
     506:	1f 92       	push	r1
     508:	2f 93       	push	r18
     50a:	9f 93       	push	r25
     50c:	8f 93       	push	r24
     50e:	86 e7       	ldi	r24, 0x76	; 118
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	9f 93       	push	r25
     514:	8f 93       	push	r24
     516:	1f 93       	push	r17
     518:	0f 93       	push	r16
     51a:	99 d4       	rcall	.+2354   	; 0xe4e <sprintf>
     51c:	8d b7       	in	r24, 0x3d	; 61
     51e:	9e b7       	in	r25, 0x3e	; 62
     520:	0c 96       	adiw	r24, 0x0c	; 12
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	f8 94       	cli
     526:	9e bf       	out	0x3e, r25	; 62
     528:	0f be       	out	0x3f, r0	; 63
     52a:	8d bf       	out	0x3d, r24	; 61
     52c:	3e c1       	rjmp	.+636    	; 0x7aa <printData+0x3d8>
		} else if (state == 3) {
     52e:	93 e0       	ldi	r25, 0x03	; 3
     530:	c9 16       	cp	r12, r25
     532:	d1 04       	cpc	r13, r1
     534:	e1 f5       	brne	.+120    	; 0x5ae <printData+0x1dc>
		sprintf(timeBuff,"%02i:%02i:%02i %s     ", formatHour(cal->hour, isMilitary), cal->min, currValue, isMilitary ? "  " : "--");
     536:	ee 20       	and	r14, r14
     538:	39 f0       	breq	.+14     	; 0x548 <printData+0x176>
     53a:	0f 2e       	mov	r0, r31
     53c:	f3 ec       	ldi	r31, 0xC3	; 195
     53e:	af 2e       	mov	r10, r31
     540:	f0 e0       	ldi	r31, 0x00	; 0
     542:	bf 2e       	mov	r11, r31
     544:	f0 2d       	mov	r31, r0
     546:	06 c0       	rjmp	.+12     	; 0x554 <printData+0x182>
     548:	0f 2e       	mov	r0, r31
     54a:	f3 e7       	ldi	r31, 0x73	; 115
     54c:	af 2e       	mov	r10, r31
     54e:	f0 e0       	ldi	r31, 0x00	; 0
     550:	bf 2e       	mov	r11, r31
     552:	f0 2d       	mov	r31, r0
     554:	99 81       	ldd	r25, Y+1	; 0x01
     556:	92 95       	swap	r25
     558:	9f 70       	andi	r25, 0x0F	; 15
     55a:	8a 81       	ldd	r24, Y+2	; 0x02
     55c:	81 70       	andi	r24, 0x01	; 1
     55e:	82 95       	swap	r24
     560:	80 7f       	andi	r24, 0xF0	; 240
     562:	89 2b       	or	r24, r25
     564:	6e 2d       	mov	r22, r14
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	d5 de       	rcall	.-598    	; 0x314 <formatHour>
     56a:	bf 92       	push	r11
     56c:	af 92       	push	r10
     56e:	9f 92       	push	r9
     570:	8f 92       	push	r8
     572:	38 81       	ld	r19, Y
     574:	32 95       	swap	r19
     576:	36 95       	lsr	r19
     578:	36 95       	lsr	r19
     57a:	33 70       	andi	r19, 0x03	; 3
     57c:	29 81       	ldd	r18, Y+1	; 0x01
     57e:	2f 70       	andi	r18, 0x0F	; 15
     580:	22 0f       	add	r18, r18
     582:	22 0f       	add	r18, r18
     584:	23 2b       	or	r18, r19
     586:	1f 92       	push	r1
     588:	2f 93       	push	r18
     58a:	9f 93       	push	r25
     58c:	8f 93       	push	r24
     58e:	86 e7       	ldi	r24, 0x76	; 118
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	9f 93       	push	r25
     594:	8f 93       	push	r24
     596:	1f 93       	push	r17
     598:	0f 93       	push	r16
     59a:	59 d4       	rcall	.+2226   	; 0xe4e <sprintf>
     59c:	8d b7       	in	r24, 0x3d	; 61
     59e:	9e b7       	in	r25, 0x3e	; 62
     5a0:	0c 96       	adiw	r24, 0x0c	; 12
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	f8 94       	cli
     5a6:	9e bf       	out	0x3e, r25	; 62
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	8d bf       	out	0x3d, r24	; 61
     5ac:	fe c0       	rjmp	.+508    	; 0x7aa <printData+0x3d8>
		} else if (state == 2) {
     5ae:	92 e0       	ldi	r25, 0x02	; 2
     5b0:	c9 16       	cp	r12, r25
     5b2:	d1 04       	cpc	r13, r1
     5b4:	81 f5       	brne	.+96     	; 0x616 <printData+0x244>
		sprintf(timeBuff,"%02i:%02i:-- %s     ", formatHour(cal->hour, isMilitary), currValue, isMilitary ? "  " : "--");
     5b6:	ee 20       	and	r14, r14
     5b8:	39 f0       	breq	.+14     	; 0x5c8 <printData+0x1f6>
     5ba:	0f 2e       	mov	r0, r31
     5bc:	f3 ec       	ldi	r31, 0xC3	; 195
     5be:	af 2e       	mov	r10, r31
     5c0:	f0 e0       	ldi	r31, 0x00	; 0
     5c2:	bf 2e       	mov	r11, r31
     5c4:	f0 2d       	mov	r31, r0
     5c6:	06 c0       	rjmp	.+12     	; 0x5d4 <printData+0x202>
     5c8:	0f 2e       	mov	r0, r31
     5ca:	f3 e7       	ldi	r31, 0x73	; 115
     5cc:	af 2e       	mov	r10, r31
     5ce:	f0 e0       	ldi	r31, 0x00	; 0
     5d0:	bf 2e       	mov	r11, r31
     5d2:	f0 2d       	mov	r31, r0
     5d4:	99 81       	ldd	r25, Y+1	; 0x01
     5d6:	92 95       	swap	r25
     5d8:	9f 70       	andi	r25, 0x0F	; 15
     5da:	8a 81       	ldd	r24, Y+2	; 0x02
     5dc:	81 70       	andi	r24, 0x01	; 1
     5de:	82 95       	swap	r24
     5e0:	80 7f       	andi	r24, 0xF0	; 240
     5e2:	89 2b       	or	r24, r25
     5e4:	6e 2d       	mov	r22, r14
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	95 de       	rcall	.-726    	; 0x314 <formatHour>
     5ea:	bf 92       	push	r11
     5ec:	af 92       	push	r10
     5ee:	9f 92       	push	r9
     5f0:	8f 92       	push	r8
     5f2:	9f 93       	push	r25
     5f4:	8f 93       	push	r24
     5f6:	8d e8       	ldi	r24, 0x8D	; 141
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	9f 93       	push	r25
     5fc:	8f 93       	push	r24
     5fe:	1f 93       	push	r17
     600:	0f 93       	push	r16
     602:	25 d4       	rcall	.+2122   	; 0xe4e <sprintf>
     604:	8d b7       	in	r24, 0x3d	; 61
     606:	9e b7       	in	r25, 0x3e	; 62
     608:	0a 96       	adiw	r24, 0x0a	; 10
     60a:	0f b6       	in	r0, 0x3f	; 63
     60c:	f8 94       	cli
     60e:	9e bf       	out	0x3e, r25	; 62
     610:	0f be       	out	0x3f, r0	; 63
     612:	8d bf       	out	0x3d, r24	; 61
     614:	ca c0       	rjmp	.+404    	; 0x7aa <printData+0x3d8>
		} else if (state == 1) {
     616:	91 e0       	ldi	r25, 0x01	; 1
     618:	c9 16       	cp	r12, r25
     61a:	d1 04       	cpc	r13, r1
     61c:	d9 f4       	brne	.+54     	; 0x654 <printData+0x282>
		sprintf(timeBuff,"%02i:--:-- %s     ", currValue, isMilitary ? "  " : "--");
     61e:	ee 20       	and	r14, r14
     620:	19 f0       	breq	.+6      	; 0x628 <printData+0x256>
     622:	83 ec       	ldi	r24, 0xC3	; 195
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	02 c0       	rjmp	.+4      	; 0x62c <printData+0x25a>
     628:	83 e7       	ldi	r24, 0x73	; 115
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	9f 93       	push	r25
     62e:	8f 93       	push	r24
     630:	9f 92       	push	r9
     632:	8f 92       	push	r8
     634:	82 ea       	ldi	r24, 0xA2	; 162
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	9f 93       	push	r25
     63a:	8f 93       	push	r24
     63c:	1f 93       	push	r17
     63e:	0f 93       	push	r16
     640:	06 d4       	rcall	.+2060   	; 0xe4e <sprintf>
     642:	8d b7       	in	r24, 0x3d	; 61
     644:	9e b7       	in	r25, 0x3e	; 62
     646:	08 96       	adiw	r24, 0x08	; 8
     648:	0f b6       	in	r0, 0x3f	; 63
     64a:	f8 94       	cli
     64c:	9e bf       	out	0x3e, r25	; 62
     64e:	0f be       	out	0x3f, r0	; 63
     650:	8d bf       	out	0x3d, r24	; 61
     652:	ab c0       	rjmp	.+342    	; 0x7aa <printData+0x3d8>
	}
	
	if (state == 1 || state == 2 || state == 3 || state == 4) {
     654:	c6 01       	movw	r24, r12
     656:	01 97       	sbiw	r24, 0x01	; 1
     658:	04 97       	sbiw	r24, 0x04	; 4
     65a:	50 f4       	brcc	.+20     	; 0x670 <printData+0x29e>
		sprintf(dateBuff, "--/--/----      ");
     65c:	81 e1       	ldi	r24, 0x11	; 17
     65e:	e5 eb       	ldi	r30, 0xB5	; 181
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	af 2d       	mov	r26, r15
     664:	b7 2d       	mov	r27, r7
     666:	01 90       	ld	r0, Z+
     668:	0d 92       	st	X+, r0
     66a:	8a 95       	dec	r24
     66c:	e1 f7       	brne	.-8      	; 0x666 <printData+0x294>
     66e:	90 c0       	rjmp	.+288    	; 0x790 <printData+0x3be>
		} else if (state == 5) {
     670:	95 e0       	ldi	r25, 0x05	; 5
     672:	c9 16       	cp	r12, r25
     674:	d1 04       	cpc	r13, r1
     676:	81 f4       	brne	.+32     	; 0x698 <printData+0x2c6>
		sprintf(dateBuff, "%02i/--/----      ", currValue);
     678:	9f 92       	push	r9
     67a:	8f 92       	push	r8
     67c:	86 ec       	ldi	r24, 0xC6	; 198
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	9f 93       	push	r25
     682:	8f 93       	push	r24
     684:	7f 92       	push	r7
     686:	ff 92       	push	r15
     688:	e2 d3       	rcall	.+1988   	; 0xe4e <sprintf>
     68a:	0f 90       	pop	r0
     68c:	0f 90       	pop	r0
     68e:	0f 90       	pop	r0
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
     696:	7c c0       	rjmp	.+248    	; 0x790 <printData+0x3be>
		} else if (state == 6) {
     698:	86 e0       	ldi	r24, 0x06	; 6
     69a:	c8 16       	cp	r12, r24
     69c:	d1 04       	cpc	r13, r1
     69e:	c1 f4       	brne	.+48     	; 0x6d0 <printData+0x2fe>
		sprintf(dateBuff, "%02i/%02i/----      ", cal->month, currValue);
     6a0:	9f 92       	push	r9
     6a2:	8f 92       	push	r8
     6a4:	8b 81       	ldd	r24, Y+3	; 0x03
     6a6:	86 95       	lsr	r24
     6a8:	86 95       	lsr	r24
     6aa:	8f 70       	andi	r24, 0x0F	; 15
     6ac:	1f 92       	push	r1
     6ae:	8f 93       	push	r24
     6b0:	89 ed       	ldi	r24, 0xD9	; 217
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	9f 93       	push	r25
     6b6:	8f 93       	push	r24
     6b8:	7f 92       	push	r7
     6ba:	ff 92       	push	r15
     6bc:	c8 d3       	rcall	.+1936   	; 0xe4e <sprintf>
     6be:	8d b7       	in	r24, 0x3d	; 61
     6c0:	9e b7       	in	r25, 0x3e	; 62
     6c2:	08 96       	adiw	r24, 0x08	; 8
     6c4:	0f b6       	in	r0, 0x3f	; 63
     6c6:	f8 94       	cli
     6c8:	9e bf       	out	0x3e, r25	; 62
     6ca:	0f be       	out	0x3f, r0	; 63
     6cc:	8d bf       	out	0x3d, r24	; 61
     6ce:	60 c0       	rjmp	.+192    	; 0x790 <printData+0x3be>
		} else if (state == 7) {
     6d0:	97 e0       	ldi	r25, 0x07	; 7
     6d2:	c9 16       	cp	r12, r25
     6d4:	d1 04       	cpc	r13, r1
     6d6:	21 f5       	brne	.+72     	; 0x720 <printData+0x34e>
		sprintf(dateBuff, "%02i/%02i/%04i      ", cal->month, cal->day, currValue);
     6d8:	9f 92       	push	r9
     6da:	8f 92       	push	r8
     6dc:	9a 81       	ldd	r25, Y+2	; 0x02
     6de:	96 95       	lsr	r25
     6e0:	8b 81       	ldd	r24, Y+3	; 0x03
     6e2:	28 2f       	mov	r18, r24
     6e4:	27 95       	ror	r18
     6e6:	22 27       	eor	r18, r18
     6e8:	27 95       	ror	r18
     6ea:	92 2b       	or	r25, r18
     6ec:	86 95       	lsr	r24
     6ee:	81 70       	andi	r24, 0x01	; 1
     6f0:	8f 93       	push	r24
     6f2:	9f 93       	push	r25
     6f4:	8b 81       	ldd	r24, Y+3	; 0x03
     6f6:	86 95       	lsr	r24
     6f8:	86 95       	lsr	r24
     6fa:	8f 70       	andi	r24, 0x0F	; 15
     6fc:	1f 92       	push	r1
     6fe:	8f 93       	push	r24
     700:	8e ee       	ldi	r24, 0xEE	; 238
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	9f 93       	push	r25
     706:	8f 93       	push	r24
     708:	7f 92       	push	r7
     70a:	ff 92       	push	r15
     70c:	a0 d3       	rcall	.+1856   	; 0xe4e <sprintf>
     70e:	8d b7       	in	r24, 0x3d	; 61
     710:	9e b7       	in	r25, 0x3e	; 62
     712:	0a 96       	adiw	r24, 0x0a	; 10
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	f8 94       	cli
     718:	9e bf       	out	0x3e, r25	; 62
     71a:	0f be       	out	0x3f, r0	; 63
     71c:	8d bf       	out	0x3d, r24	; 61
     71e:	38 c0       	rjmp	.+112    	; 0x790 <printData+0x3be>
		} else if (state == 0) {
     720:	cd 28       	or	r12, r13
     722:	b1 f5       	brne	.+108    	; 0x790 <printData+0x3be>
		sprintf(dateBuff, "%02i/%02i/%04i      ", cal->month, cal->day, cal->year);
     724:	9b 81       	ldd	r25, Y+3	; 0x03
     726:	92 95       	swap	r25
     728:	96 95       	lsr	r25
     72a:	96 95       	lsr	r25
     72c:	93 70       	andi	r25, 0x03	; 3
     72e:	8c 81       	ldd	r24, Y+4	; 0x04
     730:	28 2f       	mov	r18, r24
     732:	22 0f       	add	r18, r18
     734:	22 0f       	add	r18, r18
     736:	92 2b       	or	r25, r18
     738:	82 95       	swap	r24
     73a:	86 95       	lsr	r24
     73c:	86 95       	lsr	r24
     73e:	83 70       	andi	r24, 0x03	; 3
     740:	2d 81       	ldd	r18, Y+5	; 0x05
     742:	2f 70       	andi	r18, 0x0F	; 15
     744:	22 0f       	add	r18, r18
     746:	22 0f       	add	r18, r18
     748:	82 2b       	or	r24, r18
     74a:	8f 93       	push	r24
     74c:	9f 93       	push	r25
     74e:	9a 81       	ldd	r25, Y+2	; 0x02
     750:	96 95       	lsr	r25
     752:	8b 81       	ldd	r24, Y+3	; 0x03
     754:	28 2f       	mov	r18, r24
     756:	27 95       	ror	r18
     758:	22 27       	eor	r18, r18
     75a:	27 95       	ror	r18
     75c:	92 2b       	or	r25, r18
     75e:	86 95       	lsr	r24
     760:	81 70       	andi	r24, 0x01	; 1
     762:	8f 93       	push	r24
     764:	9f 93       	push	r25
     766:	8b 81       	ldd	r24, Y+3	; 0x03
     768:	86 95       	lsr	r24
     76a:	86 95       	lsr	r24
     76c:	8f 70       	andi	r24, 0x0F	; 15
     76e:	1f 92       	push	r1
     770:	8f 93       	push	r24
     772:	8e ee       	ldi	r24, 0xEE	; 238
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	9f 93       	push	r25
     778:	8f 93       	push	r24
     77a:	7f 92       	push	r7
     77c:	ff 92       	push	r15
     77e:	67 d3       	rcall	.+1742   	; 0xe4e <sprintf>
     780:	8d b7       	in	r24, 0x3d	; 61
     782:	9e b7       	in	r25, 0x3e	; 62
     784:	0a 96       	adiw	r24, 0x0a	; 10
     786:	0f b6       	in	r0, 0x3f	; 63
     788:	f8 94       	cli
     78a:	9e bf       	out	0x3e, r25	; 62
     78c:	0f be       	out	0x3f, r0	; 63
     78e:	8d bf       	out	0x3d, r24	; 61
	}

	pos_lcd(0,0);
     790:	60 e0       	ldi	r22, 0x00	; 0
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	d1 dc       	rcall	.-1630   	; 0x138 <pos_lcd>
	put_str_lcd(dateBuff);
     796:	8f 2d       	mov	r24, r15
     798:	97 2d       	mov	r25, r7
     79a:	e0 dc       	rcall	.-1600   	; 0x15c <put_str_lcd>
	pos_lcd(1,0);
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	cb dc       	rcall	.-1642   	; 0x138 <pos_lcd>
	put_str_lcd(timeBuff);
     7a2:	80 2f       	mov	r24, r16
     7a4:	91 2f       	mov	r25, r17
     7a6:	da dc       	rcall	.-1612   	; 0x15c <put_str_lcd>
     7a8:	08 c0       	rjmp	.+16     	; 0x7ba <printData+0x3e8>
		sprintf(timeBuff,"%02i:%02i:-- %s     ", formatHour(cal->hour, isMilitary), currValue, isMilitary ? "  " : "--");
		} else if (state == 1) {
		sprintf(timeBuff,"%02i:--:-- %s     ", currValue, isMilitary ? "  " : "--");
	}
	
	if (state == 1 || state == 2 || state == 3 || state == 4) {
     7aa:	91 e0       	ldi	r25, 0x01	; 1
     7ac:	c9 1a       	sub	r12, r25
     7ae:	d1 08       	sbc	r13, r1
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	c8 16       	cp	r12, r24
     7b4:	d1 04       	cpc	r13, r1
     7b6:	60 f7       	brcc	.-40     	; 0x790 <printData+0x3be>
     7b8:	51 cf       	rjmp	.-350    	; 0x65c <printData+0x28a>

	pos_lcd(0,0);
	put_str_lcd(dateBuff);
	pos_lcd(1,0);
	put_str_lcd(timeBuff);
}
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	1f 91       	pop	r17
     7c0:	0f 91       	pop	r16
     7c2:	ff 90       	pop	r15
     7c4:	ef 90       	pop	r14
     7c6:	df 90       	pop	r13
     7c8:	cf 90       	pop	r12
     7ca:	bf 90       	pop	r11
     7cc:	af 90       	pop	r10
     7ce:	9f 90       	pop	r9
     7d0:	8f 90       	pop	r8
     7d2:	7f 90       	pop	r7
     7d4:	08 95       	ret

000007d6 <main>:

int main (void)
{
     7d6:	cf 93       	push	r28
     7d8:	df 93       	push	r29
     7da:	cd b7       	in	r28, 0x3d	; 61
     7dc:	de b7       	in	r29, 0x3e	; 62
     7de:	c0 54       	subi	r28, 0x40	; 64
     7e0:	d1 09       	sbc	r29, r1
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	de bf       	out	0x3e, r29	; 62
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	cd bf       	out	0x3d, r28	; 61
	board_init();
     7ec:	50 dc       	rcall	.-1888   	; 0x8e <board_init>
	ini_lcd();
     7ee:	81 dc       	rcall	.-1790   	; 0xf2 <ini_lcd>
	ini_avr();
     7f0:	4f dc       	rcall	.-1890   	; 0x90 <ini_avr>
	wdt_disable();
     7f2:	88 e1       	ldi	r24, 0x18	; 24
     7f4:	0f b6       	in	r0, 0x3f	; 63
     7f6:	f8 94       	cli
     7f8:	81 bd       	out	0x21, r24	; 33
     7fa:	11 bc       	out	0x21, r1	; 33
     7fc:	0f be       	out	0x3f, r0	; 63
	calendar.sec =50 ;
	calendar.min = 59;
     7fe:	82 ef       	ldi	r24, 0xF2	; 242
     800:	80 93 1e 01 	sts	0x011E, r24
	calendar.hour= 23;
     804:	8e e7       	ldi	r24, 0x7E	; 126
     806:	80 93 1f 01 	sts	0x011F, r24
	calendar.day = 28;
     80a:	89 e3       	ldi	r24, 0x39	; 57
     80c:	80 93 20 01 	sts	0x0120, r24
	calendar.month = 2;
	calendar.year = 5;
     810:	88 e4       	ldi	r24, 0x48	; 72
     812:	80 93 21 01 	sts	0x0121, r24
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	80 93 22 01 	sts	0x0122, r24
     81c:	e3 e2       	ldi	r30, 0x23	; 35
     81e:	f1 e0       	ldi	r31, 0x01	; 1
     820:	80 81       	ld	r24, Z
     822:	80 7f       	andi	r24, 0xF0	; 240
     824:	80 83       	st	Z, r24
     826:	fe 01       	movw	r30, r28
     828:	31 96       	adiw	r30, 0x01	; 1
     82a:	de 2e       	mov	r13, r30
     82c:	ff 2e       	mov	r15, r31
     82e:	ce 01       	movw	r24, r28
     830:	41 96       	adiw	r24, 0x11	; 17
	//MCUCSR = 1<<JTD;
	//MCUCSR = 1<<JTD;
	bool buttonPreSta[16];
	for (int i = 0; i < 16; i++)
	{
		buttonPreSta[i] = false;
     832:	11 92       	st	Z+, r1
	
	}*/
	//MCUCSR = 1<<JTD;
	//MCUCSR = 1<<JTD;
	bool buttonPreSta[16];
	for (int i = 0; i < 16; i++)
     834:	e8 17       	cp	r30, r24
     836:	f9 07       	cpc	r31, r25
     838:	e1 f7       	brne	.-8      	; 0x832 <main+0x5c>
	{
		buttonPreSta[i] = false;
	}
	int setState =1;
	
	const unsigned char dayTbl[13] = {
     83a:	8d e0       	ldi	r24, 0x0D	; 13
     83c:	e0 e6       	ldi	r30, 0x60	; 96
     83e:	f0 e0       	ldi	r31, 0x00	; 0
     840:	de 01       	movw	r26, r28
     842:	51 96       	adiw	r26, 0x11	; 17
     844:	01 90       	ld	r0, Z+
     846:	0d 92       	st	X+, r0
     848:	8a 95       	dec	r24
     84a:	e1 f7       	brne	.-8      	; 0x844 <main+0x6e>
		31,
		30,
		31
	};
	
	clr_lcd();
     84c:	71 dc       	rcall	.-1822   	; 0x130 <clr_lcd>
	//put_lcd('5');
	put_str_lcd("Cheese are you h");
     84e:	83 e0       	ldi	r24, 0x03	; 3
     850:	91 e0       	ldi	r25, 0x01	; 1
     852:	84 dc       	rcall	.-1784   	; 0x15c <put_str_lcd>
	pos_lcd(1,0);
     854:	60 e0       	ldi	r22, 0x00	; 0
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	6f dc       	rcall	.-1826   	; 0x138 <pos_lcd>
	put_str_lcd("appy now");
     85a:	84 e1       	ldi	r24, 0x14	; 20
     85c:	91 e0       	ldi	r25, 0x01	; 1
     85e:	7e dc       	rcall	.-1796   	; 0x15c <put_str_lcd>
	char timebuff[16];
	char datebuff[16];
	int currentSetValue = 0;
	int numButtonPress = 0;
	wait_avr(1000);
     860:	88 ee       	ldi	r24, 0xE8	; 232
     862:	93 e0       	ldi	r25, 0x03	; 3
     864:	18 dc       	rcall	.-2000   	; 0x96 <wait_avr>
	clr_lcd();
     866:	64 dc       	rcall	.-1848   	; 0x130 <clr_lcd>
	bool isMilitary = true;
	
	printData(currentSetValue, setState, &calendar, datebuff, timebuff, isMilitary);
     868:	ee 24       	eor	r14, r14
     86a:	e3 94       	inc	r14
     86c:	8e 01       	movw	r16, r28
     86e:	02 5e       	subi	r16, 0xE2	; 226
     870:	1f 4f       	sbci	r17, 0xFF	; 255
     872:	9e 01       	movw	r18, r28
     874:	22 5d       	subi	r18, 0xD2	; 210
     876:	3f 4f       	sbci	r19, 0xFF	; 255
     878:	4e e1       	ldi	r20, 0x1E	; 30
     87a:	51 e0       	ldi	r21, 0x01	; 1
     87c:	61 e0       	ldi	r22, 0x01	; 1
     87e:	70 e0       	ldi	r23, 0x00	; 0
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	a6 dd       	rcall	.-1204   	; 0x3d2 <printData>
	char datebuff[16];
	int currentSetValue = 0;
	int numButtonPress = 0;
	wait_avr(1000);
	clr_lcd();
	bool isMilitary = true;
     886:	21 e0       	ldi	r18, 0x01	; 1
     888:	2e af       	std	Y+62, r18	; 0x3e
	pos_lcd(1,0);
	put_str_lcd("appy now");
	char timebuff[16];
	char datebuff[16];
	int currentSetValue = 0;
	int numButtonPress = 0;
     88a:	41 2c       	mov	r4, r1
     88c:	51 2c       	mov	r5, r1
	put_str_lcd("Cheese are you h");
	pos_lcd(1,0);
	put_str_lcd("appy now");
	char timebuff[16];
	char datebuff[16];
	int currentSetValue = 0;
     88e:	21 2c       	mov	r2, r1
     890:	31 2c       	mov	r3, r1
	bool buttonPreSta[16];
	for (int i = 0; i < 16; i++)
	{
		buttonPreSta[i] = false;
	}
	int setState =1;
     892:	aa 24       	eor	r10, r10
     894:	a3 94       	inc	r10
     896:	b1 2c       	mov	r11, r1
			if(calendar.hour == 24)
			{
				calendar.day++;
				calendar.hour=0;
			}
			if(calendar.day > dayTbl[calendar.month]+(isLeapYear(calendar.year) &&calendar.month ==2 ? 1 : 0))
     898:	df ae       	std	Y+63, r13	; 0x3f
     89a:	21 96       	adiw	r28, 0x01	; 1
     89c:	ff ae       	std	Y+63, r15	; 0x3f
     89e:	21 97       	sbiw	r28, 0x01	; 1
     8a0:	61 2c       	mov	r6, r1
     8a2:	71 2c       	mov	r7, r1
		
		put_str_lcd("Hello");
		}
		
		if(setState >0)*/
		if(setState > 0)
     8a4:	1a 14       	cp	r1, r10
     8a6:	1b 04       	cpc	r1, r11
     8a8:	0c f0       	brlt	.+2      	; 0x8ac <__stack+0x4d>
     8aa:	80 c1       	rjmp	.+768    	; 0xbac <__stack+0x34d>
		{
			int num = get_numberPres(buttonPreSta);
     8ac:	ce 01       	movw	r24, r28
     8ae:	01 96       	adiw	r24, 0x01	; 1
     8b0:	e1 dc       	rcall	.-1598   	; 0x274 <get_numberPres>
			if (num >= 0) {
     8b2:	99 23       	and	r25, r25
     8b4:	0c f4       	brge	.+2      	; 0x8b8 <__stack+0x59>
     8b6:	9b c2       	rjmp	.+1334   	; 0xdee <__stack+0x58f>
				numButtonPress++;
     8b8:	ef ef       	ldi	r30, 0xFF	; 255
     8ba:	4e 1a       	sub	r4, r30
     8bc:	5e 0a       	sbc	r5, r30
				currentSetValue= currentSetValue * 10 + num;
     8be:	91 01       	movw	r18, r2
     8c0:	22 0f       	add	r18, r18
     8c2:	33 1f       	adc	r19, r19
     8c4:	22 0c       	add	r2, r2
     8c6:	33 1c       	adc	r3, r3
     8c8:	22 0c       	add	r2, r2
     8ca:	33 1c       	adc	r3, r3
     8cc:	22 0c       	add	r2, r2
     8ce:	33 1c       	adc	r3, r3
     8d0:	22 0e       	add	r2, r18
     8d2:	33 1e       	adc	r3, r19
     8d4:	28 0e       	add	r2, r24
     8d6:	39 1e       	adc	r3, r25
				if (setState ==1) {
     8d8:	f1 e0       	ldi	r31, 0x01	; 1
     8da:	af 16       	cp	r10, r31
     8dc:	b1 04       	cpc	r11, r1
     8de:	49 f5       	brne	.+82     	; 0x932 <__stack+0xd3>
					if (numButtonPress == 2)
     8e0:	22 e0       	ldi	r18, 0x02	; 2
     8e2:	42 16       	cp	r4, r18
     8e4:	51 04       	cpc	r5, r1
     8e6:	09 f0       	breq	.+2      	; 0x8ea <__stack+0x8b>
     8e8:	54 c1       	rjmp	.+680    	; 0xb92 <__stack+0x333>
					{
						calendar.hour = formatValid(currentSetValue, setState, &calendar, dayTbl, isMilitary);
     8ea:	0e ad       	ldd	r16, Y+62	; 0x3e
     8ec:	9e 01       	movw	r18, r28
     8ee:	2f 5e       	subi	r18, 0xEF	; 239
     8f0:	3f 4f       	sbci	r19, 0xFF	; 255
     8f2:	4e e1       	ldi	r20, 0x1E	; 30
     8f4:	51 e0       	ldi	r21, 0x01	; 1
     8f6:	61 e0       	ldi	r22, 0x01	; 1
     8f8:	70 e0       	ldi	r23, 0x00	; 0
     8fa:	c1 01       	movw	r24, r2
     8fc:	16 dd       	rcall	.-1492   	; 0x32a <formatValid>
     8fe:	28 2f       	mov	r18, r24
     900:	22 95       	swap	r18
     902:	20 7f       	andi	r18, 0xF0	; 240
     904:	ef e1       	ldi	r30, 0x1F	; 31
     906:	f1 e0       	ldi	r31, 0x01	; 1
     908:	90 81       	ld	r25, Z
     90a:	9f 70       	andi	r25, 0x0F	; 15
     90c:	92 2b       	or	r25, r18
     90e:	90 83       	st	Z, r25
     910:	82 95       	swap	r24
     912:	81 70       	andi	r24, 0x01	; 1
     914:	e0 e2       	ldi	r30, 0x20	; 32
     916:	f1 e0       	ldi	r31, 0x01	; 1
     918:	90 81       	ld	r25, Z
     91a:	9e 7f       	andi	r25, 0xFE	; 254
     91c:	89 2b       	or	r24, r25
     91e:	80 83       	st	Z, r24
						currentSetValue = 0;
						setState++;
						numButtonPress = 0;
     920:	41 2c       	mov	r4, r1
     922:	51 2c       	mov	r5, r1
				currentSetValue= currentSetValue * 10 + num;
				if (setState ==1) {
					if (numButtonPress == 2)
					{
						calendar.hour = formatValid(currentSetValue, setState, &calendar, dayTbl, isMilitary);
						currentSetValue = 0;
     924:	21 2c       	mov	r2, r1
     926:	31 2c       	mov	r3, r1
						setState++;
     928:	68 94       	set
     92a:	aa 24       	eor	r10, r10
     92c:	a1 f8       	bld	r10, 1
     92e:	b1 2c       	mov	r11, r1
     930:	30 c1       	rjmp	.+608    	; 0xb92 <__stack+0x333>
						numButtonPress = 0;
					}
				}
				
				else if (setState ==2) {
     932:	f2 e0       	ldi	r31, 0x02	; 2
     934:	af 16       	cp	r10, r31
     936:	b1 04       	cpc	r11, r1
     938:	69 f5       	brne	.+90     	; 0x994 <__stack+0x135>
					if(numButtonPress == 2)
     93a:	22 e0       	ldi	r18, 0x02	; 2
     93c:	42 16       	cp	r4, r18
     93e:	51 04       	cpc	r5, r1
     940:	09 f0       	breq	.+2      	; 0x944 <__stack+0xe5>
     942:	27 c1       	rjmp	.+590    	; 0xb92 <__stack+0x333>
					{
						calendar.min = formatValid(currentSetValue, setState, &calendar, dayTbl, isMilitary);
     944:	0e ad       	ldd	r16, Y+62	; 0x3e
     946:	9e 01       	movw	r18, r28
     948:	2f 5e       	subi	r18, 0xEF	; 239
     94a:	3f 4f       	sbci	r19, 0xFF	; 255
     94c:	4e e1       	ldi	r20, 0x1E	; 30
     94e:	51 e0       	ldi	r21, 0x01	; 1
     950:	62 e0       	ldi	r22, 0x02	; 2
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	c1 01       	movw	r24, r2
     956:	e9 dc       	rcall	.-1582   	; 0x32a <formatValid>
     958:	98 2f       	mov	r25, r24
     95a:	92 95       	swap	r25
     95c:	99 0f       	add	r25, r25
     95e:	99 0f       	add	r25, r25
     960:	90 7c       	andi	r25, 0xC0	; 192
     962:	ee e1       	ldi	r30, 0x1E	; 30
     964:	f1 e0       	ldi	r31, 0x01	; 1
     966:	20 81       	ld	r18, Z
     968:	2f 73       	andi	r18, 0x3F	; 63
     96a:	92 2b       	or	r25, r18
     96c:	90 83       	st	Z, r25
     96e:	86 95       	lsr	r24
     970:	86 95       	lsr	r24
     972:	8f 70       	andi	r24, 0x0F	; 15
     974:	ef e1       	ldi	r30, 0x1F	; 31
     976:	f1 e0       	ldi	r31, 0x01	; 1
     978:	90 81       	ld	r25, Z
     97a:	90 7f       	andi	r25, 0xF0	; 240
     97c:	89 2b       	or	r24, r25
     97e:	80 83       	st	Z, r24
						currentSetValue = 0;
						setState++;
						numButtonPress = 0;
     980:	41 2c       	mov	r4, r1
     982:	51 2c       	mov	r5, r1
				
				else if (setState ==2) {
					if(numButtonPress == 2)
					{
						calendar.min = formatValid(currentSetValue, setState, &calendar, dayTbl, isMilitary);
						currentSetValue = 0;
     984:	21 2c       	mov	r2, r1
     986:	31 2c       	mov	r3, r1
						setState++;
     988:	0f 2e       	mov	r0, r31
     98a:	f3 e0       	ldi	r31, 0x03	; 3
     98c:	af 2e       	mov	r10, r31
     98e:	b1 2c       	mov	r11, r1
     990:	f0 2d       	mov	r31, r0
     992:	ff c0       	rjmp	.+510    	; 0xb92 <__stack+0x333>
						numButtonPress = 0;

					}
				}
				
				else if (setState ==3) {
     994:	f3 e0       	ldi	r31, 0x03	; 3
     996:	af 16       	cp	r10, r31
     998:	b1 04       	cpc	r11, r1
     99a:	19 f5       	brne	.+70     	; 0x9e2 <__stack+0x183>
					if(numButtonPress == 2)
     99c:	22 e0       	ldi	r18, 0x02	; 2
     99e:	42 16       	cp	r4, r18
     9a0:	51 04       	cpc	r5, r1
     9a2:	09 f0       	breq	.+2      	; 0x9a6 <__stack+0x147>
     9a4:	f6 c0       	rjmp	.+492    	; 0xb92 <__stack+0x333>
					{
						calendar.sec = formatValid(currentSetValue, setState, &calendar, dayTbl, isMilitary);
     9a6:	0e ad       	ldd	r16, Y+62	; 0x3e
     9a8:	9e 01       	movw	r18, r28
     9aa:	2f 5e       	subi	r18, 0xEF	; 239
     9ac:	3f 4f       	sbci	r19, 0xFF	; 255
     9ae:	4e e1       	ldi	r20, 0x1E	; 30
     9b0:	51 e0       	ldi	r21, 0x01	; 1
     9b2:	63 e0       	ldi	r22, 0x03	; 3
     9b4:	70 e0       	ldi	r23, 0x00	; 0
     9b6:	c1 01       	movw	r24, r2
     9b8:	b8 dc       	rcall	.-1680   	; 0x32a <formatValid>
     9ba:	8f 73       	andi	r24, 0x3F	; 63
     9bc:	ee e1       	ldi	r30, 0x1E	; 30
     9be:	f1 e0       	ldi	r31, 0x01	; 1
     9c0:	90 81       	ld	r25, Z
     9c2:	90 7c       	andi	r25, 0xC0	; 192
     9c4:	89 2b       	or	r24, r25
     9c6:	80 83       	st	Z, r24
						currentSetValue = 0;
						if(isMilitary)
     9c8:	00 23       	and	r16, r16
     9ca:	09 f4       	brne	.+2      	; 0x9ce <__stack+0x16f>
     9cc:	da c0       	rjmp	.+436    	; 0xb82 <__stack+0x323>
						}
						else
						{
							setState++;
						}
						numButtonPress = 0;
     9ce:	41 2c       	mov	r4, r1
     9d0:	51 2c       	mov	r5, r1
				
				else if (setState ==3) {
					if(numButtonPress == 2)
					{
						calendar.sec = formatValid(currentSetValue, setState, &calendar, dayTbl, isMilitary);
						currentSetValue = 0;
     9d2:	21 2c       	mov	r2, r1
     9d4:	31 2c       	mov	r3, r1
						if(isMilitary)
						{
							setState += 2;
     9d6:	0f 2e       	mov	r0, r31
     9d8:	f5 e0       	ldi	r31, 0x05	; 5
     9da:	af 2e       	mov	r10, r31
     9dc:	b1 2c       	mov	r11, r1
     9de:	f0 2d       	mov	r31, r0
     9e0:	d8 c0       	rjmp	.+432    	; 0xb92 <__stack+0x333>
						}
						numButtonPress = 0;
					}
				}
				
				else if (setState ==4) {
     9e2:	24 e0       	ldi	r18, 0x04	; 4
     9e4:	a2 16       	cp	r10, r18
     9e6:	b1 04       	cpc	r11, r1
     9e8:	e9 f5       	brne	.+122    	; 0xa64 <__stack+0x205>
					if (numButtonPress == 1) {
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	48 16       	cp	r4, r24
     9ee:	51 04       	cpc	r5, r1
     9f0:	09 f0       	breq	.+2      	; 0x9f4 <__stack+0x195>
     9f2:	cf c0       	rjmp	.+414    	; 0xb92 <__stack+0x333>
						// If 0, then am, leave alone. If 1, then pm, add 12 hours to the "actual" time.
						calendar.hour += formatValid(currentSetValue, setState, &calendar, dayTbl, isMilitary) * 12;
     9f4:	0e ad       	ldd	r16, Y+62	; 0x3e
     9f6:	9e 01       	movw	r18, r28
     9f8:	2f 5e       	subi	r18, 0xEF	; 239
     9fa:	3f 4f       	sbci	r19, 0xFF	; 255
     9fc:	4e e1       	ldi	r20, 0x1E	; 30
     9fe:	51 e0       	ldi	r21, 0x01	; 1
     a00:	64 e0       	ldi	r22, 0x04	; 4
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	c1 01       	movw	r24, r2
     a06:	91 dc       	rcall	.-1758   	; 0x32a <formatValid>
     a08:	98 2f       	mov	r25, r24
     a0a:	99 0f       	add	r25, r25
     a0c:	89 0f       	add	r24, r25
     a0e:	38 2f       	mov	r19, r24
     a10:	33 0f       	add	r19, r19
     a12:	33 0f       	add	r19, r19
     a14:	ef e1       	ldi	r30, 0x1F	; 31
     a16:	f1 e0       	ldi	r31, 0x01	; 1
     a18:	20 81       	ld	r18, Z
     a1a:	92 2f       	mov	r25, r18
     a1c:	92 95       	swap	r25
     a1e:	9f 70       	andi	r25, 0x0F	; 15
     a20:	e0 e2       	ldi	r30, 0x20	; 32
     a22:	f1 e0       	ldi	r31, 0x01	; 1
     a24:	80 81       	ld	r24, Z
     a26:	48 2f       	mov	r20, r24
     a28:	41 70       	andi	r20, 0x01	; 1
     a2a:	42 95       	swap	r20
     a2c:	40 7f       	andi	r20, 0xF0	; 240
     a2e:	94 2b       	or	r25, r20
     a30:	93 0f       	add	r25, r19
     a32:	39 2f       	mov	r19, r25
     a34:	32 95       	swap	r19
     a36:	30 7f       	andi	r19, 0xF0	; 240
     a38:	2f 70       	andi	r18, 0x0F	; 15
     a3a:	23 2b       	or	r18, r19
     a3c:	ef e1       	ldi	r30, 0x1F	; 31
     a3e:	f1 e0       	ldi	r31, 0x01	; 1
     a40:	20 83       	st	Z, r18
     a42:	92 95       	swap	r25
     a44:	91 70       	andi	r25, 0x01	; 1
     a46:	8e 7f       	andi	r24, 0xFE	; 254
     a48:	89 2b       	or	r24, r25
     a4a:	e0 e2       	ldi	r30, 0x20	; 32
     a4c:	f1 e0       	ldi	r31, 0x01	; 1
     a4e:	80 83       	st	Z, r24
						currentSetValue = 0;
						setState++;
						numButtonPress = 0;
     a50:	41 2c       	mov	r4, r1
     a52:	51 2c       	mov	r5, r1
				
				else if (setState ==4) {
					if (numButtonPress == 1) {
						// If 0, then am, leave alone. If 1, then pm, add 12 hours to the "actual" time.
						calendar.hour += formatValid(currentSetValue, setState, &calendar, dayTbl, isMilitary) * 12;
						currentSetValue = 0;
     a54:	21 2c       	mov	r2, r1
     a56:	31 2c       	mov	r3, r1
						setState++;
     a58:	0f 2e       	mov	r0, r31
     a5a:	f5 e0       	ldi	r31, 0x05	; 5
     a5c:	af 2e       	mov	r10, r31
     a5e:	b1 2c       	mov	r11, r1
     a60:	f0 2d       	mov	r31, r0
     a62:	97 c0       	rjmp	.+302    	; 0xb92 <__stack+0x333>
						numButtonPress = 0;
					}
				}
				
				else if (setState ==5) {
     a64:	f5 e0       	ldi	r31, 0x05	; 5
     a66:	af 16       	cp	r10, r31
     a68:	b1 04       	cpc	r11, r1
     a6a:	11 f5       	brne	.+68     	; 0xab0 <__stack+0x251>
					if(numButtonPress == 2)
     a6c:	22 e0       	ldi	r18, 0x02	; 2
     a6e:	42 16       	cp	r4, r18
     a70:	51 04       	cpc	r5, r1
     a72:	09 f0       	breq	.+2      	; 0xa76 <__stack+0x217>
     a74:	8e c0       	rjmp	.+284    	; 0xb92 <__stack+0x333>
					{
						calendar.month = formatValid(currentSetValue, setState, &calendar, dayTbl, isMilitary);
     a76:	0e ad       	ldd	r16, Y+62	; 0x3e
     a78:	9e 01       	movw	r18, r28
     a7a:	2f 5e       	subi	r18, 0xEF	; 239
     a7c:	3f 4f       	sbci	r19, 0xFF	; 255
     a7e:	4e e1       	ldi	r20, 0x1E	; 30
     a80:	51 e0       	ldi	r21, 0x01	; 1
     a82:	65 e0       	ldi	r22, 0x05	; 5
     a84:	70 e0       	ldi	r23, 0x00	; 0
     a86:	c1 01       	movw	r24, r2
     a88:	50 dc       	rcall	.-1888   	; 0x32a <formatValid>
     a8a:	8f 70       	andi	r24, 0x0F	; 15
     a8c:	88 0f       	add	r24, r24
     a8e:	88 0f       	add	r24, r24
     a90:	e1 e2       	ldi	r30, 0x21	; 33
     a92:	f1 e0       	ldi	r31, 0x01	; 1
     a94:	90 81       	ld	r25, Z
     a96:	93 7c       	andi	r25, 0xC3	; 195
     a98:	89 2b       	or	r24, r25
     a9a:	80 83       	st	Z, r24
						currentSetValue = 0;
						setState++;
						numButtonPress = 0;
     a9c:	41 2c       	mov	r4, r1
     a9e:	51 2c       	mov	r5, r1
				
				else if (setState ==5) {
					if(numButtonPress == 2)
					{
						calendar.month = formatValid(currentSetValue, setState, &calendar, dayTbl, isMilitary);
						currentSetValue = 0;
     aa0:	21 2c       	mov	r2, r1
     aa2:	31 2c       	mov	r3, r1
						setState++;
     aa4:	0f 2e       	mov	r0, r31
     aa6:	f6 e0       	ldi	r31, 0x06	; 6
     aa8:	af 2e       	mov	r10, r31
     aaa:	b1 2c       	mov	r11, r1
     aac:	f0 2d       	mov	r31, r0
     aae:	71 c0       	rjmp	.+226    	; 0xb92 <__stack+0x333>
						numButtonPress = 0;
					}
				}
				
				else if (setState ==6) {
     ab0:	f6 e0       	ldi	r31, 0x06	; 6
     ab2:	af 16       	cp	r10, r31
     ab4:	b1 04       	cpc	r11, r1
     ab6:	61 f5       	brne	.+88     	; 0xb10 <__stack+0x2b1>
					if(numButtonPress == 2)
     ab8:	22 e0       	ldi	r18, 0x02	; 2
     aba:	42 16       	cp	r4, r18
     abc:	51 04       	cpc	r5, r1
     abe:	09 f0       	breq	.+2      	; 0xac2 <__stack+0x263>
     ac0:	68 c0       	rjmp	.+208    	; 0xb92 <__stack+0x333>
					{
						calendar.day = formatValid(currentSetValue, setState, &calendar, dayTbl, isMilitary);
     ac2:	0e ad       	ldd	r16, Y+62	; 0x3e
     ac4:	9e 01       	movw	r18, r28
     ac6:	2f 5e       	subi	r18, 0xEF	; 239
     ac8:	3f 4f       	sbci	r19, 0xFF	; 255
     aca:	4e e1       	ldi	r20, 0x1E	; 30
     acc:	51 e0       	ldi	r21, 0x01	; 1
     ace:	66 e0       	ldi	r22, 0x06	; 6
     ad0:	70 e0       	ldi	r23, 0x00	; 0
     ad2:	c1 01       	movw	r24, r2
     ad4:	2a dc       	rcall	.-1964   	; 0x32a <formatValid>
     ad6:	28 2f       	mov	r18, r24
     ad8:	22 0f       	add	r18, r18
     ada:	e0 e2       	ldi	r30, 0x20	; 32
     adc:	f1 e0       	ldi	r31, 0x01	; 1
     ade:	30 81       	ld	r19, Z
     ae0:	31 70       	andi	r19, 0x01	; 1
     ae2:	23 2b       	or	r18, r19
     ae4:	20 83       	st	Z, r18
     ae6:	88 1f       	adc	r24, r24
     ae8:	88 27       	eor	r24, r24
     aea:	88 1f       	adc	r24, r24
     aec:	e1 e2       	ldi	r30, 0x21	; 33
     aee:	f1 e0       	ldi	r31, 0x01	; 1
     af0:	20 81       	ld	r18, Z
     af2:	2e 7f       	andi	r18, 0xFE	; 254
     af4:	82 2b       	or	r24, r18
     af6:	90 fb       	bst	r25, 0
     af8:	81 f9       	bld	r24, 1
     afa:	80 83       	st	Z, r24
						currentSetValue = 0;
						setState++;
						numButtonPress = 0;
     afc:	41 2c       	mov	r4, r1
     afe:	51 2c       	mov	r5, r1
				
				else if (setState ==6) {
					if(numButtonPress == 2)
					{
						calendar.day = formatValid(currentSetValue, setState, &calendar, dayTbl, isMilitary);
						currentSetValue = 0;
     b00:	21 2c       	mov	r2, r1
     b02:	31 2c       	mov	r3, r1
						setState++;
     b04:	0f 2e       	mov	r0, r31
     b06:	f7 e0       	ldi	r31, 0x07	; 7
     b08:	af 2e       	mov	r10, r31
     b0a:	b1 2c       	mov	r11, r1
     b0c:	f0 2d       	mov	r31, r0
     b0e:	41 c0       	rjmp	.+130    	; 0xb92 <__stack+0x333>
						numButtonPress = 0;
					}
				}
				
				else if (setState ==7) {
     b10:	f7 e0       	ldi	r31, 0x07	; 7
     b12:	af 16       	cp	r10, r31
     b14:	b1 04       	cpc	r11, r1
     b16:	e9 f5       	brne	.+122    	; 0xb92 <__stack+0x333>
					if(numButtonPress == 4)
     b18:	24 e0       	ldi	r18, 0x04	; 4
     b1a:	42 16       	cp	r4, r18
     b1c:	51 04       	cpc	r5, r1
     b1e:	c9 f5       	brne	.+114    	; 0xb92 <__stack+0x333>
					{
						calendar.year = formatValid(currentSetValue, setState, &calendar, dayTbl, isMilitary);
     b20:	0e ad       	ldd	r16, Y+62	; 0x3e
     b22:	9e 01       	movw	r18, r28
     b24:	2f 5e       	subi	r18, 0xEF	; 239
     b26:	3f 4f       	sbci	r19, 0xFF	; 255
     b28:	4e e1       	ldi	r20, 0x1E	; 30
     b2a:	51 e0       	ldi	r21, 0x01	; 1
     b2c:	67 e0       	ldi	r22, 0x07	; 7
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	c1 01       	movw	r24, r2
     b32:	fb db       	rcall	.-2058   	; 0x32a <formatValid>
     b34:	28 2f       	mov	r18, r24
     b36:	22 95       	swap	r18
     b38:	22 0f       	add	r18, r18
     b3a:	22 0f       	add	r18, r18
     b3c:	20 7c       	andi	r18, 0xC0	; 192
     b3e:	e1 e2       	ldi	r30, 0x21	; 33
     b40:	f1 e0       	ldi	r31, 0x01	; 1
     b42:	30 81       	ld	r19, Z
     b44:	3f 73       	andi	r19, 0x3F	; 63
     b46:	23 2b       	or	r18, r19
     b48:	20 83       	st	Z, r18
     b4a:	29 2f       	mov	r18, r25
     b4c:	22 95       	swap	r18
     b4e:	22 0f       	add	r18, r18
     b50:	22 0f       	add	r18, r18
     b52:	20 7c       	andi	r18, 0xC0	; 192
     b54:	86 95       	lsr	r24
     b56:	86 95       	lsr	r24
     b58:	82 2b       	or	r24, r18
     b5a:	e2 e2       	ldi	r30, 0x22	; 34
     b5c:	f1 e0       	ldi	r31, 0x01	; 1
     b5e:	80 83       	st	Z, r24
     b60:	89 2f       	mov	r24, r25
     b62:	86 95       	lsr	r24
     b64:	86 95       	lsr	r24
     b66:	8f 70       	andi	r24, 0x0F	; 15
     b68:	e3 e2       	ldi	r30, 0x23	; 35
     b6a:	f1 e0       	ldi	r31, 0x01	; 1
     b6c:	90 81       	ld	r25, Z
     b6e:	90 7f       	andi	r25, 0xF0	; 240
     b70:	89 2b       	or	r24, r25
     b72:	80 83       	st	Z, r24
						currentSetValue = 0;
						setState = 0;
						numButtonPress = 0;
     b74:	41 2c       	mov	r4, r1
     b76:	51 2c       	mov	r5, r1
				
				else if (setState ==7) {
					if(numButtonPress == 4)
					{
						calendar.year = formatValid(currentSetValue, setState, &calendar, dayTbl, isMilitary);
						currentSetValue = 0;
     b78:	21 2c       	mov	r2, r1
     b7a:	31 2c       	mov	r3, r1
						setState = 0;
     b7c:	a1 2c       	mov	r10, r1
     b7e:	b1 2c       	mov	r11, r1
     b80:	08 c0       	rjmp	.+16     	; 0xb92 <__stack+0x333>
						}
						else
						{
							setState++;
						}
						numButtonPress = 0;
     b82:	41 2c       	mov	r4, r1
     b84:	51 2c       	mov	r5, r1
				
				else if (setState ==3) {
					if(numButtonPress == 2)
					{
						calendar.sec = formatValid(currentSetValue, setState, &calendar, dayTbl, isMilitary);
						currentSetValue = 0;
     b86:	21 2c       	mov	r2, r1
     b88:	31 2c       	mov	r3, r1
						{
							setState += 2;
						}
						else
						{
							setState++;
     b8a:	68 94       	set
     b8c:	aa 24       	eor	r10, r10
     b8e:	a2 f8       	bld	r10, 2
     b90:	b1 2c       	mov	r11, r1
						setState = 0;
						numButtonPress = 0;
					}
				}
				
				printData(currentSetValue, setState, &calendar, datebuff, timebuff, isMilitary);
     b92:	ee ac       	ldd	r14, Y+62	; 0x3e
     b94:	8e 01       	movw	r16, r28
     b96:	02 5e       	subi	r16, 0xE2	; 226
     b98:	1f 4f       	sbci	r17, 0xFF	; 255
     b9a:	9e 01       	movw	r18, r28
     b9c:	22 5d       	subi	r18, 0xD2	; 210
     b9e:	3f 4f       	sbci	r19, 0xFF	; 255
     ba0:	4e e1       	ldi	r20, 0x1E	; 30
     ba2:	51 e0       	ldi	r21, 0x01	; 1
     ba4:	b5 01       	movw	r22, r10
     ba6:	c1 01       	movw	r24, r2
     ba8:	14 dc       	rcall	.-2008   	; 0x3d2 <printData>
     baa:	21 c1       	rjmp	.+578    	; 0xdee <__stack+0x58f>
			//else{
			wait_avr(1000);*/
		}
		else{
			
			wait_avr(1000);
     bac:	88 ee       	ldi	r24, 0xE8	; 232
     bae:	93 e0       	ldi	r25, 0x03	; 3
     bb0:	72 da       	rcall	.-2844   	; 0x96 <wait_avr>
			clr_lcd();
     bb2:	be da       	rcall	.-2692   	; 0x130 <clr_lcd>
			
			calendar.sec++;
     bb4:	ee e1       	ldi	r30, 0x1E	; 30
     bb6:	f1 e0       	ldi	r31, 0x01	; 1
     bb8:	90 81       	ld	r25, Z
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	89 0f       	add	r24, r25
     bbe:	8f 73       	andi	r24, 0x3F	; 63
     bc0:	90 7c       	andi	r25, 0xC0	; 192
     bc2:	89 2b       	or	r24, r25
     bc4:	80 83       	st	Z, r24
			if(calendar.sec == 60)
     bc6:	8f 73       	andi	r24, 0x3F	; 63
     bc8:	8c 33       	cpi	r24, 0x3C	; 60
     bca:	e1 f4       	brne	.+56     	; 0xc04 <__stack+0x3a5>
			{
				calendar.min++;
     bcc:	20 81       	ld	r18, Z
     bce:	22 95       	swap	r18
     bd0:	26 95       	lsr	r18
     bd2:	26 95       	lsr	r18
     bd4:	23 70       	andi	r18, 0x03	; 3
     bd6:	ef e1       	ldi	r30, 0x1F	; 31
     bd8:	f1 e0       	ldi	r31, 0x01	; 1
     bda:	90 81       	ld	r25, Z
     bdc:	89 2f       	mov	r24, r25
     bde:	8f 70       	andi	r24, 0x0F	; 15
     be0:	88 0f       	add	r24, r24
     be2:	88 0f       	add	r24, r24
     be4:	82 2b       	or	r24, r18
     be6:	8f 5f       	subi	r24, 0xFF	; 255
     be8:	28 2f       	mov	r18, r24
     bea:	2f 73       	andi	r18, 0x3F	; 63
     bec:	26 95       	lsr	r18
     bee:	26 95       	lsr	r18
     bf0:	90 7f       	andi	r25, 0xF0	; 240
     bf2:	92 2b       	or	r25, r18
     bf4:	90 83       	st	Z, r25
				calendar.sec = 0;
     bf6:	82 95       	swap	r24
     bf8:	88 0f       	add	r24, r24
     bfa:	88 0f       	add	r24, r24
     bfc:	80 7c       	andi	r24, 0xC0	; 192
     bfe:	ee e1       	ldi	r30, 0x1E	; 30
     c00:	f1 e0       	ldi	r31, 0x01	; 1
     c02:	80 83       	st	Z, r24
			}
			if(calendar.min == 60)
     c04:	ee e1       	ldi	r30, 0x1E	; 30
     c06:	f1 e0       	ldi	r31, 0x01	; 1
     c08:	90 81       	ld	r25, Z
     c0a:	92 95       	swap	r25
     c0c:	96 95       	lsr	r25
     c0e:	96 95       	lsr	r25
     c10:	93 70       	andi	r25, 0x03	; 3
     c12:	ef e1       	ldi	r30, 0x1F	; 31
     c14:	f1 e0       	ldi	r31, 0x01	; 1
     c16:	80 81       	ld	r24, Z
     c18:	8f 70       	andi	r24, 0x0F	; 15
     c1a:	88 0f       	add	r24, r24
     c1c:	88 0f       	add	r24, r24
     c1e:	89 2b       	or	r24, r25
     c20:	8c 33       	cpi	r24, 0x3C	; 60
     c22:	e1 f4       	brne	.+56     	; 0xc5c <__stack+0x3fd>
			{
				
				calendar.hour++;
     c24:	20 81       	ld	r18, Z
     c26:	22 95       	swap	r18
     c28:	2f 70       	andi	r18, 0x0F	; 15
     c2a:	e0 e2       	ldi	r30, 0x20	; 32
     c2c:	f1 e0       	ldi	r31, 0x01	; 1
     c2e:	90 81       	ld	r25, Z
     c30:	89 2f       	mov	r24, r25
     c32:	81 70       	andi	r24, 0x01	; 1
     c34:	82 95       	swap	r24
     c36:	80 7f       	andi	r24, 0xF0	; 240
     c38:	82 2b       	or	r24, r18
     c3a:	8f 5f       	subi	r24, 0xFF	; 255
     c3c:	84 fb       	bst	r24, 4
     c3e:	22 27       	eor	r18, r18
     c40:	20 f9       	bld	r18, 0
     c42:	9e 7f       	andi	r25, 0xFE	; 254
     c44:	92 2b       	or	r25, r18
     c46:	90 83       	st	Z, r25
				calendar.min = 0;
     c48:	ee e1       	ldi	r30, 0x1E	; 30
     c4a:	f1 e0       	ldi	r31, 0x01	; 1
     c4c:	90 81       	ld	r25, Z
     c4e:	9f 73       	andi	r25, 0x3F	; 63
     c50:	90 83       	st	Z, r25
     c52:	82 95       	swap	r24
     c54:	80 7f       	andi	r24, 0xF0	; 240
     c56:	ef e1       	ldi	r30, 0x1F	; 31
     c58:	f1 e0       	ldi	r31, 0x01	; 1
     c5a:	80 83       	st	Z, r24
			}
			if(calendar.hour == 24)
     c5c:	ef e1       	ldi	r30, 0x1F	; 31
     c5e:	f1 e0       	ldi	r31, 0x01	; 1
     c60:	90 81       	ld	r25, Z
     c62:	92 95       	swap	r25
     c64:	9f 70       	andi	r25, 0x0F	; 15
     c66:	e0 e2       	ldi	r30, 0x20	; 32
     c68:	f1 e0       	ldi	r31, 0x01	; 1
     c6a:	80 81       	ld	r24, Z
     c6c:	81 70       	andi	r24, 0x01	; 1
     c6e:	82 95       	swap	r24
     c70:	80 7f       	andi	r24, 0xF0	; 240
     c72:	89 2b       	or	r24, r25
     c74:	88 31       	cpi	r24, 0x18	; 24
     c76:	11 f5       	brne	.+68     	; 0xcbc <__stack+0x45d>
			{
				calendar.day++;
     c78:	30 81       	ld	r19, Z
     c7a:	36 95       	lsr	r19
     c7c:	e1 e2       	ldi	r30, 0x21	; 33
     c7e:	f1 e0       	ldi	r31, 0x01	; 1
     c80:	20 81       	ld	r18, Z
     c82:	42 2f       	mov	r20, r18
     c84:	47 95       	ror	r20
     c86:	44 27       	eor	r20, r20
     c88:	47 95       	ror	r20
     c8a:	84 2f       	mov	r24, r20
     c8c:	83 2b       	or	r24, r19
     c8e:	21 fb       	bst	r18, 1
     c90:	99 27       	eor	r25, r25
     c92:	90 f9       	bld	r25, 0
     c94:	01 96       	adiw	r24, 0x01	; 1
     c96:	91 70       	andi	r25, 0x01	; 1
     c98:	38 2f       	mov	r19, r24
     c9a:	33 1f       	adc	r19, r19
     c9c:	33 27       	eor	r19, r19
     c9e:	33 1f       	adc	r19, r19
     ca0:	2e 7f       	andi	r18, 0xFE	; 254
     ca2:	23 2b       	or	r18, r19
     ca4:	90 fb       	bst	r25, 0
     ca6:	21 f9       	bld	r18, 1
     ca8:	20 83       	st	Z, r18
				calendar.hour=0;
     caa:	ef e1       	ldi	r30, 0x1F	; 31
     cac:	f1 e0       	ldi	r31, 0x01	; 1
     cae:	90 81       	ld	r25, Z
     cb0:	9f 70       	andi	r25, 0x0F	; 15
     cb2:	90 83       	st	Z, r25
     cb4:	88 0f       	add	r24, r24
     cb6:	e0 e2       	ldi	r30, 0x20	; 32
     cb8:	f1 e0       	ldi	r31, 0x01	; 1
     cba:	80 83       	st	Z, r24
			}
			if(calendar.day > dayTbl[calendar.month]+(isLeapYear(calendar.year) &&calendar.month ==2 ? 1 : 0))
     cbc:	e0 e2       	ldi	r30, 0x20	; 32
     cbe:	f1 e0       	ldi	r31, 0x01	; 1
     cc0:	90 81       	ld	r25, Z
     cc2:	96 95       	lsr	r25
     cc4:	e1 e2       	ldi	r30, 0x21	; 33
     cc6:	f1 e0       	ldi	r31, 0x01	; 1
     cc8:	80 81       	ld	r24, Z
     cca:	28 2f       	mov	r18, r24
     ccc:	27 95       	ror	r18
     cce:	22 27       	eor	r18, r18
     cd0:	27 95       	ror	r18
     cd2:	c2 2e       	mov	r12, r18
     cd4:	c9 2a       	or	r12, r25
     cd6:	81 fb       	bst	r24, 1
     cd8:	dd 24       	eor	r13, r13
     cda:	d0 f8       	bld	r13, 0
     cdc:	98 2e       	mov	r9, r24
     cde:	96 94       	lsr	r9
     ce0:	96 94       	lsr	r9
     ce2:	f9 2d       	mov	r31, r9
     ce4:	ff 70       	andi	r31, 0x0F	; 15
     ce6:	9f 2e       	mov	r9, r31
     ce8:	e1 e1       	ldi	r30, 0x11	; 17
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	ec 0f       	add	r30, r28
     cee:	fd 1f       	adc	r31, r29
     cf0:	e9 0d       	add	r30, r9
     cf2:	f1 1d       	adc	r31, r1
     cf4:	e0 80       	ld	r14, Z
     cf6:	f1 2c       	mov	r15, r1
     cf8:	82 95       	swap	r24
     cfa:	86 95       	lsr	r24
     cfc:	86 95       	lsr	r24
     cfe:	83 70       	andi	r24, 0x03	; 3
     d00:	e2 e2       	ldi	r30, 0x22	; 34
     d02:	f1 e0       	ldi	r31, 0x01	; 1
     d04:	90 81       	ld	r25, Z
     d06:	29 2f       	mov	r18, r25
     d08:	22 0f       	add	r18, r18
     d0a:	22 0f       	add	r18, r18
     d0c:	02 2f       	mov	r16, r18
     d0e:	08 2b       	or	r16, r24
     d10:	92 95       	swap	r25
     d12:	96 95       	lsr	r25
     d14:	96 95       	lsr	r25
     d16:	93 70       	andi	r25, 0x03	; 3
     d18:	e3 e2       	ldi	r30, 0x23	; 35
     d1a:	f1 e0       	ldi	r31, 0x01	; 1
     d1c:	80 81       	ld	r24, Z
     d1e:	8f 70       	andi	r24, 0x0F	; 15
     d20:	88 0f       	add	r24, r24
     d22:	88 0f       	add	r24, r24
     d24:	18 2f       	mov	r17, r24
     d26:	19 2b       	or	r17, r25
     d28:	c8 01       	movw	r24, r16
     d2a:	28 da       	rcall	.-2992   	; 0x17c <isLeapYear>
     d2c:	88 23       	and	r24, r24
     d2e:	61 f0       	breq	.+24     	; 0xd48 <__stack+0x4e9>
     d30:	e1 e2       	ldi	r30, 0x21	; 33
     d32:	f1 e0       	ldi	r31, 0x01	; 1
     d34:	80 81       	ld	r24, Z
     d36:	8c 73       	andi	r24, 0x3C	; 60
     d38:	31 e0       	ldi	r19, 0x01	; 1
     d3a:	20 e0       	ldi	r18, 0x00	; 0
     d3c:	88 30       	cpi	r24, 0x08	; 8
     d3e:	09 f0       	breq	.+2      	; 0xd42 <__stack+0x4e3>
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	83 2f       	mov	r24, r19
     d44:	92 2f       	mov	r25, r18
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <__stack+0x4ed>
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	e8 0e       	add	r14, r24
     d4e:	f9 1e       	adc	r15, r25
     d50:	ec 14       	cp	r14, r12
     d52:	fd 04       	cpc	r15, r13
     d54:	8c f4       	brge	.+34     	; 0xd78 <__stack+0x519>
			{
				calendar.day =1;
     d56:	e0 e2       	ldi	r30, 0x20	; 32
     d58:	f1 e0       	ldi	r31, 0x01	; 1
     d5a:	80 81       	ld	r24, Z
     d5c:	81 70       	andi	r24, 0x01	; 1
     d5e:	82 60       	ori	r24, 0x02	; 2
     d60:	80 83       	st	Z, r24
     d62:	e1 e2       	ldi	r30, 0x21	; 33
     d64:	f1 e0       	ldi	r31, 0x01	; 1
     d66:	80 81       	ld	r24, Z
				calendar.month++;
     d68:	91 e0       	ldi	r25, 0x01	; 1
     d6a:	99 0d       	add	r25, r9
     d6c:	9f 70       	andi	r25, 0x0F	; 15
     d6e:	99 0f       	add	r25, r25
     d70:	99 0f       	add	r25, r25
     d72:	80 7c       	andi	r24, 0xC0	; 192
     d74:	89 2b       	or	r24, r25
     d76:	80 83       	st	Z, r24
			}
			if(calendar.month == 13)
     d78:	e1 e2       	ldi	r30, 0x21	; 33
     d7a:	f1 e0       	ldi	r31, 0x01	; 1
     d7c:	80 81       	ld	r24, Z
     d7e:	8c 73       	andi	r24, 0x3C	; 60
     d80:	84 33       	cpi	r24, 0x34	; 52
     d82:	29 f5       	brne	.+74     	; 0xdce <__stack+0x56f>
			{
				calendar.year++;
     d84:	0f 5f       	subi	r16, 0xFF	; 255
     d86:	1f 4f       	sbci	r17, 0xFF	; 255
     d88:	1f 73       	andi	r17, 0x3F	; 63
     d8a:	90 2f       	mov	r25, r16
     d8c:	92 95       	swap	r25
     d8e:	99 0f       	add	r25, r25
     d90:	99 0f       	add	r25, r25
     d92:	90 7c       	andi	r25, 0xC0	; 192
     d94:	80 81       	ld	r24, Z
     d96:	83 70       	andi	r24, 0x03	; 3
     d98:	21 2f       	mov	r18, r17
     d9a:	22 95       	swap	r18
     d9c:	22 0f       	add	r18, r18
     d9e:	22 0f       	add	r18, r18
     da0:	20 7c       	andi	r18, 0xC0	; 192
     da2:	30 2f       	mov	r19, r16
     da4:	36 95       	lsr	r19
     da6:	36 95       	lsr	r19
     da8:	23 2b       	or	r18, r19
     daa:	e2 e2       	ldi	r30, 0x22	; 34
     dac:	f1 e0       	ldi	r31, 0x01	; 1
     dae:	20 83       	st	Z, r18
     db0:	31 2f       	mov	r19, r17
     db2:	36 95       	lsr	r19
     db4:	36 95       	lsr	r19
     db6:	3f 70       	andi	r19, 0x0F	; 15
     db8:	e3 e2       	ldi	r30, 0x23	; 35
     dba:	f1 e0       	ldi	r31, 0x01	; 1
     dbc:	20 81       	ld	r18, Z
     dbe:	20 7f       	andi	r18, 0xF0	; 240
     dc0:	23 2b       	or	r18, r19
     dc2:	20 83       	st	Z, r18
				calendar.month=1;
     dc4:	89 2b       	or	r24, r25
     dc6:	84 60       	ori	r24, 0x04	; 4
     dc8:	e1 e2       	ldi	r30, 0x21	; 33
     dca:	f1 e0       	ldi	r31, 0x01	; 1
     dcc:	80 83       	st	Z, r24
			}
			
			}*/

			//isMilitary =!isMilitary;
			if (isMilitary) {
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	fe ad       	ldd	r31, Y+62	; 0x3e
     dd2:	f8 27       	eor	r31, r24
     dd4:	fe af       	std	Y+62, r31	; 0x3e
				isMilitary = false;
			}
			else {
				isMilitary = true;
			}
			printData(currentSetValue, setState, &calendar, datebuff, timebuff, isMilitary);
     dd6:	ef 2e       	mov	r14, r31
     dd8:	8e 01       	movw	r16, r28
     dda:	02 5e       	subi	r16, 0xE2	; 226
     ddc:	1f 4f       	sbci	r17, 0xFF	; 255
     dde:	9e 01       	movw	r18, r28
     de0:	22 5d       	subi	r18, 0xD2	; 210
     de2:	3f 4f       	sbci	r19, 0xFF	; 255
     de4:	4e e1       	ldi	r20, 0x1E	; 30
     de6:	51 e0       	ldi	r21, 0x01	; 1
     de8:	b5 01       	movw	r22, r10
     dea:	c1 01       	movw	r24, r2
     dec:	f2 da       	rcall	.-2588   	; 0x3d2 <printData>
			if(calendar.hour == 24)
			{
				calendar.day++;
				calendar.hour=0;
			}
			if(calendar.day > dayTbl[calendar.month]+(isLeapYear(calendar.year) &&calendar.month ==2 ? 1 : 0))
     dee:	8f ac       	ldd	r8, Y+63	; 0x3f
     df0:	21 96       	adiw	r28, 0x01	; 1
     df2:	9f ac       	ldd	r9, Y+63	; 0x3f
     df4:	21 97       	sbiw	r28, 0x01	; 1
			else {
				isMilitary = true;
			}
			printData(currentSetValue, setState, &calendar, datebuff, timebuff, isMilitary);
		}
		for(int i =0; i <4; i++) {
     df6:	c1 2c       	mov	r12, r1
     df8:	d1 2c       	mov	r13, r1
     dfa:	16 c0       	rjmp	.+44     	; 0xe28 <__stack+0x5c9>
			for(int j = 0; j<4; j++) {
				buttonPreSta[i*4+j] = check_press(i,j);
     dfc:	b8 01       	movw	r22, r16
     dfe:	c6 01       	movw	r24, r12
     e00:	f2 d9       	rcall	.-3100   	; 0x1e6 <check_press>
     e02:	f7 01       	movw	r30, r14
     e04:	81 93       	st	Z+, r24
     e06:	7f 01       	movw	r14, r30
				isMilitary = true;
			}
			printData(currentSetValue, setState, &calendar, datebuff, timebuff, isMilitary);
		}
		for(int i =0; i <4; i++) {
			for(int j = 0; j<4; j++) {
     e08:	0f 5f       	subi	r16, 0xFF	; 255
     e0a:	1f 4f       	sbci	r17, 0xFF	; 255
     e0c:	04 30       	cpi	r16, 0x04	; 4
     e0e:	11 05       	cpc	r17, r1
     e10:	a9 f7       	brne	.-22     	; 0xdfc <__stack+0x59d>
			else {
				isMilitary = true;
			}
			printData(currentSetValue, setState, &calendar, datebuff, timebuff, isMilitary);
		}
		for(int i =0; i <4; i++) {
     e12:	ff ef       	ldi	r31, 0xFF	; 255
     e14:	cf 1a       	sub	r12, r31
     e16:	df 0a       	sbc	r13, r31
     e18:	24 e0       	ldi	r18, 0x04	; 4
     e1a:	82 0e       	add	r8, r18
     e1c:	91 1c       	adc	r9, r1
     e1e:	84 e0       	ldi	r24, 0x04	; 4
     e20:	c8 16       	cp	r12, r24
     e22:	d1 04       	cpc	r13, r1
     e24:	09 f4       	brne	.+2      	; 0xe28 <__stack+0x5c9>
     e26:	3e cd       	rjmp	.-1412   	; 0x8a4 <__stack+0x45>
			if(calendar.hour == 24)
			{
				calendar.day++;
				calendar.hour=0;
			}
			if(calendar.day > dayTbl[calendar.month]+(isLeapYear(calendar.year) &&calendar.month ==2 ? 1 : 0))
     e28:	74 01       	movw	r14, r8
     e2a:	06 2d       	mov	r16, r6
     e2c:	17 2d       	mov	r17, r7
     e2e:	e6 cf       	rjmp	.-52     	; 0xdfc <__stack+0x59d>

00000e30 <__umulhisi3>:
     e30:	a2 9f       	mul	r26, r18
     e32:	b0 01       	movw	r22, r0
     e34:	b3 9f       	mul	r27, r19
     e36:	c0 01       	movw	r24, r0
     e38:	a3 9f       	mul	r26, r19
     e3a:	70 0d       	add	r23, r0
     e3c:	81 1d       	adc	r24, r1
     e3e:	11 24       	eor	r1, r1
     e40:	91 1d       	adc	r25, r1
     e42:	b2 9f       	mul	r27, r18
     e44:	70 0d       	add	r23, r0
     e46:	81 1d       	adc	r24, r1
     e48:	11 24       	eor	r1, r1
     e4a:	91 1d       	adc	r25, r1
     e4c:	08 95       	ret

00000e4e <sprintf>:
     e4e:	ae e0       	ldi	r26, 0x0E	; 14
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	ec e2       	ldi	r30, 0x2C	; 44
     e54:	f7 e0       	ldi	r31, 0x07	; 7
     e56:	91 c2       	rjmp	.+1314   	; 0x137a <__prologue_saves__+0x1c>
     e58:	0d 89       	ldd	r16, Y+21	; 0x15
     e5a:	1e 89       	ldd	r17, Y+22	; 0x16
     e5c:	86 e0       	ldi	r24, 0x06	; 6
     e5e:	8c 83       	std	Y+4, r24	; 0x04
     e60:	1a 83       	std	Y+2, r17	; 0x02
     e62:	09 83       	std	Y+1, r16	; 0x01
     e64:	8f ef       	ldi	r24, 0xFF	; 255
     e66:	9f e7       	ldi	r25, 0x7F	; 127
     e68:	9e 83       	std	Y+6, r25	; 0x06
     e6a:	8d 83       	std	Y+5, r24	; 0x05
     e6c:	ae 01       	movw	r20, r28
     e6e:	47 5e       	subi	r20, 0xE7	; 231
     e70:	5f 4f       	sbci	r21, 0xFF	; 255
     e72:	6f 89       	ldd	r22, Y+23	; 0x17
     e74:	78 8d       	ldd	r23, Y+24	; 0x18
     e76:	ce 01       	movw	r24, r28
     e78:	01 96       	adiw	r24, 0x01	; 1
     e7a:	08 d0       	rcall	.+16     	; 0xe8c <vfprintf>
     e7c:	ef 81       	ldd	r30, Y+7	; 0x07
     e7e:	f8 85       	ldd	r31, Y+8	; 0x08
     e80:	e0 0f       	add	r30, r16
     e82:	f1 1f       	adc	r31, r17
     e84:	10 82       	st	Z, r1
     e86:	2e 96       	adiw	r28, 0x0e	; 14
     e88:	e4 e0       	ldi	r30, 0x04	; 4
     e8a:	93 c2       	rjmp	.+1318   	; 0x13b2 <__epilogue_restores__+0x1c>

00000e8c <vfprintf>:
     e8c:	ac e0       	ldi	r26, 0x0C	; 12
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	eb e4       	ldi	r30, 0x4B	; 75
     e92:	f7 e0       	ldi	r31, 0x07	; 7
     e94:	64 c2       	rjmp	.+1224   	; 0x135e <__prologue_saves__>
     e96:	7c 01       	movw	r14, r24
     e98:	6b 01       	movw	r12, r22
     e9a:	8a 01       	movw	r16, r20
     e9c:	fc 01       	movw	r30, r24
     e9e:	17 82       	std	Z+7, r1	; 0x07
     ea0:	16 82       	std	Z+6, r1	; 0x06
     ea2:	83 81       	ldd	r24, Z+3	; 0x03
     ea4:	81 ff       	sbrs	r24, 1
     ea6:	b0 c1       	rjmp	.+864    	; 0x1208 <vfprintf+0x37c>
     ea8:	ce 01       	movw	r24, r28
     eaa:	01 96       	adiw	r24, 0x01	; 1
     eac:	4c 01       	movw	r8, r24
     eae:	f7 01       	movw	r30, r14
     eb0:	93 81       	ldd	r25, Z+3	; 0x03
     eb2:	f6 01       	movw	r30, r12
     eb4:	93 fd       	sbrc	r25, 3
     eb6:	85 91       	lpm	r24, Z+
     eb8:	93 ff       	sbrs	r25, 3
     eba:	81 91       	ld	r24, Z+
     ebc:	6f 01       	movw	r12, r30
     ebe:	88 23       	and	r24, r24
     ec0:	09 f4       	brne	.+2      	; 0xec4 <vfprintf+0x38>
     ec2:	9e c1       	rjmp	.+828    	; 0x1200 <vfprintf+0x374>
     ec4:	85 32       	cpi	r24, 0x25	; 37
     ec6:	39 f4       	brne	.+14     	; 0xed6 <vfprintf+0x4a>
     ec8:	93 fd       	sbrc	r25, 3
     eca:	85 91       	lpm	r24, Z+
     ecc:	93 ff       	sbrs	r25, 3
     ece:	81 91       	ld	r24, Z+
     ed0:	6f 01       	movw	r12, r30
     ed2:	85 32       	cpi	r24, 0x25	; 37
     ed4:	21 f4       	brne	.+8      	; 0xede <vfprintf+0x52>
     ed6:	b7 01       	movw	r22, r14
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	b1 d1       	rcall	.+866    	; 0x123e <fputc>
     edc:	e8 cf       	rjmp	.-48     	; 0xeae <vfprintf+0x22>
     ede:	51 2c       	mov	r5, r1
     ee0:	31 2c       	mov	r3, r1
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	20 32       	cpi	r18, 0x20	; 32
     ee6:	a0 f4       	brcc	.+40     	; 0xf10 <vfprintf+0x84>
     ee8:	8b 32       	cpi	r24, 0x2B	; 43
     eea:	69 f0       	breq	.+26     	; 0xf06 <vfprintf+0x7a>
     eec:	30 f4       	brcc	.+12     	; 0xefa <vfprintf+0x6e>
     eee:	80 32       	cpi	r24, 0x20	; 32
     ef0:	59 f0       	breq	.+22     	; 0xf08 <vfprintf+0x7c>
     ef2:	83 32       	cpi	r24, 0x23	; 35
     ef4:	69 f4       	brne	.+26     	; 0xf10 <vfprintf+0x84>
     ef6:	20 61       	ori	r18, 0x10	; 16
     ef8:	2c c0       	rjmp	.+88     	; 0xf52 <vfprintf+0xc6>
     efa:	8d 32       	cpi	r24, 0x2D	; 45
     efc:	39 f0       	breq	.+14     	; 0xf0c <vfprintf+0x80>
     efe:	80 33       	cpi	r24, 0x30	; 48
     f00:	39 f4       	brne	.+14     	; 0xf10 <vfprintf+0x84>
     f02:	21 60       	ori	r18, 0x01	; 1
     f04:	26 c0       	rjmp	.+76     	; 0xf52 <vfprintf+0xc6>
     f06:	22 60       	ori	r18, 0x02	; 2
     f08:	24 60       	ori	r18, 0x04	; 4
     f0a:	23 c0       	rjmp	.+70     	; 0xf52 <vfprintf+0xc6>
     f0c:	28 60       	ori	r18, 0x08	; 8
     f0e:	21 c0       	rjmp	.+66     	; 0xf52 <vfprintf+0xc6>
     f10:	27 fd       	sbrc	r18, 7
     f12:	27 c0       	rjmp	.+78     	; 0xf62 <vfprintf+0xd6>
     f14:	30 ed       	ldi	r19, 0xD0	; 208
     f16:	38 0f       	add	r19, r24
     f18:	3a 30       	cpi	r19, 0x0A	; 10
     f1a:	78 f4       	brcc	.+30     	; 0xf3a <vfprintf+0xae>
     f1c:	26 ff       	sbrs	r18, 6
     f1e:	06 c0       	rjmp	.+12     	; 0xf2c <vfprintf+0xa0>
     f20:	fa e0       	ldi	r31, 0x0A	; 10
     f22:	5f 9e       	mul	r5, r31
     f24:	30 0d       	add	r19, r0
     f26:	11 24       	eor	r1, r1
     f28:	53 2e       	mov	r5, r19
     f2a:	13 c0       	rjmp	.+38     	; 0xf52 <vfprintf+0xc6>
     f2c:	8a e0       	ldi	r24, 0x0A	; 10
     f2e:	38 9e       	mul	r3, r24
     f30:	30 0d       	add	r19, r0
     f32:	11 24       	eor	r1, r1
     f34:	33 2e       	mov	r3, r19
     f36:	20 62       	ori	r18, 0x20	; 32
     f38:	0c c0       	rjmp	.+24     	; 0xf52 <vfprintf+0xc6>
     f3a:	8e 32       	cpi	r24, 0x2E	; 46
     f3c:	21 f4       	brne	.+8      	; 0xf46 <vfprintf+0xba>
     f3e:	26 fd       	sbrc	r18, 6
     f40:	5f c1       	rjmp	.+702    	; 0x1200 <vfprintf+0x374>
     f42:	20 64       	ori	r18, 0x40	; 64
     f44:	06 c0       	rjmp	.+12     	; 0xf52 <vfprintf+0xc6>
     f46:	8c 36       	cpi	r24, 0x6C	; 108
     f48:	11 f4       	brne	.+4      	; 0xf4e <vfprintf+0xc2>
     f4a:	20 68       	ori	r18, 0x80	; 128
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <vfprintf+0xc6>
     f4e:	88 36       	cpi	r24, 0x68	; 104
     f50:	41 f4       	brne	.+16     	; 0xf62 <vfprintf+0xd6>
     f52:	f6 01       	movw	r30, r12
     f54:	93 fd       	sbrc	r25, 3
     f56:	85 91       	lpm	r24, Z+
     f58:	93 ff       	sbrs	r25, 3
     f5a:	81 91       	ld	r24, Z+
     f5c:	6f 01       	movw	r12, r30
     f5e:	81 11       	cpse	r24, r1
     f60:	c1 cf       	rjmp	.-126    	; 0xee4 <vfprintf+0x58>
     f62:	98 2f       	mov	r25, r24
     f64:	9f 7d       	andi	r25, 0xDF	; 223
     f66:	95 54       	subi	r25, 0x45	; 69
     f68:	93 30       	cpi	r25, 0x03	; 3
     f6a:	28 f4       	brcc	.+10     	; 0xf76 <vfprintf+0xea>
     f6c:	0c 5f       	subi	r16, 0xFC	; 252
     f6e:	1f 4f       	sbci	r17, 0xFF	; 255
     f70:	ff e3       	ldi	r31, 0x3F	; 63
     f72:	f9 83       	std	Y+1, r31	; 0x01
     f74:	0d c0       	rjmp	.+26     	; 0xf90 <vfprintf+0x104>
     f76:	83 36       	cpi	r24, 0x63	; 99
     f78:	31 f0       	breq	.+12     	; 0xf86 <vfprintf+0xfa>
     f7a:	83 37       	cpi	r24, 0x73	; 115
     f7c:	71 f0       	breq	.+28     	; 0xf9a <vfprintf+0x10e>
     f7e:	83 35       	cpi	r24, 0x53	; 83
     f80:	09 f0       	breq	.+2      	; 0xf84 <vfprintf+0xf8>
     f82:	57 c0       	rjmp	.+174    	; 0x1032 <vfprintf+0x1a6>
     f84:	21 c0       	rjmp	.+66     	; 0xfc8 <vfprintf+0x13c>
     f86:	f8 01       	movw	r30, r16
     f88:	80 81       	ld	r24, Z
     f8a:	89 83       	std	Y+1, r24	; 0x01
     f8c:	0e 5f       	subi	r16, 0xFE	; 254
     f8e:	1f 4f       	sbci	r17, 0xFF	; 255
     f90:	44 24       	eor	r4, r4
     f92:	43 94       	inc	r4
     f94:	51 2c       	mov	r5, r1
     f96:	54 01       	movw	r10, r8
     f98:	14 c0       	rjmp	.+40     	; 0xfc2 <vfprintf+0x136>
     f9a:	38 01       	movw	r6, r16
     f9c:	f2 e0       	ldi	r31, 0x02	; 2
     f9e:	6f 0e       	add	r6, r31
     fa0:	71 1c       	adc	r7, r1
     fa2:	f8 01       	movw	r30, r16
     fa4:	a0 80       	ld	r10, Z
     fa6:	b1 80       	ldd	r11, Z+1	; 0x01
     fa8:	26 ff       	sbrs	r18, 6
     faa:	03 c0       	rjmp	.+6      	; 0xfb2 <vfprintf+0x126>
     fac:	65 2d       	mov	r22, r5
     fae:	70 e0       	ldi	r23, 0x00	; 0
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <vfprintf+0x12a>
     fb2:	6f ef       	ldi	r22, 0xFF	; 255
     fb4:	7f ef       	ldi	r23, 0xFF	; 255
     fb6:	c5 01       	movw	r24, r10
     fb8:	2c 87       	std	Y+12, r18	; 0x0c
     fba:	36 d1       	rcall	.+620    	; 0x1228 <strnlen>
     fbc:	2c 01       	movw	r4, r24
     fbe:	83 01       	movw	r16, r6
     fc0:	2c 85       	ldd	r18, Y+12	; 0x0c
     fc2:	2f 77       	andi	r18, 0x7F	; 127
     fc4:	22 2e       	mov	r2, r18
     fc6:	16 c0       	rjmp	.+44     	; 0xff4 <vfprintf+0x168>
     fc8:	38 01       	movw	r6, r16
     fca:	f2 e0       	ldi	r31, 0x02	; 2
     fcc:	6f 0e       	add	r6, r31
     fce:	71 1c       	adc	r7, r1
     fd0:	f8 01       	movw	r30, r16
     fd2:	a0 80       	ld	r10, Z
     fd4:	b1 80       	ldd	r11, Z+1	; 0x01
     fd6:	26 ff       	sbrs	r18, 6
     fd8:	03 c0       	rjmp	.+6      	; 0xfe0 <vfprintf+0x154>
     fda:	65 2d       	mov	r22, r5
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <vfprintf+0x158>
     fe0:	6f ef       	ldi	r22, 0xFF	; 255
     fe2:	7f ef       	ldi	r23, 0xFF	; 255
     fe4:	c5 01       	movw	r24, r10
     fe6:	2c 87       	std	Y+12, r18	; 0x0c
     fe8:	14 d1       	rcall	.+552    	; 0x1212 <strnlen_P>
     fea:	2c 01       	movw	r4, r24
     fec:	2c 85       	ldd	r18, Y+12	; 0x0c
     fee:	20 68       	ori	r18, 0x80	; 128
     ff0:	22 2e       	mov	r2, r18
     ff2:	83 01       	movw	r16, r6
     ff4:	23 fc       	sbrc	r2, 3
     ff6:	19 c0       	rjmp	.+50     	; 0x102a <vfprintf+0x19e>
     ff8:	83 2d       	mov	r24, r3
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	48 16       	cp	r4, r24
     ffe:	59 06       	cpc	r5, r25
    1000:	a0 f4       	brcc	.+40     	; 0x102a <vfprintf+0x19e>
    1002:	b7 01       	movw	r22, r14
    1004:	80 e2       	ldi	r24, 0x20	; 32
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	1a d1       	rcall	.+564    	; 0x123e <fputc>
    100a:	3a 94       	dec	r3
    100c:	f5 cf       	rjmp	.-22     	; 0xff8 <vfprintf+0x16c>
    100e:	f5 01       	movw	r30, r10
    1010:	27 fc       	sbrc	r2, 7
    1012:	85 91       	lpm	r24, Z+
    1014:	27 fe       	sbrs	r2, 7
    1016:	81 91       	ld	r24, Z+
    1018:	5f 01       	movw	r10, r30
    101a:	b7 01       	movw	r22, r14
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0f d1       	rcall	.+542    	; 0x123e <fputc>
    1020:	31 10       	cpse	r3, r1
    1022:	3a 94       	dec	r3
    1024:	f1 e0       	ldi	r31, 0x01	; 1
    1026:	4f 1a       	sub	r4, r31
    1028:	51 08       	sbc	r5, r1
    102a:	41 14       	cp	r4, r1
    102c:	51 04       	cpc	r5, r1
    102e:	79 f7       	brne	.-34     	; 0x100e <vfprintf+0x182>
    1030:	de c0       	rjmp	.+444    	; 0x11ee <vfprintf+0x362>
    1032:	84 36       	cpi	r24, 0x64	; 100
    1034:	11 f0       	breq	.+4      	; 0x103a <vfprintf+0x1ae>
    1036:	89 36       	cpi	r24, 0x69	; 105
    1038:	31 f5       	brne	.+76     	; 0x1086 <vfprintf+0x1fa>
    103a:	f8 01       	movw	r30, r16
    103c:	27 ff       	sbrs	r18, 7
    103e:	07 c0       	rjmp	.+14     	; 0x104e <vfprintf+0x1c2>
    1040:	60 81       	ld	r22, Z
    1042:	71 81       	ldd	r23, Z+1	; 0x01
    1044:	82 81       	ldd	r24, Z+2	; 0x02
    1046:	93 81       	ldd	r25, Z+3	; 0x03
    1048:	0c 5f       	subi	r16, 0xFC	; 252
    104a:	1f 4f       	sbci	r17, 0xFF	; 255
    104c:	08 c0       	rjmp	.+16     	; 0x105e <vfprintf+0x1d2>
    104e:	60 81       	ld	r22, Z
    1050:	71 81       	ldd	r23, Z+1	; 0x01
    1052:	88 27       	eor	r24, r24
    1054:	77 fd       	sbrc	r23, 7
    1056:	80 95       	com	r24
    1058:	98 2f       	mov	r25, r24
    105a:	0e 5f       	subi	r16, 0xFE	; 254
    105c:	1f 4f       	sbci	r17, 0xFF	; 255
    105e:	2f 76       	andi	r18, 0x6F	; 111
    1060:	b2 2e       	mov	r11, r18
    1062:	97 ff       	sbrs	r25, 7
    1064:	09 c0       	rjmp	.+18     	; 0x1078 <vfprintf+0x1ec>
    1066:	90 95       	com	r25
    1068:	80 95       	com	r24
    106a:	70 95       	com	r23
    106c:	61 95       	neg	r22
    106e:	7f 4f       	sbci	r23, 0xFF	; 255
    1070:	8f 4f       	sbci	r24, 0xFF	; 255
    1072:	9f 4f       	sbci	r25, 0xFF	; 255
    1074:	20 68       	ori	r18, 0x80	; 128
    1076:	b2 2e       	mov	r11, r18
    1078:	2a e0       	ldi	r18, 0x0A	; 10
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	a4 01       	movw	r20, r8
    107e:	11 d1       	rcall	.+546    	; 0x12a2 <__ultoa_invert>
    1080:	a8 2e       	mov	r10, r24
    1082:	a8 18       	sub	r10, r8
    1084:	43 c0       	rjmp	.+134    	; 0x110c <vfprintf+0x280>
    1086:	85 37       	cpi	r24, 0x75	; 117
    1088:	29 f4       	brne	.+10     	; 0x1094 <vfprintf+0x208>
    108a:	2f 7e       	andi	r18, 0xEF	; 239
    108c:	b2 2e       	mov	r11, r18
    108e:	2a e0       	ldi	r18, 0x0A	; 10
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	25 c0       	rjmp	.+74     	; 0x10de <vfprintf+0x252>
    1094:	f2 2f       	mov	r31, r18
    1096:	f9 7f       	andi	r31, 0xF9	; 249
    1098:	bf 2e       	mov	r11, r31
    109a:	8f 36       	cpi	r24, 0x6F	; 111
    109c:	c1 f0       	breq	.+48     	; 0x10ce <vfprintf+0x242>
    109e:	18 f4       	brcc	.+6      	; 0x10a6 <vfprintf+0x21a>
    10a0:	88 35       	cpi	r24, 0x58	; 88
    10a2:	79 f0       	breq	.+30     	; 0x10c2 <vfprintf+0x236>
    10a4:	ad c0       	rjmp	.+346    	; 0x1200 <vfprintf+0x374>
    10a6:	80 37       	cpi	r24, 0x70	; 112
    10a8:	19 f0       	breq	.+6      	; 0x10b0 <vfprintf+0x224>
    10aa:	88 37       	cpi	r24, 0x78	; 120
    10ac:	21 f0       	breq	.+8      	; 0x10b6 <vfprintf+0x22a>
    10ae:	a8 c0       	rjmp	.+336    	; 0x1200 <vfprintf+0x374>
    10b0:	2f 2f       	mov	r18, r31
    10b2:	20 61       	ori	r18, 0x10	; 16
    10b4:	b2 2e       	mov	r11, r18
    10b6:	b4 fe       	sbrs	r11, 4
    10b8:	0d c0       	rjmp	.+26     	; 0x10d4 <vfprintf+0x248>
    10ba:	8b 2d       	mov	r24, r11
    10bc:	84 60       	ori	r24, 0x04	; 4
    10be:	b8 2e       	mov	r11, r24
    10c0:	09 c0       	rjmp	.+18     	; 0x10d4 <vfprintf+0x248>
    10c2:	24 ff       	sbrs	r18, 4
    10c4:	0a c0       	rjmp	.+20     	; 0x10da <vfprintf+0x24e>
    10c6:	9f 2f       	mov	r25, r31
    10c8:	96 60       	ori	r25, 0x06	; 6
    10ca:	b9 2e       	mov	r11, r25
    10cc:	06 c0       	rjmp	.+12     	; 0x10da <vfprintf+0x24e>
    10ce:	28 e0       	ldi	r18, 0x08	; 8
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	05 c0       	rjmp	.+10     	; 0x10de <vfprintf+0x252>
    10d4:	20 e1       	ldi	r18, 0x10	; 16
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <vfprintf+0x252>
    10da:	20 e1       	ldi	r18, 0x10	; 16
    10dc:	32 e0       	ldi	r19, 0x02	; 2
    10de:	f8 01       	movw	r30, r16
    10e0:	b7 fe       	sbrs	r11, 7
    10e2:	07 c0       	rjmp	.+14     	; 0x10f2 <vfprintf+0x266>
    10e4:	60 81       	ld	r22, Z
    10e6:	71 81       	ldd	r23, Z+1	; 0x01
    10e8:	82 81       	ldd	r24, Z+2	; 0x02
    10ea:	93 81       	ldd	r25, Z+3	; 0x03
    10ec:	0c 5f       	subi	r16, 0xFC	; 252
    10ee:	1f 4f       	sbci	r17, 0xFF	; 255
    10f0:	06 c0       	rjmp	.+12     	; 0x10fe <vfprintf+0x272>
    10f2:	60 81       	ld	r22, Z
    10f4:	71 81       	ldd	r23, Z+1	; 0x01
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	0e 5f       	subi	r16, 0xFE	; 254
    10fc:	1f 4f       	sbci	r17, 0xFF	; 255
    10fe:	a4 01       	movw	r20, r8
    1100:	d0 d0       	rcall	.+416    	; 0x12a2 <__ultoa_invert>
    1102:	a8 2e       	mov	r10, r24
    1104:	a8 18       	sub	r10, r8
    1106:	fb 2d       	mov	r31, r11
    1108:	ff 77       	andi	r31, 0x7F	; 127
    110a:	bf 2e       	mov	r11, r31
    110c:	b6 fe       	sbrs	r11, 6
    110e:	0b c0       	rjmp	.+22     	; 0x1126 <vfprintf+0x29a>
    1110:	2b 2d       	mov	r18, r11
    1112:	2e 7f       	andi	r18, 0xFE	; 254
    1114:	a5 14       	cp	r10, r5
    1116:	50 f4       	brcc	.+20     	; 0x112c <vfprintf+0x2a0>
    1118:	b4 fe       	sbrs	r11, 4
    111a:	0a c0       	rjmp	.+20     	; 0x1130 <vfprintf+0x2a4>
    111c:	b2 fc       	sbrc	r11, 2
    111e:	08 c0       	rjmp	.+16     	; 0x1130 <vfprintf+0x2a4>
    1120:	2b 2d       	mov	r18, r11
    1122:	2e 7e       	andi	r18, 0xEE	; 238
    1124:	05 c0       	rjmp	.+10     	; 0x1130 <vfprintf+0x2a4>
    1126:	7a 2c       	mov	r7, r10
    1128:	2b 2d       	mov	r18, r11
    112a:	03 c0       	rjmp	.+6      	; 0x1132 <vfprintf+0x2a6>
    112c:	7a 2c       	mov	r7, r10
    112e:	01 c0       	rjmp	.+2      	; 0x1132 <vfprintf+0x2a6>
    1130:	75 2c       	mov	r7, r5
    1132:	24 ff       	sbrs	r18, 4
    1134:	0d c0       	rjmp	.+26     	; 0x1150 <vfprintf+0x2c4>
    1136:	fe 01       	movw	r30, r28
    1138:	ea 0d       	add	r30, r10
    113a:	f1 1d       	adc	r31, r1
    113c:	80 81       	ld	r24, Z
    113e:	80 33       	cpi	r24, 0x30	; 48
    1140:	11 f4       	brne	.+4      	; 0x1146 <vfprintf+0x2ba>
    1142:	29 7e       	andi	r18, 0xE9	; 233
    1144:	09 c0       	rjmp	.+18     	; 0x1158 <vfprintf+0x2cc>
    1146:	22 ff       	sbrs	r18, 2
    1148:	06 c0       	rjmp	.+12     	; 0x1156 <vfprintf+0x2ca>
    114a:	73 94       	inc	r7
    114c:	73 94       	inc	r7
    114e:	04 c0       	rjmp	.+8      	; 0x1158 <vfprintf+0x2cc>
    1150:	82 2f       	mov	r24, r18
    1152:	86 78       	andi	r24, 0x86	; 134
    1154:	09 f0       	breq	.+2      	; 0x1158 <vfprintf+0x2cc>
    1156:	73 94       	inc	r7
    1158:	23 fd       	sbrc	r18, 3
    115a:	12 c0       	rjmp	.+36     	; 0x1180 <vfprintf+0x2f4>
    115c:	20 ff       	sbrs	r18, 0
    115e:	06 c0       	rjmp	.+12     	; 0x116c <vfprintf+0x2e0>
    1160:	5a 2c       	mov	r5, r10
    1162:	73 14       	cp	r7, r3
    1164:	18 f4       	brcc	.+6      	; 0x116c <vfprintf+0x2e0>
    1166:	53 0c       	add	r5, r3
    1168:	57 18       	sub	r5, r7
    116a:	73 2c       	mov	r7, r3
    116c:	73 14       	cp	r7, r3
    116e:	60 f4       	brcc	.+24     	; 0x1188 <vfprintf+0x2fc>
    1170:	b7 01       	movw	r22, r14
    1172:	80 e2       	ldi	r24, 0x20	; 32
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	2c 87       	std	Y+12, r18	; 0x0c
    1178:	62 d0       	rcall	.+196    	; 0x123e <fputc>
    117a:	73 94       	inc	r7
    117c:	2c 85       	ldd	r18, Y+12	; 0x0c
    117e:	f6 cf       	rjmp	.-20     	; 0x116c <vfprintf+0x2e0>
    1180:	73 14       	cp	r7, r3
    1182:	10 f4       	brcc	.+4      	; 0x1188 <vfprintf+0x2fc>
    1184:	37 18       	sub	r3, r7
    1186:	01 c0       	rjmp	.+2      	; 0x118a <vfprintf+0x2fe>
    1188:	31 2c       	mov	r3, r1
    118a:	24 ff       	sbrs	r18, 4
    118c:	11 c0       	rjmp	.+34     	; 0x11b0 <vfprintf+0x324>
    118e:	b7 01       	movw	r22, r14
    1190:	80 e3       	ldi	r24, 0x30	; 48
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	2c 87       	std	Y+12, r18	; 0x0c
    1196:	53 d0       	rcall	.+166    	; 0x123e <fputc>
    1198:	2c 85       	ldd	r18, Y+12	; 0x0c
    119a:	22 ff       	sbrs	r18, 2
    119c:	16 c0       	rjmp	.+44     	; 0x11ca <vfprintf+0x33e>
    119e:	21 ff       	sbrs	r18, 1
    11a0:	03 c0       	rjmp	.+6      	; 0x11a8 <vfprintf+0x31c>
    11a2:	88 e5       	ldi	r24, 0x58	; 88
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <vfprintf+0x320>
    11a8:	88 e7       	ldi	r24, 0x78	; 120
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	b7 01       	movw	r22, r14
    11ae:	0c c0       	rjmp	.+24     	; 0x11c8 <vfprintf+0x33c>
    11b0:	82 2f       	mov	r24, r18
    11b2:	86 78       	andi	r24, 0x86	; 134
    11b4:	51 f0       	breq	.+20     	; 0x11ca <vfprintf+0x33e>
    11b6:	21 fd       	sbrc	r18, 1
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <vfprintf+0x332>
    11ba:	80 e2       	ldi	r24, 0x20	; 32
    11bc:	01 c0       	rjmp	.+2      	; 0x11c0 <vfprintf+0x334>
    11be:	8b e2       	ldi	r24, 0x2B	; 43
    11c0:	27 fd       	sbrc	r18, 7
    11c2:	8d e2       	ldi	r24, 0x2D	; 45
    11c4:	b7 01       	movw	r22, r14
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	3a d0       	rcall	.+116    	; 0x123e <fputc>
    11ca:	a5 14       	cp	r10, r5
    11cc:	30 f4       	brcc	.+12     	; 0x11da <vfprintf+0x34e>
    11ce:	b7 01       	movw	r22, r14
    11d0:	80 e3       	ldi	r24, 0x30	; 48
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	34 d0       	rcall	.+104    	; 0x123e <fputc>
    11d6:	5a 94       	dec	r5
    11d8:	f8 cf       	rjmp	.-16     	; 0x11ca <vfprintf+0x33e>
    11da:	aa 94       	dec	r10
    11dc:	f4 01       	movw	r30, r8
    11de:	ea 0d       	add	r30, r10
    11e0:	f1 1d       	adc	r31, r1
    11e2:	80 81       	ld	r24, Z
    11e4:	b7 01       	movw	r22, r14
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	2a d0       	rcall	.+84     	; 0x123e <fputc>
    11ea:	a1 10       	cpse	r10, r1
    11ec:	f6 cf       	rjmp	.-20     	; 0x11da <vfprintf+0x34e>
    11ee:	33 20       	and	r3, r3
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <vfprintf+0x368>
    11f2:	5d ce       	rjmp	.-838    	; 0xeae <vfprintf+0x22>
    11f4:	b7 01       	movw	r22, r14
    11f6:	80 e2       	ldi	r24, 0x20	; 32
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	21 d0       	rcall	.+66     	; 0x123e <fputc>
    11fc:	3a 94       	dec	r3
    11fe:	f7 cf       	rjmp	.-18     	; 0x11ee <vfprintf+0x362>
    1200:	f7 01       	movw	r30, r14
    1202:	86 81       	ldd	r24, Z+6	; 0x06
    1204:	97 81       	ldd	r25, Z+7	; 0x07
    1206:	02 c0       	rjmp	.+4      	; 0x120c <vfprintf+0x380>
    1208:	8f ef       	ldi	r24, 0xFF	; 255
    120a:	9f ef       	ldi	r25, 0xFF	; 255
    120c:	2c 96       	adiw	r28, 0x0c	; 12
    120e:	e2 e1       	ldi	r30, 0x12	; 18
    1210:	c2 c0       	rjmp	.+388    	; 0x1396 <__epilogue_restores__>

00001212 <strnlen_P>:
    1212:	fc 01       	movw	r30, r24
    1214:	05 90       	lpm	r0, Z+
    1216:	61 50       	subi	r22, 0x01	; 1
    1218:	70 40       	sbci	r23, 0x00	; 0
    121a:	01 10       	cpse	r0, r1
    121c:	d8 f7       	brcc	.-10     	; 0x1214 <strnlen_P+0x2>
    121e:	80 95       	com	r24
    1220:	90 95       	com	r25
    1222:	8e 0f       	add	r24, r30
    1224:	9f 1f       	adc	r25, r31
    1226:	08 95       	ret

00001228 <strnlen>:
    1228:	fc 01       	movw	r30, r24
    122a:	61 50       	subi	r22, 0x01	; 1
    122c:	70 40       	sbci	r23, 0x00	; 0
    122e:	01 90       	ld	r0, Z+
    1230:	01 10       	cpse	r0, r1
    1232:	d8 f7       	brcc	.-10     	; 0x122a <strnlen+0x2>
    1234:	80 95       	com	r24
    1236:	90 95       	com	r25
    1238:	8e 0f       	add	r24, r30
    123a:	9f 1f       	adc	r25, r31
    123c:	08 95       	ret

0000123e <fputc>:
    123e:	0f 93       	push	r16
    1240:	1f 93       	push	r17
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	18 2f       	mov	r17, r24
    1248:	09 2f       	mov	r16, r25
    124a:	eb 01       	movw	r28, r22
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	81 fd       	sbrc	r24, 1
    1250:	03 c0       	rjmp	.+6      	; 0x1258 <fputc+0x1a>
    1252:	8f ef       	ldi	r24, 0xFF	; 255
    1254:	9f ef       	ldi	r25, 0xFF	; 255
    1256:	20 c0       	rjmp	.+64     	; 0x1298 <fputc+0x5a>
    1258:	82 ff       	sbrs	r24, 2
    125a:	10 c0       	rjmp	.+32     	; 0x127c <fputc+0x3e>
    125c:	4e 81       	ldd	r20, Y+6	; 0x06
    125e:	5f 81       	ldd	r21, Y+7	; 0x07
    1260:	2c 81       	ldd	r18, Y+4	; 0x04
    1262:	3d 81       	ldd	r19, Y+5	; 0x05
    1264:	42 17       	cp	r20, r18
    1266:	53 07       	cpc	r21, r19
    1268:	7c f4       	brge	.+30     	; 0x1288 <fputc+0x4a>
    126a:	e8 81       	ld	r30, Y
    126c:	f9 81       	ldd	r31, Y+1	; 0x01
    126e:	9f 01       	movw	r18, r30
    1270:	2f 5f       	subi	r18, 0xFF	; 255
    1272:	3f 4f       	sbci	r19, 0xFF	; 255
    1274:	39 83       	std	Y+1, r19	; 0x01
    1276:	28 83       	st	Y, r18
    1278:	10 83       	st	Z, r17
    127a:	06 c0       	rjmp	.+12     	; 0x1288 <fputc+0x4a>
    127c:	e8 85       	ldd	r30, Y+8	; 0x08
    127e:	f9 85       	ldd	r31, Y+9	; 0x09
    1280:	81 2f       	mov	r24, r17
    1282:	09 95       	icall
    1284:	89 2b       	or	r24, r25
    1286:	29 f7       	brne	.-54     	; 0x1252 <fputc+0x14>
    1288:	2e 81       	ldd	r18, Y+6	; 0x06
    128a:	3f 81       	ldd	r19, Y+7	; 0x07
    128c:	2f 5f       	subi	r18, 0xFF	; 255
    128e:	3f 4f       	sbci	r19, 0xFF	; 255
    1290:	3f 83       	std	Y+7, r19	; 0x07
    1292:	2e 83       	std	Y+6, r18	; 0x06
    1294:	81 2f       	mov	r24, r17
    1296:	90 2f       	mov	r25, r16
    1298:	df 91       	pop	r29
    129a:	cf 91       	pop	r28
    129c:	1f 91       	pop	r17
    129e:	0f 91       	pop	r16
    12a0:	08 95       	ret

000012a2 <__ultoa_invert>:
    12a2:	fa 01       	movw	r30, r20
    12a4:	aa 27       	eor	r26, r26
    12a6:	28 30       	cpi	r18, 0x08	; 8
    12a8:	51 f1       	breq	.+84     	; 0x12fe <__ultoa_invert+0x5c>
    12aa:	20 31       	cpi	r18, 0x10	; 16
    12ac:	81 f1       	breq	.+96     	; 0x130e <__ultoa_invert+0x6c>
    12ae:	e8 94       	clt
    12b0:	6f 93       	push	r22
    12b2:	6e 7f       	andi	r22, 0xFE	; 254
    12b4:	6e 5f       	subi	r22, 0xFE	; 254
    12b6:	7f 4f       	sbci	r23, 0xFF	; 255
    12b8:	8f 4f       	sbci	r24, 0xFF	; 255
    12ba:	9f 4f       	sbci	r25, 0xFF	; 255
    12bc:	af 4f       	sbci	r26, 0xFF	; 255
    12be:	b1 e0       	ldi	r27, 0x01	; 1
    12c0:	3e d0       	rcall	.+124    	; 0x133e <__ultoa_invert+0x9c>
    12c2:	b4 e0       	ldi	r27, 0x04	; 4
    12c4:	3c d0       	rcall	.+120    	; 0x133e <__ultoa_invert+0x9c>
    12c6:	67 0f       	add	r22, r23
    12c8:	78 1f       	adc	r23, r24
    12ca:	89 1f       	adc	r24, r25
    12cc:	9a 1f       	adc	r25, r26
    12ce:	a1 1d       	adc	r26, r1
    12d0:	68 0f       	add	r22, r24
    12d2:	79 1f       	adc	r23, r25
    12d4:	8a 1f       	adc	r24, r26
    12d6:	91 1d       	adc	r25, r1
    12d8:	a1 1d       	adc	r26, r1
    12da:	6a 0f       	add	r22, r26
    12dc:	71 1d       	adc	r23, r1
    12de:	81 1d       	adc	r24, r1
    12e0:	91 1d       	adc	r25, r1
    12e2:	a1 1d       	adc	r26, r1
    12e4:	20 d0       	rcall	.+64     	; 0x1326 <__ultoa_invert+0x84>
    12e6:	09 f4       	brne	.+2      	; 0x12ea <__ultoa_invert+0x48>
    12e8:	68 94       	set
    12ea:	3f 91       	pop	r19
    12ec:	2a e0       	ldi	r18, 0x0A	; 10
    12ee:	26 9f       	mul	r18, r22
    12f0:	11 24       	eor	r1, r1
    12f2:	30 19       	sub	r19, r0
    12f4:	30 5d       	subi	r19, 0xD0	; 208
    12f6:	31 93       	st	Z+, r19
    12f8:	de f6       	brtc	.-74     	; 0x12b0 <__ultoa_invert+0xe>
    12fa:	cf 01       	movw	r24, r30
    12fc:	08 95       	ret
    12fe:	46 2f       	mov	r20, r22
    1300:	47 70       	andi	r20, 0x07	; 7
    1302:	40 5d       	subi	r20, 0xD0	; 208
    1304:	41 93       	st	Z+, r20
    1306:	b3 e0       	ldi	r27, 0x03	; 3
    1308:	0f d0       	rcall	.+30     	; 0x1328 <__ultoa_invert+0x86>
    130a:	c9 f7       	brne	.-14     	; 0x12fe <__ultoa_invert+0x5c>
    130c:	f6 cf       	rjmp	.-20     	; 0x12fa <__ultoa_invert+0x58>
    130e:	46 2f       	mov	r20, r22
    1310:	4f 70       	andi	r20, 0x0F	; 15
    1312:	40 5d       	subi	r20, 0xD0	; 208
    1314:	4a 33       	cpi	r20, 0x3A	; 58
    1316:	18 f0       	brcs	.+6      	; 0x131e <__ultoa_invert+0x7c>
    1318:	49 5d       	subi	r20, 0xD9	; 217
    131a:	31 fd       	sbrc	r19, 1
    131c:	40 52       	subi	r20, 0x20	; 32
    131e:	41 93       	st	Z+, r20
    1320:	02 d0       	rcall	.+4      	; 0x1326 <__ultoa_invert+0x84>
    1322:	a9 f7       	brne	.-22     	; 0x130e <__ultoa_invert+0x6c>
    1324:	ea cf       	rjmp	.-44     	; 0x12fa <__ultoa_invert+0x58>
    1326:	b4 e0       	ldi	r27, 0x04	; 4
    1328:	a6 95       	lsr	r26
    132a:	97 95       	ror	r25
    132c:	87 95       	ror	r24
    132e:	77 95       	ror	r23
    1330:	67 95       	ror	r22
    1332:	ba 95       	dec	r27
    1334:	c9 f7       	brne	.-14     	; 0x1328 <__ultoa_invert+0x86>
    1336:	00 97       	sbiw	r24, 0x00	; 0
    1338:	61 05       	cpc	r22, r1
    133a:	71 05       	cpc	r23, r1
    133c:	08 95       	ret
    133e:	9b 01       	movw	r18, r22
    1340:	ac 01       	movw	r20, r24
    1342:	0a 2e       	mov	r0, r26
    1344:	06 94       	lsr	r0
    1346:	57 95       	ror	r21
    1348:	47 95       	ror	r20
    134a:	37 95       	ror	r19
    134c:	27 95       	ror	r18
    134e:	ba 95       	dec	r27
    1350:	c9 f7       	brne	.-14     	; 0x1344 <__ultoa_invert+0xa2>
    1352:	62 0f       	add	r22, r18
    1354:	73 1f       	adc	r23, r19
    1356:	84 1f       	adc	r24, r20
    1358:	95 1f       	adc	r25, r21
    135a:	a0 1d       	adc	r26, r0
    135c:	08 95       	ret

0000135e <__prologue_saves__>:
    135e:	2f 92       	push	r2
    1360:	3f 92       	push	r3
    1362:	4f 92       	push	r4
    1364:	5f 92       	push	r5
    1366:	6f 92       	push	r6
    1368:	7f 92       	push	r7
    136a:	8f 92       	push	r8
    136c:	9f 92       	push	r9
    136e:	af 92       	push	r10
    1370:	bf 92       	push	r11
    1372:	cf 92       	push	r12
    1374:	df 92       	push	r13
    1376:	ef 92       	push	r14
    1378:	ff 92       	push	r15
    137a:	0f 93       	push	r16
    137c:	1f 93       	push	r17
    137e:	cf 93       	push	r28
    1380:	df 93       	push	r29
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
    1386:	ca 1b       	sub	r28, r26
    1388:	db 0b       	sbc	r29, r27
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	de bf       	out	0x3e, r29	; 62
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	cd bf       	out	0x3d, r28	; 61
    1394:	09 94       	ijmp

00001396 <__epilogue_restores__>:
    1396:	2a 88       	ldd	r2, Y+18	; 0x12
    1398:	39 88       	ldd	r3, Y+17	; 0x11
    139a:	48 88       	ldd	r4, Y+16	; 0x10
    139c:	5f 84       	ldd	r5, Y+15	; 0x0f
    139e:	6e 84       	ldd	r6, Y+14	; 0x0e
    13a0:	7d 84       	ldd	r7, Y+13	; 0x0d
    13a2:	8c 84       	ldd	r8, Y+12	; 0x0c
    13a4:	9b 84       	ldd	r9, Y+11	; 0x0b
    13a6:	aa 84       	ldd	r10, Y+10	; 0x0a
    13a8:	b9 84       	ldd	r11, Y+9	; 0x09
    13aa:	c8 84       	ldd	r12, Y+8	; 0x08
    13ac:	df 80       	ldd	r13, Y+7	; 0x07
    13ae:	ee 80       	ldd	r14, Y+6	; 0x06
    13b0:	fd 80       	ldd	r15, Y+5	; 0x05
    13b2:	0c 81       	ldd	r16, Y+4	; 0x04
    13b4:	1b 81       	ldd	r17, Y+3	; 0x03
    13b6:	aa 81       	ldd	r26, Y+2	; 0x02
    13b8:	b9 81       	ldd	r27, Y+1	; 0x01
    13ba:	ce 0f       	add	r28, r30
    13bc:	d1 1d       	adc	r29, r1
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	f8 94       	cli
    13c2:	de bf       	out	0x3e, r29	; 62
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	cd bf       	out	0x3d, r28	; 61
    13c8:	ed 01       	movw	r28, r26
    13ca:	08 95       	ret

000013cc <_exit>:
    13cc:	f8 94       	cli

000013ce <__stop_program>:
    13ce:	ff cf       	rjmp	.-2      	; 0x13ce <__stop_program>
