
Project5Try2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f22  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000f22  00000f96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000024  00000000  00000000  00000f98  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000020  00000000  00000000  00000fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000030  00000000  00000000  00000fdc  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00001010  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000093f  00000000  00000000  000010f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003ea  00000000  00000000  00001a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000125b  00000000  00000000  00001e19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00003074  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000cacf  00000000  00000000  00003210  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006d6  00000000  00000000  0000fcdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  000103b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000030da  00000000  00000000  000104bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	2f c0       	rjmp	.+94     	; 0x64 <__bad_interrupt>
   6:	00 00       	nop
   8:	2d c0       	rjmp	.+90     	; 0x64 <__bad_interrupt>
   a:	00 00       	nop
   c:	2b c0       	rjmp	.+86     	; 0x64 <__bad_interrupt>
   e:	00 00       	nop
  10:	29 c0       	rjmp	.+82     	; 0x64 <__bad_interrupt>
  12:	00 00       	nop
  14:	27 c0       	rjmp	.+78     	; 0x64 <__bad_interrupt>
  16:	00 00       	nop
  18:	25 c0       	rjmp	.+74     	; 0x64 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	23 c0       	rjmp	.+70     	; 0x64 <__bad_interrupt>
  1e:	00 00       	nop
  20:	21 c0       	rjmp	.+66     	; 0x64 <__bad_interrupt>
  22:	00 00       	nop
  24:	1f c0       	rjmp	.+62     	; 0x64 <__bad_interrupt>
  26:	00 00       	nop
  28:	1d c0       	rjmp	.+58     	; 0x64 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	1b c0       	rjmp	.+54     	; 0x64 <__bad_interrupt>
  2e:	00 00       	nop
  30:	19 c0       	rjmp	.+50     	; 0x64 <__bad_interrupt>
  32:	00 00       	nop
  34:	17 c0       	rjmp	.+46     	; 0x64 <__bad_interrupt>
  36:	00 00       	nop
  38:	15 c0       	rjmp	.+42     	; 0x64 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	13 c0       	rjmp	.+38     	; 0x64 <__bad_interrupt>
  3e:	00 00       	nop
  40:	11 c0       	rjmp	.+34     	; 0x64 <__bad_interrupt>
  42:	00 00       	nop
  44:	0f c0       	rjmp	.+30     	; 0x64 <__bad_interrupt>
  46:	00 00       	nop
  48:	0d c0       	rjmp	.+26     	; 0x64 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0b c0       	rjmp	.+22     	; 0x64 <__bad_interrupt>
  4e:	00 00       	nop
  50:	09 c0       	rjmp	.+18     	; 0x64 <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	e0 d1       	rcall	.+960    	; 0x422 <main>
  62:	5d c7       	rjmp	.+3770   	; 0xf1e <_exit>

00000064 <__bad_interrupt>:
  64:	cd cf       	rjmp	.-102    	; 0x0 <__vectors>

00000066 <i2c_delay_T2>:
;*************************************************************************
	.stabs	"",100,0,0,i2c_delay_T2
	.stabs	"i2cmaster.S",100,0,0,i2c_delay_T2
	.func i2c_delay_T2	; delay 5.0 microsec with 4 Mhz crystal	
i2c_delay_T2:        ; 4 cycles
	rjmp 1f      ; 2   "
  66:	00 c0       	rjmp	.+0      	; 0x68 <i2c_delay_T2+0x2>
1:	rjmp 2f      ; 2   "
  68:	00 c0       	rjmp	.+0      	; 0x6a <i2c_delay_T2+0x4>
2:	rjmp 3f      ; 2   "
  6a:	00 c0       	rjmp	.+0      	; 0x6c <i2c_delay_T2+0x6>
3:	rjmp 4f      ; 2   "
  6c:	00 c0       	rjmp	.+0      	; 0x6e <i2c_delay_T2+0x8>
4:	rjmp 5f      ; 2   "
  6e:	00 c0       	rjmp	.+0      	; 0x70 <i2c_delay_T2+0xa>
5: 	rjmp 6f      ; 2   "
  70:	00 c0       	rjmp	.+0      	; 0x72 <i2c_delay_T2+0xc>
6:	nop          ; 1   "
  72:	00 00       	nop
	ret          ; 3   "
  74:	08 95       	ret

00000076 <i2c_init>:
; extern void i2c_init(void)
;*************************************************************************
	.global i2c_init
	.func i2c_init
i2c_init:
	cbi SDA_DDR,SDA		;release SDA
  76:	a0 98       	cbi	0x14, 0	; 20
	cbi SCL_DDR,SCL		;release SCL
  78:	a1 98       	cbi	0x14, 1	; 20
	cbi SDA_OUT,SDA
  7a:	a8 98       	cbi	0x15, 0	; 21
	cbi SCL_OUT,SCL
  7c:	a9 98       	cbi	0x15, 1	; 21
	ret
  7e:	08 95       	ret

00000080 <i2c_start>:
;*************************************************************************

	.global i2c_start
	.func   i2c_start
i2c_start:
	sbi 	SDA_DDR,SDA	;force SDA low
  80:	a0 9a       	sbi	0x14, 0	; 20
	rcall 	i2c_delay_T2	;delay T/2
  82:	f1 df       	rcall	.-30     	; 0x66 <i2c_delay_T2>
	
	rcall 	i2c_write	;write address
  84:	1d c0       	rjmp	.+58     	; 0xc0 <i2c_write>
	ret
  86:	08 95       	ret

00000088 <i2c_rep_start>:
;*************************************************************************

	.global i2c_rep_start
	.func	i2c_rep_start
i2c_rep_start:
	sbi	SCL_DDR,SCL	;force SCL low
  88:	a1 9a       	sbi	0x14, 1	; 20
	rcall 	i2c_delay_T2	;delay  T/2
  8a:	ed df       	rcall	.-38     	; 0x66 <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
  8c:	a0 98       	cbi	0x14, 0	; 20
	rcall	i2c_delay_T2	;delay T/2
  8e:	eb df       	rcall	.-42     	; 0x66 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
  90:	a1 98       	cbi	0x14, 1	; 20
	rcall 	i2c_delay_T2	;delay  T/2
  92:	e9 df       	rcall	.-46     	; 0x66 <i2c_delay_T2>
	sbi 	SDA_DDR,SDA	;force SDA low
  94:	a0 9a       	sbi	0x14, 0	; 20
	rcall 	i2c_delay_T2	;delay	T/2
  96:	e7 df       	rcall	.-50     	; 0x66 <i2c_delay_T2>
	
	rcall	i2c_write	;write address
  98:	13 c0       	rjmp	.+38     	; 0xc0 <i2c_write>
	ret
  9a:	08 95       	ret

0000009c <i2c_start_wait>:
;*************************************************************************

	.global i2c_start_wait
	.func   i2c_start_wait
i2c_start_wait:
	mov	__tmp_reg__,r24
  9c:	08 2e       	mov	r0, r24

0000009e <i2c_start_wait1>:
i2c_start_wait1:
	sbi 	SDA_DDR,SDA	;force SDA low
  9e:	a0 9a       	sbi	0x14, 0	; 20
	rcall 	i2c_delay_T2	;delay T/2
  a0:	e2 df       	rcall	.-60     	; 0x66 <i2c_delay_T2>
	mov	r24,__tmp_reg__
  a2:	80 2d       	mov	r24, r0
	rcall 	i2c_write	;write address
  a4:	0d d0       	rcall	.+26     	; 0xc0 <i2c_write>
	tst	r24		;if device not busy -> done
  a6:	88 23       	and	r24, r24
	breq	i2c_start_wait_done
  a8:	11 f0       	breq	.+4      	; 0xae <i2c_start_wait_done>
	rcall	i2c_stop	;terminate write operation
  aa:	02 d0       	rcall	.+4      	; 0xb0 <i2c_stop>
	rjmp	i2c_start_wait1	;device busy, poll ack again
  ac:	f8 cf       	rjmp	.-16     	; 0x9e <i2c_start_wait1>

000000ae <i2c_start_wait_done>:
i2c_start_wait_done:
	ret
  ae:	08 95       	ret

000000b0 <i2c_stop>:
;*************************************************************************

	.global	i2c_stop
	.func	i2c_stop
i2c_stop:
	sbi	SCL_DDR,SCL	;force SCL low
  b0:	a1 9a       	sbi	0x14, 1	; 20
	sbi	SDA_DDR,SDA	;force SDA low
  b2:	a0 9a       	sbi	0x14, 0	; 20
	rcall	i2c_delay_T2	;delay T/2
  b4:	d8 df       	rcall	.-80     	; 0x66 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
  b6:	a1 98       	cbi	0x14, 1	; 20
	rcall	i2c_delay_T2	;delay T/2
  b8:	d6 df       	rcall	.-84     	; 0x66 <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
  ba:	a0 98       	cbi	0x14, 0	; 20
	rcall	i2c_delay_T2	;delay T/2
  bc:	d4 cf       	rjmp	.-88     	; 0x66 <i2c_delay_T2>
	ret
  be:	08 95       	ret

000000c0 <i2c_write>:
;	data = r24,  return = r25(=0):r24
;*************************************************************************
	.global i2c_write
	.func	i2c_write
i2c_write:
	sec			;set carry flag
  c0:	08 94       	sec
	rol 	r24		;shift in carry and out bit one
  c2:	88 1f       	adc	r24, r24
	rjmp	i2c_write_first
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <i2c_write_first>

000000c6 <i2c_write_bit>:
i2c_write_bit:
	lsl	r24		;if transmit register empty
  c6:	88 0f       	add	r24, r24

000000c8 <i2c_write_first>:
i2c_write_first:
	breq	i2c_get_ack
  c8:	59 f0       	breq	.+22     	; 0xe0 <i2c_get_ack>
	sbi	SCL_DDR,SCL	;force SCL low
  ca:	a1 9a       	sbi	0x14, 1	; 20
	brcc	i2c_write_low
  cc:	18 f4       	brcc	.+6      	; 0xd4 <i2c_write_low>
	nop
  ce:	00 00       	nop
	cbi	SDA_DDR,SDA	;release SDA
  d0:	a0 98       	cbi	0x14, 0	; 20
	rjmp	i2c_write_high
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <i2c_write_high>

000000d4 <i2c_write_low>:
i2c_write_low:
	sbi	SDA_DDR,SDA	;force SDA low
  d4:	a0 9a       	sbi	0x14, 0	; 20
	rjmp	i2c_write_high
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <i2c_write_high>

000000d8 <i2c_write_high>:
i2c_write_high:
	rcall 	i2c_delay_T2	;delay T/2
  d8:	c6 df       	rcall	.-116    	; 0x66 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
  da:	a1 98       	cbi	0x14, 1	; 20
	rcall	i2c_delay_T2	;delay T/2
  dc:	c4 df       	rcall	.-120    	; 0x66 <i2c_delay_T2>
	rjmp	i2c_write_bit
  de:	f3 cf       	rjmp	.-26     	; 0xc6 <i2c_write_bit>

000000e0 <i2c_get_ack>:
	
i2c_get_ack:
	sbi	SCL_DDR,SCL	;force SCL low
  e0:	a1 9a       	sbi	0x14, 1	; 20
	cbi	SDA_DDR,SDA	;release SDA
  e2:	a0 98       	cbi	0x14, 0	; 20
	rcall	i2c_delay_T2	;delay T/2
  e4:	c0 df       	rcall	.-128    	; 0x66 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
  e6:	a1 98       	cbi	0x14, 1	; 20

000000e8 <i2c_ack_wait>:
i2c_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high (in case wait states are inserted)
  e8:	99 9b       	sbis	0x13, 1	; 19
	rjmp	i2c_ack_wait
  ea:	fe cf       	rjmp	.-4      	; 0xe8 <i2c_ack_wait>
	
	clr	r24		;return 0
  ec:	88 27       	eor	r24, r24
	sbic	SDA_IN,SDA	;if SDA high -> return 1
  ee:	98 99       	sbic	0x13, 0	; 19
	ldi	r24,1
  f0:	81 e0       	ldi	r24, 0x01	; 1
	rcall	i2c_delay_T2	;delay T/2
  f2:	b9 df       	rcall	.-142    	; 0x66 <i2c_delay_T2>
	clr	r25
  f4:	99 27       	eor	r25, r25
	ret
  f6:	08 95       	ret

000000f8 <i2c_readNak>:
	.global i2c_readAck
	.global i2c_readNak
	.global i2c_read		
	.func	i2c_read
i2c_readNak:
	clr	r24
  f8:	88 27       	eor	r24, r24
	rjmp	i2c_read
  fa:	01 c0       	rjmp	.+2      	; 0xfe <i2c_read>

000000fc <i2c_readAck>:
i2c_readAck:
	ldi	r24,0x01
  fc:	81 e0       	ldi	r24, 0x01	; 1

000000fe <i2c_read>:
i2c_read:
	ldi	r23,0x01	;data = 0x01
  fe:	71 e0       	ldi	r23, 0x01	; 1

00000100 <i2c_read_bit>:
i2c_read_bit:
	sbi	SCL_DDR,SCL	;force SCL low
 100:	a1 9a       	sbi	0x14, 1	; 20
	cbi	SDA_DDR,SDA	;release SDA (from previous ACK)
 102:	a0 98       	cbi	0x14, 0	; 20
	rcall	i2c_delay_T2	;delay T/2
 104:	b0 df       	rcall	.-160    	; 0x66 <i2c_delay_T2>
	
	cbi	SCL_DDR,SCL	;release SCL
 106:	a1 98       	cbi	0x14, 1	; 20
	rcall	i2c_delay_T2	;delay T/2
 108:	ae df       	rcall	.-164    	; 0x66 <i2c_delay_T2>

0000010a <i2c_read_stretch>:
	
i2c_read_stretch:
    sbis SCL_IN, SCL        ;loop until SCL is high (allow slave to stretch SCL)
 10a:	99 9b       	sbis	0x13, 1	; 19
    rjmp	i2c_read_stretch
 10c:	fe cf       	rjmp	.-4      	; 0x10a <i2c_read_stretch>
    	
	clc			;clear carry flag
 10e:	88 94       	clc
	sbic	SDA_IN,SDA	;if SDA is high
 110:	98 99       	sbic	0x13, 0	; 19
	sec			;  set carry flag
 112:	08 94       	sec
	
	rol	r23		;store bit
 114:	77 1f       	adc	r23, r23
	brcc	i2c_read_bit	;while receive register not full
 116:	a0 f7       	brcc	.-24     	; 0x100 <i2c_read_bit>

00000118 <i2c_put_ack>:
	
i2c_put_ack:
	sbi	SCL_DDR,SCL	;force SCL low	
 118:	a1 9a       	sbi	0x14, 1	; 20
	cpi	r24,1
 11a:	81 30       	cpi	r24, 0x01	; 1
	breq	i2c_put_ack_low	;if (ack=0)
 11c:	11 f0       	breq	.+4      	; 0x122 <i2c_put_ack_low>
	cbi	SDA_DDR,SDA	;      release SDA
 11e:	a0 98       	cbi	0x14, 0	; 20
	rjmp	i2c_put_ack_high
 120:	01 c0       	rjmp	.+2      	; 0x124 <i2c_put_ack_high>

00000122 <i2c_put_ack_low>:
i2c_put_ack_low:                ;else
	sbi	SDA_DDR,SDA	;      force SDA low
 122:	a0 9a       	sbi	0x14, 0	; 20

00000124 <i2c_put_ack_high>:
i2c_put_ack_high:
	rcall	i2c_delay_T2	;delay T/2
 124:	a0 df       	rcall	.-192    	; 0x66 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
 126:	a1 98       	cbi	0x14, 1	; 20

00000128 <i2c_put_ack_wait>:
i2c_put_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high
 128:	99 9b       	sbis	0x13, 1	; 19
	rjmp	i2c_put_ack_wait
 12a:	fe cf       	rjmp	.-4      	; 0x128 <i2c_put_ack_wait>
	rcall	i2c_delay_T2	;delay T/2
 12c:	9c df       	rcall	.-200    	; 0x66 <i2c_delay_T2>
	mov	r24,r23
 12e:	87 2f       	mov	r24, r23
	clr	r25
 130:	99 27       	eor	r25, r25
	ret
 132:	08 95       	ret

00000134 <writeReg>:
 */ 
#include "adxl.h"
#include "i2cmaster.h"

// I2C protocol for writing to a register on the accelerometer
void writeReg(unsigned char address, unsigned char val) {
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	d8 2f       	mov	r29, r24
 13a:	c6 2f       	mov	r28, r22
	// Set write mode
	i2c_rep_start((0x1d << 1) | I2C_WRITE);
 13c:	8a e3       	ldi	r24, 0x3A	; 58
 13e:	a4 df       	rcall	.-184    	; 0x88 <i2c_rep_start>
	// set the address
	i2c_write(address);
 140:	8d 2f       	mov	r24, r29
 142:	be df       	rcall	.-132    	; 0xc0 <i2c_write>
	// write the value
	i2c_write(val);
 144:	8c 2f       	mov	r24, r28
 146:	bc df       	rcall	.-136    	; 0xc0 <i2c_write>
	// finish
	i2c_stop();
 148:	b3 df       	rcall	.-154    	; 0xb0 <i2c_stop>
}
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <readReg>:

// I2C protocol for reading a register from the accelerometer
unsigned char readReg(unsigned char address) {
 150:	cf 93       	push	r28
 152:	c8 2f       	mov	r28, r24
	// set write mode to set the address
	i2c_start_wait((0x1d << 1) | I2C_WRITE);
 154:	8a e3       	ldi	r24, 0x3A	; 58
 156:	a2 df       	rcall	.-188    	; 0x9c <i2c_start_wait>
	i2c_write(address);
 158:	8c 2f       	mov	r24, r28
 15a:	b2 df       	rcall	.-156    	; 0xc0 <i2c_write>
	
	// set to read mode to read the data
	i2c_rep_start((0x1d << 1) | I2C_READ);
 15c:	8b e3       	ldi	r24, 0x3B	; 59
 15e:	94 df       	rcall	.-216    	; 0x88 <i2c_rep_start>
	unsigned char res = i2c_readNak();
 160:	cb df       	rcall	.-106    	; 0xf8 <i2c_readNak>
 162:	c8 2f       	mov	r28, r24
	
	// finish
	i2c_stop();
 164:	a5 df       	rcall	.-182    	; 0xb0 <i2c_stop>
	
	return res;
}
 166:	8c 2f       	mov	r24, r28
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <readReg16>:

// I2C protocol for reading two consecutive registers (16 bits) from the accelerometer
// Data on the accelerometer is stored in little endian
int readReg16(unsigned char address) {
 16c:	1f 93       	push	r17
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	18 2f       	mov	r17, r24
	int res = 0;
	
	// set write mode to set the address for the first register
	i2c_start_wait((0x1d << 1) | I2C_WRITE);
 174:	8a e3       	ldi	r24, 0x3A	; 58
 176:	92 df       	rcall	.-220    	; 0x9c <i2c_start_wait>
	i2c_write(address);
 178:	81 2f       	mov	r24, r17
 17a:	a2 df       	rcall	.-188    	; 0xc0 <i2c_write>
	
	// set to read mode to read the data (8LSB)
	i2c_rep_start((0x1d << 1) | I2C_READ);
 17c:	8b e3       	ldi	r24, 0x3B	; 59
 17e:	84 df       	rcall	.-248    	; 0x88 <i2c_rep_start>
	res = i2c_readNak();
 180:	bb df       	rcall	.-138    	; 0xf8 <i2c_readNak>
 182:	c8 2f       	mov	r28, r24
 184:	d0 e0       	ldi	r29, 0x00	; 0
	
	// set write mode to set the address for the next register
	i2c_start_wait((0x1d << 1) | I2C_WRITE);
 186:	8a e3       	ldi	r24, 0x3A	; 58
 188:	89 df       	rcall	.-238    	; 0x9c <i2c_start_wait>
	i2c_write(address + 1);
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	81 0f       	add	r24, r17
 18e:	98 df       	rcall	.-208    	; 0xc0 <i2c_write>
	
	// set to read mode to read the data (8MSB)
	i2c_rep_start((0x1d << 1) | I2C_READ);
 190:	8b e3       	ldi	r24, 0x3B	; 59
 192:	7a df       	rcall	.-268    	; 0x88 <i2c_rep_start>
	res |= ((int) i2c_readNak()) << 8;
 194:	b1 df       	rcall	.-158    	; 0xf8 <i2c_readNak>
 196:	d8 2b       	or	r29, r24
	
	// Finish
	i2c_stop();
 198:	8b df       	rcall	.-234    	; 0xb0 <i2c_stop>
	
	return res;
}
 19a:	ce 01       	movw	r24, r28
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	08 95       	ret

000001a4 <formatRaw>:

// The output of the accelerometer is 13 bits, but is still signed.
// Since its stored in 16 bits, we need to worry about the correct value.
// Then, scale it to be between -1 and 1
float formatRaw(int raw) {
 1a4:	bc 01       	movw	r22, r24
	int val = raw;
	// Check if the sign bit is 1
	if (val >> 13 != 0) {
 1a6:	88 e0       	ldi	r24, 0x08	; 8
 1a8:	98 02       	muls	r25, r24
 1aa:	81 2d       	mov	r24, r1
 1ac:	99 0b       	sbc	r25, r25
 1ae:	11 24       	eor	r1, r1
 1b0:	89 2b       	or	r24, r25
 1b2:	11 f0       	breq	.+4      	; 0x1b8 <formatRaw+0x14>
		// value should be negative, mask the lower 13 bits and
		// then take the twos complement to get the correct negative number
		val = -1 * ((0b1111111111111 & ~val) + 1);
 1b4:	70 6e       	ori	r23, 0xE0	; 224
 1b6:	01 c0       	rjmp	.+2      	; 0x1ba <formatRaw+0x16>
		} else {
		// value is positive, just mask the lower 13 bits
		val = 0b1111111111111 & val;
 1b8:	7f 71       	andi	r23, 0x1F	; 31
	}
	// scale to be between -1 and 1
	return val * .0039f;
 1ba:	88 27       	eor	r24, r24
 1bc:	77 fd       	sbrc	r23, 7
 1be:	80 95       	com	r24
 1c0:	98 2f       	mov	r25, r24
 1c2:	7e d3       	rcall	.+1788   	; 0x8c0 <__floatsisf>
 1c4:	24 e2       	ldi	r18, 0x24	; 36
 1c6:	37 e9       	ldi	r19, 0x97	; 151
 1c8:	4f e7       	ldi	r20, 0x7F	; 127
 1ca:	5b e3       	ldi	r21, 0x3B	; 59
 1cc:	2d c4       	rjmp	.+2138   	; 0xa28 <__mulsf3>
}
 1ce:	08 95       	ret

000001d0 <initAdxl>:

// Initializes the adxl345 chip
void initAdxl() {
	// Initialize the i2c communication
	i2c_init();
 1d0:	52 df       	rcall	.-348    	; 0x76 <i2c_init>
	
	// Set the power mode
	writeReg(0x2d, 0x08);
 1d2:	68 e0       	ldi	r22, 0x08	; 8
 1d4:	8d e2       	ldi	r24, 0x2D	; 45
 1d6:	ae df       	rcall	.-164    	; 0x134 <writeReg>
	
	// Set the format
	unsigned char format = readReg(0x31);
 1d8:	81 e3       	ldi	r24, 0x31	; 49
 1da:	ba df       	rcall	.-140    	; 0x150 <readReg>
	format &= ~(0x0f);
 1dc:	80 7f       	andi	r24, 0xF0	; 240
	format |= 0b1011;
 1de:	68 2f       	mov	r22, r24
 1e0:	6b 60       	ori	r22, 0x0B	; 11
	writeReg(0x31, format);
 1e2:	81 e3       	ldi	r24, 0x31	; 49
 1e4:	a7 df       	rcall	.-178    	; 0x134 <writeReg>
	
	// Disable the fifo cache
	writeReg(0x38, 0);
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	88 e3       	ldi	r24, 0x38	; 56
 1ea:	a4 cf       	rjmp	.-184    	; 0x134 <writeReg>
 1ec:	08 95       	ret

000001ee <readAdxl>:
}

// Read x,y, and z accelerometer values into the first three
// indices of the data
void readAdxl(float* data) {
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	ec 01       	movw	r28, r24
	data[0] = formatRaw(readReg16(0x32));
 1f4:	82 e3       	ldi	r24, 0x32	; 50
 1f6:	ba df       	rcall	.-140    	; 0x16c <readReg16>
 1f8:	d5 df       	rcall	.-86     	; 0x1a4 <formatRaw>
 1fa:	68 83       	st	Y, r22
 1fc:	79 83       	std	Y+1, r23	; 0x01
 1fe:	8a 83       	std	Y+2, r24	; 0x02
 200:	9b 83       	std	Y+3, r25	; 0x03
	data[1] = formatRaw(readReg16(0x34));
 202:	84 e3       	ldi	r24, 0x34	; 52
 204:	b3 df       	rcall	.-154    	; 0x16c <readReg16>
 206:	ce df       	rcall	.-100    	; 0x1a4 <formatRaw>
 208:	6c 83       	std	Y+4, r22	; 0x04
 20a:	7d 83       	std	Y+5, r23	; 0x05
 20c:	8e 83       	std	Y+6, r24	; 0x06
 20e:	9f 83       	std	Y+7, r25	; 0x07
	data[2] = formatRaw(readReg16(0x36));
 210:	86 e3       	ldi	r24, 0x36	; 54
 212:	ac df       	rcall	.-168    	; 0x16c <readReg16>
 214:	c7 df       	rcall	.-114    	; 0x1a4 <formatRaw>
 216:	68 87       	std	Y+8, r22	; 0x08
 218:	79 87       	std	Y+9, r23	; 0x09
 21a:	8a 87       	std	Y+10, r24	; 0x0a
 21c:	9b 87       	std	Y+11, r25	; 0x0b
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	08 95       	ret

00000224 <wait_avr>:
}

void
wait_avr(unsigned short msec)
{
	TCCR0 = 3;
 224:	23 e0       	ldi	r18, 0x03	; 3
 226:	23 bf       	out	0x33, r18	; 51
	while (msec--) {
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.00001);
 228:	3e ef       	ldi	r19, 0xFE	; 254

void
wait_avr(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
 22a:	08 c0       	rjmp	.+16     	; 0x23c <wait_avr+0x18>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.00001);
 22c:	32 bf       	out	0x32, r19	; 50
		SET_BIT(TIFR, TOV0);
 22e:	28 b7       	in	r18, 0x38	; 56
 230:	21 60       	ori	r18, 0x01	; 1
 232:	28 bf       	out	0x38, r18	; 56
		WDR();
 234:	a8 95       	wdr
		while (!GET_BIT(TIFR, TOV0));
 236:	08 b6       	in	r0, 0x38	; 56
 238:	00 fe       	sbrs	r0, 0
 23a:	fd cf       	rjmp	.-6      	; 0x236 <wait_avr+0x12>

void
wait_avr(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	b0 f7       	brcc	.-20     	; 0x22c <wait_avr+0x8>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.00001);
		SET_BIT(TIFR, TOV0);
		WDR();
		while (!GET_BIT(TIFR, TOV0));
	}
	TCCR0 = 0;
 240:	13 be       	out	0x33, r1	; 51
 242:	08 95       	ret

00000244 <board_init>:
#include <compiler.h>
#include <conf_board.h>


void board_init(void)
{
 244:	08 95       	ret

00000246 <compareSortable>:
	int ind;
	float score;
} t_SortableInd;

// function that compares two t_SortableInd instances
int compareSortable(const void* v1, const void* v2) {
 246:	8f 92       	push	r8
 248:	9f 92       	push	r9
 24a:	af 92       	push	r10
 24c:	bf 92       	push	r11
 24e:	cf 92       	push	r12
 250:	df 92       	push	r13
 252:	ef 92       	push	r14
 254:	ff 92       	push	r15
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
	t_SortableInd* s1 = v1;
	t_SortableInd* s2 = v2;
	
	if (s1->score > s2->score) {
 25a:	fc 01       	movw	r30, r24
 25c:	c2 80       	ldd	r12, Z+2	; 0x02
 25e:	d3 80       	ldd	r13, Z+3	; 0x03
 260:	e4 80       	ldd	r14, Z+4	; 0x04
 262:	f5 80       	ldd	r15, Z+5	; 0x05
 264:	fb 01       	movw	r30, r22
 266:	82 80       	ldd	r8, Z+2	; 0x02
 268:	93 80       	ldd	r9, Z+3	; 0x03
 26a:	a4 80       	ldd	r10, Z+4	; 0x04
 26c:	b5 80       	ldd	r11, Z+5	; 0x05
 26e:	a5 01       	movw	r20, r10
 270:	94 01       	movw	r18, r8
 272:	c7 01       	movw	r24, r14
 274:	b6 01       	movw	r22, r12
 276:	d4 d3       	rcall	.+1960   	; 0xa20 <__gesf2>
 278:	18 16       	cp	r1, r24
 27a:	84 f0       	brlt	.+32     	; 0x29c <compareSortable+0x56>
		return 1;
	} else if (s1->score < s2->score) {
 27c:	c1 e0       	ldi	r28, 0x01	; 1
 27e:	d0 e0       	ldi	r29, 0x00	; 0
 280:	a5 01       	movw	r20, r10
 282:	94 01       	movw	r18, r8
 284:	c7 01       	movw	r24, r14
 286:	b6 01       	movw	r22, r12
 288:	15 d3       	rcall	.+1578   	; 0x8b4 <__cmpsf2>
 28a:	88 23       	and	r24, r24
 28c:	14 f0       	brlt	.+4      	; 0x292 <compareSortable+0x4c>
 28e:	c0 e0       	ldi	r28, 0x00	; 0
 290:	d0 e0       	ldi	r29, 0x00	; 0
 292:	88 27       	eor	r24, r24
 294:	99 27       	eor	r25, r25
 296:	8c 1b       	sub	r24, r28
 298:	9d 0b       	sbc	r25, r29
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <compareSortable+0x5a>
int compareSortable(const void* v1, const void* v2) {
	t_SortableInd* s1 = v1;
	t_SortableInd* s2 = v2;
	
	if (s1->score > s2->score) {
		return 1;
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
	} else if (s1->score < s2->score) {
		return -1;
	} else {
		return 0;
	}
}
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	ff 90       	pop	r15
 2a6:	ef 90       	pop	r14
 2a8:	df 90       	pop	r13
 2aa:	cf 90       	pop	r12
 2ac:	bf 90       	pop	r11
 2ae:	af 90       	pop	r10
 2b0:	9f 90       	pop	r9
 2b2:	8f 90       	pop	r8
 2b4:	08 95       	ret

000002b6 <drawPattern>:
#include "adxl.h"
#include <stdlib.h>

#define DISP(ch, p, ind) (ch == 1 ? SET_BIT(p, ind) : CLR_BIT(p, ind))

void drawPattern(unsigned char* pattern) {
 2b6:	0f 93       	push	r16
 2b8:	1f 93       	push	r17
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
	// Initially disable both memory latches
	CLR_BIT(PORTA, 3);
 2be:	db 98       	cbi	0x1b, 3	; 27
	CLR_BIT(PORTA, 4);
 2c0:	dc 98       	cbi	0x1b, 4	; 27
 2c2:	8c 01       	movw	r16, r24
 2c4:	01 5f       	subi	r16, 0xF1	; 241
 2c6:	1f 4f       	sbci	r17, 0xFF	; 255
	
	// For each layer
	for (int i = 0; i < 4; i++) {
 2c8:	c0 e0       	ldi	r28, 0x00	; 0
 2ca:	d0 e0       	ldi	r29, 0x00	; 0
		// Depending on the layer, toggle the selecting bits
		switch (i) {
 2cc:	c1 30       	cpi	r28, 0x01	; 1
 2ce:	d1 05       	cpc	r29, r1
 2d0:	71 f0       	breq	.+28     	; 0x2ee <drawPattern+0x38>
 2d2:	1c f4       	brge	.+6      	; 0x2da <drawPattern+0x24>
 2d4:	20 97       	sbiw	r28, 0x00	; 0
 2d6:	41 f0       	breq	.+16     	; 0x2e8 <drawPattern+0x32>
 2d8:	12 c0       	rjmp	.+36     	; 0x2fe <drawPattern+0x48>
 2da:	c2 30       	cpi	r28, 0x02	; 2
 2dc:	d1 05       	cpc	r29, r1
 2de:	51 f0       	breq	.+20     	; 0x2f4 <drawPattern+0x3e>
 2e0:	c3 30       	cpi	r28, 0x03	; 3
 2e2:	d1 05       	cpc	r29, r1
 2e4:	51 f0       	breq	.+20     	; 0x2fa <drawPattern+0x44>
 2e6:	0b c0       	rjmp	.+22     	; 0x2fe <drawPattern+0x48>
			case 0:
				CLR_BIT(PORTB, 1);
 2e8:	c1 98       	cbi	0x18, 1	; 24
				CLR_BIT(PORTB, 0);
 2ea:	c0 98       	cbi	0x18, 0	; 24
				break;
 2ec:	08 c0       	rjmp	.+16     	; 0x2fe <drawPattern+0x48>
			
			case 1:
				SET_BIT(PORTB, 1);
 2ee:	c1 9a       	sbi	0x18, 1	; 24
				CLR_BIT(PORTB, 0);
 2f0:	c0 98       	cbi	0x18, 0	; 24
				break;
 2f2:	05 c0       	rjmp	.+10     	; 0x2fe <drawPattern+0x48>
			
			case 2:
				CLR_BIT(PORTB, 1);
 2f4:	c1 98       	cbi	0x18, 1	; 24
				SET_BIT(PORTB, 0);
 2f6:	c0 9a       	sbi	0x18, 0	; 24
				break;
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <drawPattern+0x48>
			
			case 3:
				SET_BIT(PORTB, 1);
 2fa:	c1 9a       	sbi	0x18, 1	; 24
				SET_BIT(PORTB, 0);
 2fc:	c0 9a       	sbi	0x18, 0	; 24
 2fe:	f8 01       	movw	r30, r16
 300:	d8 01       	movw	r26, r16
 302:	1f 97       	sbiw	r26, 0x0f	; 15
				break;
		}
		
		// Display half of the pattern for one layer
		DISP(pattern[i * 16], PORTC, 2);
 304:	8c 91       	ld	r24, X
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	11 f4       	brne	.+4      	; 0x30e <drawPattern+0x58>
 30a:	aa 9a       	sbi	0x15, 2	; 21
 30c:	01 c0       	rjmp	.+2      	; 0x310 <drawPattern+0x5a>
 30e:	aa 98       	cbi	0x15, 2	; 21
 310:	df 01       	movw	r26, r30
 312:	1e 97       	sbiw	r26, 0x0e	; 14
		DISP(pattern[i * 16 + 1], PORTC, 3);
 314:	8c 91       	ld	r24, X
 316:	81 30       	cpi	r24, 0x01	; 1
 318:	11 f4       	brne	.+4      	; 0x31e <drawPattern+0x68>
 31a:	ab 9a       	sbi	0x15, 3	; 21
 31c:	01 c0       	rjmp	.+2      	; 0x320 <drawPattern+0x6a>
 31e:	ab 98       	cbi	0x15, 3	; 21
 320:	df 01       	movw	r26, r30
 322:	1d 97       	sbiw	r26, 0x0d	; 13
		DISP(pattern[i * 16 + 2], PORTC, 4);
 324:	8c 91       	ld	r24, X
 326:	81 30       	cpi	r24, 0x01	; 1
 328:	11 f4       	brne	.+4      	; 0x32e <drawPattern+0x78>
 32a:	ac 9a       	sbi	0x15, 4	; 21
 32c:	01 c0       	rjmp	.+2      	; 0x330 <drawPattern+0x7a>
 32e:	ac 98       	cbi	0x15, 4	; 21
 330:	df 01       	movw	r26, r30
 332:	1c 97       	sbiw	r26, 0x0c	; 12
		DISP(pattern[i * 16 + 3], PORTC, 5);
 334:	8c 91       	ld	r24, X
 336:	81 30       	cpi	r24, 0x01	; 1
 338:	11 f4       	brne	.+4      	; 0x33e <drawPattern+0x88>
 33a:	ad 9a       	sbi	0x15, 5	; 21
 33c:	01 c0       	rjmp	.+2      	; 0x340 <drawPattern+0x8a>
 33e:	ad 98       	cbi	0x15, 5	; 21
 340:	df 01       	movw	r26, r30
 342:	1b 97       	sbiw	r26, 0x0b	; 11
		DISP(pattern[i * 16 + 4], PORTC, 6);
 344:	8c 91       	ld	r24, X
 346:	81 30       	cpi	r24, 0x01	; 1
 348:	11 f4       	brne	.+4      	; 0x34e <drawPattern+0x98>
 34a:	ae 9a       	sbi	0x15, 6	; 21
 34c:	01 c0       	rjmp	.+2      	; 0x350 <drawPattern+0x9a>
 34e:	ae 98       	cbi	0x15, 6	; 21
 350:	df 01       	movw	r26, r30
 352:	1a 97       	sbiw	r26, 0x0a	; 10
		DISP(pattern[i * 16 + 5], PORTC, 7);
 354:	8c 91       	ld	r24, X
 356:	81 30       	cpi	r24, 0x01	; 1
 358:	11 f4       	brne	.+4      	; 0x35e <drawPattern+0xa8>
 35a:	af 9a       	sbi	0x15, 7	; 21
 35c:	01 c0       	rjmp	.+2      	; 0x360 <drawPattern+0xaa>
 35e:	af 98       	cbi	0x15, 7	; 21
 360:	df 01       	movw	r26, r30
 362:	19 97       	sbiw	r26, 0x09	; 9
		DISP(pattern[i * 16 + 6], PORTA, 6);
 364:	8c 91       	ld	r24, X
 366:	81 30       	cpi	r24, 0x01	; 1
 368:	11 f4       	brne	.+4      	; 0x36e <drawPattern+0xb8>
 36a:	de 9a       	sbi	0x1b, 6	; 27
 36c:	01 c0       	rjmp	.+2      	; 0x370 <drawPattern+0xba>
 36e:	de 98       	cbi	0x1b, 6	; 27
 370:	df 01       	movw	r26, r30
 372:	18 97       	sbiw	r26, 0x08	; 8
		DISP(pattern[i * 16 + 7], PORTA, 5);
 374:	8c 91       	ld	r24, X
 376:	81 30       	cpi	r24, 0x01	; 1
 378:	11 f4       	brne	.+4      	; 0x37e <drawPattern+0xc8>
 37a:	dd 9a       	sbi	0x1b, 5	; 27
 37c:	01 c0       	rjmp	.+2      	; 0x380 <drawPattern+0xca>
 37e:	dd 98       	cbi	0x1b, 5	; 27
		
		// Quickly toggle the write enable on and off to load into one 8bit memory latch
		SET_BIT(PORTA, 3);
 380:	db 9a       	sbi	0x1b, 3	; 27
		CLR_BIT(PORTA, 3);
 382:	db 98       	cbi	0x1b, 3	; 27
 384:	df 01       	movw	r26, r30
 386:	17 97       	sbiw	r26, 0x07	; 7
		
		// Display the other half of the pattern for one layer
		DISP(pattern[i * 16 + 8], PORTC, 2);
 388:	8c 91       	ld	r24, X
 38a:	81 30       	cpi	r24, 0x01	; 1
 38c:	11 f4       	brne	.+4      	; 0x392 <drawPattern+0xdc>
 38e:	aa 9a       	sbi	0x15, 2	; 21
 390:	01 c0       	rjmp	.+2      	; 0x394 <drawPattern+0xde>
 392:	aa 98       	cbi	0x15, 2	; 21
 394:	df 01       	movw	r26, r30
 396:	16 97       	sbiw	r26, 0x06	; 6
		DISP(pattern[i * 16 + 9], PORTC, 3);
 398:	8c 91       	ld	r24, X
 39a:	81 30       	cpi	r24, 0x01	; 1
 39c:	11 f4       	brne	.+4      	; 0x3a2 <drawPattern+0xec>
 39e:	ab 9a       	sbi	0x15, 3	; 21
 3a0:	01 c0       	rjmp	.+2      	; 0x3a4 <drawPattern+0xee>
 3a2:	ab 98       	cbi	0x15, 3	; 21
 3a4:	df 01       	movw	r26, r30
 3a6:	15 97       	sbiw	r26, 0x05	; 5
		DISP(pattern[i * 16 + 10], PORTC, 4);
 3a8:	8c 91       	ld	r24, X
 3aa:	81 30       	cpi	r24, 0x01	; 1
 3ac:	11 f4       	brne	.+4      	; 0x3b2 <drawPattern+0xfc>
 3ae:	ac 9a       	sbi	0x15, 4	; 21
 3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <drawPattern+0xfe>
 3b2:	ac 98       	cbi	0x15, 4	; 21
 3b4:	df 01       	movw	r26, r30
 3b6:	14 97       	sbiw	r26, 0x04	; 4
		DISP(pattern[i * 16 + 11], PORTC, 5);
 3b8:	8c 91       	ld	r24, X
 3ba:	81 30       	cpi	r24, 0x01	; 1
 3bc:	11 f4       	brne	.+4      	; 0x3c2 <drawPattern+0x10c>
 3be:	ad 9a       	sbi	0x15, 5	; 21
 3c0:	01 c0       	rjmp	.+2      	; 0x3c4 <drawPattern+0x10e>
 3c2:	ad 98       	cbi	0x15, 5	; 21
 3c4:	df 01       	movw	r26, r30
 3c6:	13 97       	sbiw	r26, 0x03	; 3
		DISP(pattern[i * 16 + 12], PORTC, 6);
 3c8:	8c 91       	ld	r24, X
 3ca:	81 30       	cpi	r24, 0x01	; 1
 3cc:	11 f4       	brne	.+4      	; 0x3d2 <drawPattern+0x11c>
 3ce:	ae 9a       	sbi	0x15, 6	; 21
 3d0:	01 c0       	rjmp	.+2      	; 0x3d4 <drawPattern+0x11e>
 3d2:	ae 98       	cbi	0x15, 6	; 21
 3d4:	df 01       	movw	r26, r30
 3d6:	12 97       	sbiw	r26, 0x02	; 2
		DISP(pattern[i * 16 + 13], PORTC, 7);
 3d8:	8c 91       	ld	r24, X
 3da:	81 30       	cpi	r24, 0x01	; 1
 3dc:	11 f4       	brne	.+4      	; 0x3e2 <drawPattern+0x12c>
 3de:	af 9a       	sbi	0x15, 7	; 21
 3e0:	01 c0       	rjmp	.+2      	; 0x3e4 <drawPattern+0x12e>
 3e2:	af 98       	cbi	0x15, 7	; 21
 3e4:	df 01       	movw	r26, r30
 3e6:	11 97       	sbiw	r26, 0x01	; 1
		DISP(pattern[i * 16 + 14], PORTA, 6);
 3e8:	8c 91       	ld	r24, X
 3ea:	81 30       	cpi	r24, 0x01	; 1
 3ec:	11 f4       	brne	.+4      	; 0x3f2 <drawPattern+0x13c>
 3ee:	de 9a       	sbi	0x1b, 6	; 27
 3f0:	01 c0       	rjmp	.+2      	; 0x3f4 <drawPattern+0x13e>
 3f2:	de 98       	cbi	0x1b, 6	; 27
		DISP(pattern[i * 16 + 15], PORTA, 5);
 3f4:	80 81       	ld	r24, Z
 3f6:	81 30       	cpi	r24, 0x01	; 1
 3f8:	11 f4       	brne	.+4      	; 0x3fe <drawPattern+0x148>
 3fa:	dd 9a       	sbi	0x1b, 5	; 27
 3fc:	01 c0       	rjmp	.+2      	; 0x400 <drawPattern+0x14a>
 3fe:	dd 98       	cbi	0x1b, 5	; 27
		
		// Quickly toggle the write enable on and off to load into the other 8bit memory latch
		SET_BIT(PORTA, 4);
 400:	dc 9a       	sbi	0x1b, 4	; 27
		CLR_BIT(PORTA, 4);
 402:	dc 98       	cbi	0x1b, 4	; 27
		
		// Sleep for 200ms
		wait_avr(200);
 404:	88 ec       	ldi	r24, 0xC8	; 200
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	0d df       	rcall	.-486    	; 0x224 <wait_avr>
	// Initially disable both memory latches
	CLR_BIT(PORTA, 3);
	CLR_BIT(PORTA, 4);
	
	// For each layer
	for (int i = 0; i < 4; i++) {
 40a:	21 96       	adiw	r28, 0x01	; 1
 40c:	00 5f       	subi	r16, 0xF0	; 240
 40e:	1f 4f       	sbci	r17, 0xFF	; 255
 410:	c4 30       	cpi	r28, 0x04	; 4
 412:	d1 05       	cpc	r29, r1
 414:	09 f0       	breq	.+2      	; 0x418 <drawPattern+0x162>
 416:	5a cf       	rjmp	.-332    	; 0x2cc <drawPattern+0x16>
		CLR_BIT(PORTA, 4);
		
		// Sleep for 200ms
		wait_avr(200);
	}
}
 418:	df 91       	pop	r29
 41a:	cf 91       	pop	r28
 41c:	1f 91       	pop	r17
 41e:	0f 91       	pop	r16
 420:	08 95       	ret

00000422 <main>:
		return 0;
	}
}

int main (void)
{
 422:	cf 93       	push	r28
 424:	df 93       	push	r29
 426:	cd b7       	in	r28, 0x3d	; 61
 428:	de b7       	in	r29, 0x3e	; 62
 42a:	ce 5e       	subi	r28, 0xEE	; 238
 42c:	d1 40       	sbci	r29, 0x01	; 1
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	f8 94       	cli
 432:	de bf       	out	0x3e, r29	; 62
 434:	0f be       	out	0x3f, r0	; 63
 436:	cd bf       	out	0x3d, r28	; 61
	board_init();
 438:	05 df       	rcall	.-502    	; 0x244 <board_init>
	initAdxl();
 43a:	ca de       	rcall	.-620    	; 0x1d0 <initAdxl>
	
	// Set all used ports to output
	SET_BIT(DDRC, 2);
 43c:	a2 9a       	sbi	0x14, 2	; 20
	SET_BIT(DDRC, 3);
 43e:	a3 9a       	sbi	0x14, 3	; 20
	SET_BIT(DDRC, 4);
 440:	a4 9a       	sbi	0x14, 4	; 20
	SET_BIT(DDRC, 5);
 442:	a5 9a       	sbi	0x14, 5	; 20
	SET_BIT(DDRC, 6);
 444:	a6 9a       	sbi	0x14, 6	; 20
	SET_BIT(DDRC, 7);
 446:	a7 9a       	sbi	0x14, 7	; 20
	
	SET_BIT(DDRA, 3);
 448:	d3 9a       	sbi	0x1a, 3	; 26
	SET_BIT(DDRA, 4);
 44a:	d4 9a       	sbi	0x1a, 4	; 26
	SET_BIT(DDRA, 5);
 44c:	d5 9a       	sbi	0x1a, 5	; 26
	SET_BIT(DDRA, 6);
 44e:	d6 9a       	sbi	0x1a, 6	; 26
	
	SET_BIT(DDRB, 0);
 450:	b8 9a       	sbi	0x17, 0	; 23
	SET_BIT(DDRB, 1);
 452:	b9 9a       	sbi	0x17, 1	; 23
 454:	fe 01       	movw	r30, r28
 456:	31 96       	adiw	r30, 0x01	; 1
 458:	ce 01       	movw	r24, r28
 45a:	8f 5b       	subi	r24, 0xBF	; 191
 45c:	9f 4f       	sbci	r25, 0xFF	; 255
	
	// Initalize the pattern to all off, each char is a 1 or 0
	unsigned char pattern[64];
	for (int i = 0; i < 64; i++) {
		pattern[i] = 0;
 45e:	11 92       	st	Z+, r1
	SET_BIT(DDRB, 0);
	SET_BIT(DDRB, 1);
	
	// Initalize the pattern to all off, each char is a 1 or 0
	unsigned char pattern[64];
	for (int i = 0; i < 64; i++) {
 460:	e8 17       	cp	r30, r24
 462:	f9 07       	cpc	r31, r25
 464:	e1 f7       	brne	.-8      	; 0x45e <main+0x3c>
 466:	ce 01       	movw	r24, r28
 468:	83 5b       	subi	r24, 0xB3	; 179
 46a:	9f 4f       	sbci	r25, 0xFF	; 255
					// ones that are pointing the "most down", meaning the ones with the smallest
					// (largest negative) component along the gravity vector.
					// To get this component, we simply take the dot product of the point and the
					// gravity vector. This acts as a score. Those with the smallest score, i.e.
					// those that are pointing down the most, are picked. 
					inds[ind].score = -y * axes[0] + z * axes[1] + -x * axes[2];
 46c:	c7 51       	subi	r28, 0x17	; 23
 46e:	de 4f       	sbci	r29, 0xFE	; 254
 470:	88 83       	st	Y, r24
 472:	c9 5e       	subi	r28, 0xE9	; 233
 474:	d1 40       	sbci	r29, 0x01	; 1
 476:	c6 51       	subi	r28, 0x16	; 22
 478:	de 4f       	sbci	r29, 0xFE	; 254
 47a:	98 83       	st	Y, r25
 47c:	ca 5e       	subi	r28, 0xEA	; 234
 47e:	d1 40       	sbci	r29, 0x01	; 1
 480:	9e 01       	movw	r18, r28
 482:	2f 5f       	subi	r18, 0xFF	; 255
 484:	3f 4f       	sbci	r19, 0xFF	; 255
 486:	39 01       	movw	r6, r18
 488:	c3 51       	subi	r28, 0x13	; 19
 48a:	de 4f       	sbci	r29, 0xFE	; 254
 48c:	28 83       	st	Y, r18
 48e:	cd 5e       	subi	r28, 0xED	; 237
 490:	d1 40       	sbci	r29, 0x01	; 1
 492:	c2 51       	subi	r28, 0x12	; 18
 494:	de 4f       	sbci	r29, 0xFE	; 254
 496:	78 82       	st	Y, r7
 498:	ce 5e       	subi	r28, 0xEE	; 238
 49a:	d1 40       	sbci	r29, 0x01	; 1
 49c:	c9 51       	subi	r28, 0x19	; 25
 49e:	de 4f       	sbci	r29, 0xFE	; 254
 4a0:	18 82       	st	Y, r1
 4a2:	c7 5e       	subi	r28, 0xE7	; 231
 4a4:	d1 40       	sbci	r29, 0x01	; 1
 4a6:	c8 51       	subi	r28, 0x18	; 24
 4a8:	de 4f       	sbci	r29, 0xFE	; 254
 4aa:	18 82       	st	Y, r1
 4ac:	c8 5e       	subi	r28, 0xE8	; 232
 4ae:	d1 40       	sbci	r29, 0x01	; 1
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	c3 52       	subi	r28, 0x23	; 35
 4b4:	de 4f       	sbci	r29, 0xFE	; 254
 4b6:	38 83       	st	Y, r19
 4b8:	cd 5d       	subi	r28, 0xDD	; 221
 4ba:	d1 40       	sbci	r29, 0x01	; 1
 4bc:	a0 e0       	ldi	r26, 0x00	; 0
 4be:	c2 52       	subi	r28, 0x22	; 34
 4c0:	de 4f       	sbci	r29, 0xFE	; 254
 4c2:	a8 83       	st	Y, r26
 4c4:	ce 5d       	subi	r28, 0xDE	; 222
 4c6:	d1 40       	sbci	r29, 0x01	; 1
 4c8:	fc 01       	movw	r30, r24
 4ca:	e0 54       	subi	r30, 0x40	; 64
 4cc:	ff 4f       	sbci	r31, 0xFF	; 255
 4ce:	c5 51       	subi	r28, 0x15	; 21
 4d0:	de 4f       	sbci	r29, 0xFE	; 254
 4d2:	f9 83       	std	Y+1, r31	; 0x01
 4d4:	e8 83       	st	Y, r30
 4d6:	cb 5e       	subi	r28, 0xEB	; 235
 4d8:	d1 40       	sbci	r29, 0x01	; 1
	// buffer for the sortableInd objects
	t_SortableInd inds[64];
	
	while (true) {
		// Get the accelerometer data
		readAdxl(axes);
 4da:	ce 01       	movw	r24, r28
 4dc:	8f 5b       	subi	r24, 0xBF	; 191
 4de:	9f 4f       	sbci	r25, 0xFF	; 255
 4e0:	86 de       	rcall	.-756    	; 0x1ee <readAdxl>
					// ones that are pointing the "most down", meaning the ones with the smallest
					// (largest negative) component along the gravity vector.
					// To get this component, we simply take the dot product of the point and the
					// gravity vector. This acts as a score. Those with the smallest score, i.e.
					// those that are pointing down the most, are picked. 
					inds[ind].score = -y * axes[0] + z * axes[1] + -x * axes[2];
 4e2:	25 96       	adiw	r28, 0x05	; 5
 4e4:	8c ad       	ldd	r24, Y+60	; 0x3c
 4e6:	9d ad       	ldd	r25, Y+61	; 0x3d
 4e8:	ae ad       	ldd	r26, Y+62	; 0x3e
 4ea:	bf ad       	ldd	r27, Y+63	; 0x3f
 4ec:	25 97       	sbiw	r28, 0x05	; 5
 4ee:	c7 52       	subi	r28, 0x27	; 39
 4f0:	de 4f       	sbci	r29, 0xFE	; 254
 4f2:	88 83       	st	Y, r24
 4f4:	99 83       	std	Y+1, r25	; 0x01
 4f6:	aa 83       	std	Y+2, r26	; 0x02
 4f8:	bb 83       	std	Y+3, r27	; 0x03
 4fa:	c9 5d       	subi	r28, 0xD9	; 217
 4fc:	d1 40       	sbci	r29, 0x01	; 1
 4fe:	29 96       	adiw	r28, 0x09	; 9
 500:	8c ad       	ldd	r24, Y+60	; 0x3c
 502:	9d ad       	ldd	r25, Y+61	; 0x3d
 504:	ae ad       	ldd	r26, Y+62	; 0x3e
 506:	bf ad       	ldd	r27, Y+63	; 0x3f
 508:	29 97       	sbiw	r28, 0x09	; 9
 50a:	c1 53       	subi	r28, 0x31	; 49
 50c:	de 4f       	sbci	r29, 0xFE	; 254
 50e:	88 83       	st	Y, r24
 510:	99 83       	std	Y+1, r25	; 0x01
 512:	aa 83       	std	Y+2, r26	; 0x02
 514:	bb 83       	std	Y+3, r27	; 0x03
 516:	cf 5c       	subi	r28, 0xCF	; 207
 518:	d1 40       	sbci	r29, 0x01	; 1
 51a:	2d 96       	adiw	r28, 0x0d	; 13
 51c:	8c ad       	ldd	r24, Y+60	; 0x3c
 51e:	9d ad       	ldd	r25, Y+61	; 0x3d
 520:	ae ad       	ldd	r26, Y+62	; 0x3e
 522:	bf ad       	ldd	r27, Y+63	; 0x3f
 524:	2d 97       	sbiw	r28, 0x0d	; 13
 526:	cd 51       	subi	r28, 0x1D	; 29
 528:	de 4f       	sbci	r29, 0xFE	; 254
 52a:	88 83       	st	Y, r24
 52c:	99 83       	std	Y+1, r25	; 0x01
 52e:	aa 83       	std	Y+2, r26	; 0x02
 530:	bb 83       	std	Y+3, r27	; 0x03
 532:	c3 5e       	subi	r28, 0xE3	; 227
 534:	d1 40       	sbci	r29, 0x01	; 1
 536:	c7 51       	subi	r28, 0x17	; 23
 538:	de 4f       	sbci	r29, 0xFE	; 254
 53a:	98 81       	ld	r25, Y
 53c:	c9 5e       	subi	r28, 0xE9	; 233
 53e:	d1 40       	sbci	r29, 0x01	; 1
 540:	c1 52       	subi	r28, 0x21	; 33
 542:	de 4f       	sbci	r29, 0xFE	; 254
 544:	98 83       	st	Y, r25
 546:	cf 5d       	subi	r28, 0xDF	; 223
 548:	d1 40       	sbci	r29, 0x01	; 1
 54a:	c6 51       	subi	r28, 0x16	; 22
 54c:	de 4f       	sbci	r29, 0xFE	; 254
 54e:	a8 81       	ld	r26, Y
 550:	ca 5e       	subi	r28, 0xEA	; 234
 552:	d1 40       	sbci	r29, 0x01	; 1
 554:	c0 52       	subi	r28, 0x20	; 32
 556:	de 4f       	sbci	r29, 0xFE	; 254
 558:	a8 83       	st	Y, r26
 55a:	c0 5e       	subi	r28, 0xE0	; 224
 55c:	d1 40       	sbci	r29, 0x01	; 1
 55e:	cf 51       	subi	r28, 0x1F	; 31
 560:	de 4f       	sbci	r29, 0xFE	; 254
 562:	18 82       	st	Y, r1
 564:	c1 5e       	subi	r28, 0xE1	; 225
 566:	d1 40       	sbci	r29, 0x01	; 1
 568:	ce 51       	subi	r28, 0x1E	; 30
 56a:	de 4f       	sbci	r29, 0xFE	; 254
 56c:	18 82       	st	Y, r1
 56e:	c2 5e       	subi	r28, 0xE2	; 226
 570:	d1 40       	sbci	r29, 0x01	; 1
 572:	c9 52       	subi	r28, 0x29	; 41
 574:	de 4f       	sbci	r29, 0xFE	; 254
 576:	18 82       	st	Y, r1
 578:	c7 5d       	subi	r28, 0xD7	; 215
 57a:	d1 40       	sbci	r29, 0x01	; 1
 57c:	c8 52       	subi	r28, 0x28	; 40
 57e:	de 4f       	sbci	r29, 0xFE	; 254
 580:	18 82       	st	Y, r1
 582:	c8 5d       	subi	r28, 0xD8	; 216
 584:	d1 40       	sbci	r29, 0x01	; 1
 586:	b6 c0       	rjmp	.+364    	; 0x6f4 <main+0x2d2>
 588:	f3 01       	movw	r30, r6
 58a:	ee 0d       	add	r30, r14
 58c:	ff 1d       	adc	r31, r15
				for (int z = 0; z < 4; z++) {
					// Get its index
					int ind = y * 16 + x * 4 + z;
					
					// Initially set it to 0
					pattern[ind] = 0;
 58e:	10 82       	st	Z, r1
					
					// For the corresponding struct, set its index
					inds[ind].ind = ind;
 590:	f6 01       	movw	r30, r12
 592:	f1 82       	std	Z+1, r15	; 0x01
 594:	e0 82       	st	Z, r14
					// ones that are pointing the "most down", meaning the ones with the smallest
					// (largest negative) component along the gravity vector.
					// To get this component, we simply take the dot product of the point and the
					// gravity vector. This acts as a score. Those with the smallest score, i.e.
					// those that are pointing down the most, are picked. 
					inds[ind].score = -y * axes[0] + z * axes[1] + -x * axes[2];
 596:	b8 01       	movw	r22, r16
 598:	88 27       	eor	r24, r24
 59a:	77 fd       	sbrc	r23, 7
 59c:	80 95       	com	r24
 59e:	98 2f       	mov	r25, r24
 5a0:	8f d1       	rcall	.+798    	; 0x8c0 <__floatsisf>
 5a2:	c1 53       	subi	r28, 0x31	; 49
 5a4:	de 4f       	sbci	r29, 0xFE	; 254
 5a6:	28 81       	ld	r18, Y
 5a8:	39 81       	ldd	r19, Y+1	; 0x01
 5aa:	4a 81       	ldd	r20, Y+2	; 0x02
 5ac:	5b 81       	ldd	r21, Y+3	; 0x03
 5ae:	cf 5c       	subi	r28, 0xCF	; 207
 5b0:	d1 40       	sbci	r29, 0x01	; 1
 5b2:	3a d2       	rcall	.+1140   	; 0xa28 <__mulsf3>
 5b4:	9b 01       	movw	r18, r22
 5b6:	ac 01       	movw	r20, r24
 5b8:	c5 01       	movw	r24, r10
 5ba:	b4 01       	movw	r22, r8
 5bc:	17 d1       	rcall	.+558    	; 0x7ec <__addsf3>
 5be:	a2 01       	movw	r20, r4
 5c0:	91 01       	movw	r18, r2
 5c2:	14 d1       	rcall	.+552    	; 0x7ec <__addsf3>
 5c4:	d6 01       	movw	r26, r12
 5c6:	12 96       	adiw	r26, 0x02	; 2
 5c8:	6d 93       	st	X+, r22
 5ca:	7d 93       	st	X+, r23
 5cc:	8d 93       	st	X+, r24
 5ce:	9c 93       	st	X, r25
 5d0:	15 97       	sbiw	r26, 0x05	; 5
		readAdxl(axes);
		
		// For every led
		for (int x = 0; x < 4; x++) {
			for (int y = 0; y < 4; y++) {
				for (int z = 0; z < 4; z++) {
 5d2:	0f 5f       	subi	r16, 0xFF	; 255
 5d4:	1f 4f       	sbci	r17, 0xFF	; 255
 5d6:	bf ef       	ldi	r27, 0xFF	; 255
 5d8:	eb 1a       	sub	r14, r27
 5da:	fb 0a       	sbc	r15, r27
 5dc:	e6 e0       	ldi	r30, 0x06	; 6
 5de:	ce 0e       	add	r12, r30
 5e0:	d1 1c       	adc	r13, r1
 5e2:	04 30       	cpi	r16, 0x04	; 4
 5e4:	11 05       	cpc	r17, r1
 5e6:	81 f6       	brne	.-96     	; 0x588 <main+0x166>
 5e8:	c3 53       	subi	r28, 0x33	; 51
 5ea:	de 4f       	sbci	r29, 0xFE	; 254
 5ec:	28 81       	ld	r18, Y
 5ee:	39 81       	ldd	r19, Y+1	; 0x01
 5f0:	cd 5c       	subi	r28, 0xCD	; 205
 5f2:	d1 40       	sbci	r29, 0x01	; 1
 5f4:	21 50       	subi	r18, 0x01	; 1
 5f6:	31 09       	sbc	r19, r1
 5f8:	c3 53       	subi	r28, 0x33	; 51
 5fa:	de 4f       	sbci	r29, 0xFE	; 254
 5fc:	39 83       	std	Y+1, r19	; 0x01
 5fe:	28 83       	st	Y, r18
 600:	cd 5c       	subi	r28, 0xCD	; 205
 602:	d1 40       	sbci	r29, 0x01	; 1
 604:	cd 52       	subi	r28, 0x2D	; 45
 606:	de 4f       	sbci	r29, 0xFE	; 254
 608:	88 81       	ld	r24, Y
 60a:	99 81       	ldd	r25, Y+1	; 0x01
 60c:	c3 5d       	subi	r28, 0xD3	; 211
 60e:	d1 40       	sbci	r29, 0x01	; 1
 610:	40 96       	adiw	r24, 0x10	; 16
 612:	cd 52       	subi	r28, 0x2D	; 45
 614:	de 4f       	sbci	r29, 0xFE	; 254
 616:	99 83       	std	Y+1, r25	; 0x01
 618:	88 83       	st	Y, r24
 61a:	c3 5d       	subi	r28, 0xD3	; 211
 61c:	d1 40       	sbci	r29, 0x01	; 1
 61e:	cb 52       	subi	r28, 0x2B	; 43
 620:	de 4f       	sbci	r29, 0xFE	; 254
 622:	a8 81       	ld	r26, Y
 624:	b9 81       	ldd	r27, Y+1	; 0x01
 626:	c5 5d       	subi	r28, 0xD5	; 213
 628:	d1 40       	sbci	r29, 0x01	; 1
 62a:	a0 5a       	subi	r26, 0xA0	; 160
 62c:	bf 4f       	sbci	r27, 0xFF	; 255
 62e:	cb 52       	subi	r28, 0x2B	; 43
 630:	de 4f       	sbci	r29, 0xFE	; 254
 632:	b9 83       	std	Y+1, r27	; 0x01
 634:	a8 83       	st	Y, r26
 636:	c5 5d       	subi	r28, 0xD5	; 213
 638:	d1 40       	sbci	r29, 0x01	; 1
		// Get the accelerometer data
		readAdxl(axes);
		
		// For every led
		for (int x = 0; x < 4; x++) {
			for (int y = 0; y < 4; y++) {
 63a:	2c 3f       	cpi	r18, 0xFC	; 252
 63c:	3f 4f       	sbci	r19, 0xFF	; 255
 63e:	71 f1       	breq	.+92     	; 0x69c <main+0x27a>
					// ones that are pointing the "most down", meaning the ones with the smallest
					// (largest negative) component along the gravity vector.
					// To get this component, we simply take the dot product of the point and the
					// gravity vector. This acts as a score. Those with the smallest score, i.e.
					// those that are pointing down the most, are picked. 
					inds[ind].score = -y * axes[0] + z * axes[1] + -x * axes[2];
 640:	c3 53       	subi	r28, 0x33	; 51
 642:	de 4f       	sbci	r29, 0xFE	; 254
 644:	e8 81       	ld	r30, Y
 646:	f9 81       	ldd	r31, Y+1	; 0x01
 648:	cd 5c       	subi	r28, 0xCD	; 205
 64a:	d1 40       	sbci	r29, 0x01	; 1
 64c:	bf 01       	movw	r22, r30
 64e:	88 27       	eor	r24, r24
 650:	77 fd       	sbrc	r23, 7
 652:	80 95       	com	r24
 654:	98 2f       	mov	r25, r24
 656:	34 d1       	rcall	.+616    	; 0x8c0 <__floatsisf>
 658:	c7 52       	subi	r28, 0x27	; 39
 65a:	de 4f       	sbci	r29, 0xFE	; 254
 65c:	28 81       	ld	r18, Y
 65e:	39 81       	ldd	r19, Y+1	; 0x01
 660:	4a 81       	ldd	r20, Y+2	; 0x02
 662:	5b 81       	ldd	r21, Y+3	; 0x03
 664:	c9 5d       	subi	r28, 0xD9	; 217
 666:	d1 40       	sbci	r29, 0x01	; 1
 668:	df d1       	rcall	.+958    	; 0xa28 <__mulsf3>
 66a:	4b 01       	movw	r8, r22
 66c:	5c 01       	movw	r10, r24
 66e:	cb 52       	subi	r28, 0x2B	; 43
 670:	de 4f       	sbci	r29, 0xFE	; 254
 672:	c8 80       	ld	r12, Y
 674:	d9 80       	ldd	r13, Y+1	; 0x01
 676:	c5 5d       	subi	r28, 0xD5	; 213
 678:	d1 40       	sbci	r29, 0x01	; 1
 67a:	cd 52       	subi	r28, 0x2D	; 45
 67c:	de 4f       	sbci	r29, 0xFE	; 254
 67e:	e8 80       	ld	r14, Y
 680:	f9 80       	ldd	r15, Y+1	; 0x01
 682:	c3 5d       	subi	r28, 0xD3	; 211
 684:	d1 40       	sbci	r29, 0x01	; 1
 686:	c3 52       	subi	r28, 0x23	; 35
 688:	de 4f       	sbci	r29, 0xFE	; 254
 68a:	08 81       	ld	r16, Y
 68c:	cd 5d       	subi	r28, 0xDD	; 221
 68e:	d1 40       	sbci	r29, 0x01	; 1
 690:	c2 52       	subi	r28, 0x22	; 34
 692:	de 4f       	sbci	r29, 0xFE	; 254
 694:	18 81       	ld	r17, Y
 696:	ce 5d       	subi	r28, 0xDE	; 222
 698:	d1 40       	sbci	r29, 0x01	; 1
 69a:	76 cf       	rjmp	.-276    	; 0x588 <main+0x166>
 69c:	c9 52       	subi	r28, 0x29	; 41
 69e:	de 4f       	sbci	r29, 0xFE	; 254
 6a0:	28 81       	ld	r18, Y
 6a2:	39 81       	ldd	r19, Y+1	; 0x01
 6a4:	c7 5d       	subi	r28, 0xD7	; 215
 6a6:	d1 40       	sbci	r29, 0x01	; 1
 6a8:	21 50       	subi	r18, 0x01	; 1
 6aa:	31 09       	sbc	r19, r1
 6ac:	c9 52       	subi	r28, 0x29	; 41
 6ae:	de 4f       	sbci	r29, 0xFE	; 254
 6b0:	39 83       	std	Y+1, r19	; 0x01
 6b2:	28 83       	st	Y, r18
 6b4:	c7 5d       	subi	r28, 0xD7	; 215
 6b6:	d1 40       	sbci	r29, 0x01	; 1
 6b8:	cf 51       	subi	r28, 0x1F	; 31
 6ba:	de 4f       	sbci	r29, 0xFE	; 254
 6bc:	88 81       	ld	r24, Y
 6be:	99 81       	ldd	r25, Y+1	; 0x01
 6c0:	c1 5e       	subi	r28, 0xE1	; 225
 6c2:	d1 40       	sbci	r29, 0x01	; 1
 6c4:	04 96       	adiw	r24, 0x04	; 4
 6c6:	cf 51       	subi	r28, 0x1F	; 31
 6c8:	de 4f       	sbci	r29, 0xFE	; 254
 6ca:	99 83       	std	Y+1, r25	; 0x01
 6cc:	88 83       	st	Y, r24
 6ce:	c1 5e       	subi	r28, 0xE1	; 225
 6d0:	d1 40       	sbci	r29, 0x01	; 1
 6d2:	c1 52       	subi	r28, 0x21	; 33
 6d4:	de 4f       	sbci	r29, 0xFE	; 254
 6d6:	a8 81       	ld	r26, Y
 6d8:	b9 81       	ldd	r27, Y+1	; 0x01
 6da:	cf 5d       	subi	r28, 0xDF	; 223
 6dc:	d1 40       	sbci	r29, 0x01	; 1
 6de:	58 96       	adiw	r26, 0x18	; 24
 6e0:	c1 52       	subi	r28, 0x21	; 33
 6e2:	de 4f       	sbci	r29, 0xFE	; 254
 6e4:	b9 83       	std	Y+1, r27	; 0x01
 6e6:	a8 83       	st	Y, r26
 6e8:	cf 5d       	subi	r28, 0xDF	; 223
 6ea:	d1 40       	sbci	r29, 0x01	; 1
	while (true) {
		// Get the accelerometer data
		readAdxl(axes);
		
		// For every led
		for (int x = 0; x < 4; x++) {
 6ec:	2c 3f       	cpi	r18, 0xFC	; 252
 6ee:	3f 4f       	sbci	r19, 0xFF	; 255
 6f0:	09 f4       	brne	.+2      	; 0x6f4 <main+0x2d2>
 6f2:	44 c0       	rjmp	.+136    	; 0x77c <main+0x35a>
					// ones that are pointing the "most down", meaning the ones with the smallest
					// (largest negative) component along the gravity vector.
					// To get this component, we simply take the dot product of the point and the
					// gravity vector. This acts as a score. Those with the smallest score, i.e.
					// those that are pointing down the most, are picked. 
					inds[ind].score = -y * axes[0] + z * axes[1] + -x * axes[2];
 6f4:	c9 52       	subi	r28, 0x29	; 41
 6f6:	de 4f       	sbci	r29, 0xFE	; 254
 6f8:	e8 81       	ld	r30, Y
 6fa:	f9 81       	ldd	r31, Y+1	; 0x01
 6fc:	c7 5d       	subi	r28, 0xD7	; 215
 6fe:	d1 40       	sbci	r29, 0x01	; 1
 700:	bf 01       	movw	r22, r30
 702:	88 27       	eor	r24, r24
 704:	77 fd       	sbrc	r23, 7
 706:	80 95       	com	r24
 708:	98 2f       	mov	r25, r24
 70a:	da d0       	rcall	.+436    	; 0x8c0 <__floatsisf>
 70c:	cd 51       	subi	r28, 0x1D	; 29
 70e:	de 4f       	sbci	r29, 0xFE	; 254
 710:	28 81       	ld	r18, Y
 712:	39 81       	ldd	r19, Y+1	; 0x01
 714:	4a 81       	ldd	r20, Y+2	; 0x02
 716:	5b 81       	ldd	r21, Y+3	; 0x03
 718:	c3 5e       	subi	r28, 0xE3	; 227
 71a:	d1 40       	sbci	r29, 0x01	; 1
 71c:	85 d1       	rcall	.+778    	; 0xa28 <__mulsf3>
 71e:	1b 01       	movw	r2, r22
 720:	2c 01       	movw	r4, r24
 722:	c1 52       	subi	r28, 0x21	; 33
 724:	de 4f       	sbci	r29, 0xFE	; 254
 726:	28 81       	ld	r18, Y
 728:	39 81       	ldd	r19, Y+1	; 0x01
 72a:	cf 5d       	subi	r28, 0xDF	; 223
 72c:	d1 40       	sbci	r29, 0x01	; 1
 72e:	cb 52       	subi	r28, 0x2B	; 43
 730:	de 4f       	sbci	r29, 0xFE	; 254
 732:	39 83       	std	Y+1, r19	; 0x01
 734:	28 83       	st	Y, r18
 736:	c5 5d       	subi	r28, 0xD5	; 213
 738:	d1 40       	sbci	r29, 0x01	; 1
 73a:	cf 51       	subi	r28, 0x1F	; 31
 73c:	de 4f       	sbci	r29, 0xFE	; 254
 73e:	88 81       	ld	r24, Y
 740:	99 81       	ldd	r25, Y+1	; 0x01
 742:	c1 5e       	subi	r28, 0xE1	; 225
 744:	d1 40       	sbci	r29, 0x01	; 1
 746:	cd 52       	subi	r28, 0x2D	; 45
 748:	de 4f       	sbci	r29, 0xFE	; 254
 74a:	99 83       	std	Y+1, r25	; 0x01
 74c:	88 83       	st	Y, r24
 74e:	c3 5d       	subi	r28, 0xD3	; 211
 750:	d1 40       	sbci	r29, 0x01	; 1
 752:	c9 51       	subi	r28, 0x19	; 25
 754:	de 4f       	sbci	r29, 0xFE	; 254
 756:	98 81       	ld	r25, Y
 758:	c7 5e       	subi	r28, 0xE7	; 231
 75a:	d1 40       	sbci	r29, 0x01	; 1
 75c:	c3 53       	subi	r28, 0x33	; 51
 75e:	de 4f       	sbci	r29, 0xFE	; 254
 760:	98 83       	st	Y, r25
 762:	cd 5c       	subi	r28, 0xCD	; 205
 764:	d1 40       	sbci	r29, 0x01	; 1
 766:	c8 51       	subi	r28, 0x18	; 24
 768:	de 4f       	sbci	r29, 0xFE	; 254
 76a:	a8 81       	ld	r26, Y
 76c:	c8 5e       	subi	r28, 0xE8	; 232
 76e:	d1 40       	sbci	r29, 0x01	; 1
 770:	c2 53       	subi	r28, 0x32	; 50
 772:	de 4f       	sbci	r29, 0xFE	; 254
 774:	a8 83       	st	Y, r26
 776:	ce 5c       	subi	r28, 0xCE	; 206
 778:	d1 40       	sbci	r29, 0x01	; 1
 77a:	62 cf       	rjmp	.-316    	; 0x640 <main+0x21e>
				}
			}
		}
		
		// Use quicksort to sort the structs based on the score
		qsort(inds, 64, sizeof(t_SortableInd), compareSortable);
 77c:	23 e2       	ldi	r18, 0x23	; 35
 77e:	31 e0       	ldi	r19, 0x01	; 1
 780:	46 e0       	ldi	r20, 0x06	; 6
 782:	50 e0       	ldi	r21, 0x00	; 0
 784:	60 e4       	ldi	r22, 0x40	; 64
 786:	70 e0       	ldi	r23, 0x00	; 0
 788:	c7 51       	subi	r28, 0x17	; 23
 78a:	de 4f       	sbci	r29, 0xFE	; 254
 78c:	88 81       	ld	r24, Y
 78e:	c9 5e       	subi	r28, 0xE9	; 233
 790:	d1 40       	sbci	r29, 0x01	; 1
 792:	c6 51       	subi	r28, 0x16	; 22
 794:	de 4f       	sbci	r29, 0xFE	; 254
 796:	98 81       	ld	r25, Y
 798:	ca 5e       	subi	r28, 0xEA	; 234
 79a:	d1 40       	sbci	r29, 0x01	; 1
 79c:	e6 d1       	rcall	.+972    	; 0xb6a <qsort>
 79e:	c7 51       	subi	r28, 0x17	; 23
 7a0:	de 4f       	sbci	r29, 0xFE	; 254
 7a2:	e8 81       	ld	r30, Y
 7a4:	c9 5e       	subi	r28, 0xE9	; 233
 7a6:	d1 40       	sbci	r29, 0x01	; 1
 7a8:	c6 51       	subi	r28, 0x16	; 22
 7aa:	de 4f       	sbci	r29, 0xFE	; 254
 7ac:	f8 81       	ld	r31, Y
 7ae:	ca 5e       	subi	r28, 0xEA	; 234
 7b0:	d1 40       	sbci	r29, 0x01	; 1
 7b2:	c5 51       	subi	r28, 0x15	; 21
 7b4:	de 4f       	sbci	r29, 0xFE	; 254
 7b6:	88 81       	ld	r24, Y
 7b8:	99 81       	ldd	r25, Y+1	; 0x01
 7ba:	cb 5e       	subi	r28, 0xEB	; 235
 7bc:	d1 40       	sbci	r29, 0x01	; 1
		
		// Pick the 32 structs with the smallest score and enable those leds
		for (int i = 0; i < 32; i++) {
			pattern[inds[i].ind] = 1;
 7be:	a0 81       	ld	r26, Z
 7c0:	b1 81       	ldd	r27, Z+1	; 0x01
 7c2:	a6 0d       	add	r26, r6
 7c4:	b7 1d       	adc	r27, r7
 7c6:	21 e0       	ldi	r18, 0x01	; 1
 7c8:	2c 93       	st	X, r18
 7ca:	36 96       	adiw	r30, 0x06	; 6
		
		// Use quicksort to sort the structs based on the score
		qsort(inds, 64, sizeof(t_SortableInd), compareSortable);
		
		// Pick the 32 structs with the smallest score and enable those leds
		for (int i = 0; i < 32; i++) {
 7cc:	e8 17       	cp	r30, r24
 7ce:	f9 07       	cpc	r31, r25
 7d0:	b1 f7       	brne	.-20     	; 0x7be <main+0x39c>
			pattern[inds[i].ind] = 1;
		}
		
		// Draw the pattern
		drawPattern(pattern);
 7d2:	c3 51       	subi	r28, 0x13	; 19
 7d4:	de 4f       	sbci	r29, 0xFE	; 254
 7d6:	88 81       	ld	r24, Y
 7d8:	cd 5e       	subi	r28, 0xED	; 237
 7da:	d1 40       	sbci	r29, 0x01	; 1
 7dc:	c2 51       	subi	r28, 0x12	; 18
 7de:	de 4f       	sbci	r29, 0xFE	; 254
 7e0:	98 81       	ld	r25, Y
 7e2:	ce 5e       	subi	r28, 0xEE	; 238
 7e4:	d1 40       	sbci	r29, 0x01	; 1
 7e6:	67 dd       	rcall	.-1330   	; 0x2b6 <drawPattern>
	}
 7e8:	78 ce       	rjmp	.-784    	; 0x4da <main+0xb8>

000007ea <__subsf3>:
 7ea:	50 58       	subi	r21, 0x80	; 128

000007ec <__addsf3>:
 7ec:	bb 27       	eor	r27, r27
 7ee:	aa 27       	eor	r26, r26
 7f0:	0e d0       	rcall	.+28     	; 0x80e <__addsf3x>
 7f2:	dc c0       	rjmp	.+440    	; 0x9ac <__fp_round>
 7f4:	cd d0       	rcall	.+410    	; 0x990 <__fp_pscA>
 7f6:	30 f0       	brcs	.+12     	; 0x804 <__addsf3+0x18>
 7f8:	d2 d0       	rcall	.+420    	; 0x99e <__fp_pscB>
 7fa:	20 f0       	brcs	.+8      	; 0x804 <__addsf3+0x18>
 7fc:	31 f4       	brne	.+12     	; 0x80a <__addsf3+0x1e>
 7fe:	9f 3f       	cpi	r25, 0xFF	; 255
 800:	11 f4       	brne	.+4      	; 0x806 <__addsf3+0x1a>
 802:	1e f4       	brtc	.+6      	; 0x80a <__addsf3+0x1e>
 804:	c2 c0       	rjmp	.+388    	; 0x98a <__fp_nan>
 806:	0e f4       	brtc	.+2      	; 0x80a <__addsf3+0x1e>
 808:	e0 95       	com	r30
 80a:	e7 fb       	bst	r30, 7
 80c:	b8 c0       	rjmp	.+368    	; 0x97e <__fp_inf>

0000080e <__addsf3x>:
 80e:	e9 2f       	mov	r30, r25
 810:	de d0       	rcall	.+444    	; 0x9ce <__fp_split3>
 812:	80 f3       	brcs	.-32     	; 0x7f4 <__addsf3+0x8>
 814:	ba 17       	cp	r27, r26
 816:	62 07       	cpc	r22, r18
 818:	73 07       	cpc	r23, r19
 81a:	84 07       	cpc	r24, r20
 81c:	95 07       	cpc	r25, r21
 81e:	18 f0       	brcs	.+6      	; 0x826 <__addsf3x+0x18>
 820:	71 f4       	brne	.+28     	; 0x83e <__addsf3x+0x30>
 822:	9e f5       	brtc	.+102    	; 0x88a <__stack+0x2b>
 824:	f6 c0       	rjmp	.+492    	; 0xa12 <__fp_zero>
 826:	0e f4       	brtc	.+2      	; 0x82a <__addsf3x+0x1c>
 828:	e0 95       	com	r30
 82a:	0b 2e       	mov	r0, r27
 82c:	ba 2f       	mov	r27, r26
 82e:	a0 2d       	mov	r26, r0
 830:	0b 01       	movw	r0, r22
 832:	b9 01       	movw	r22, r18
 834:	90 01       	movw	r18, r0
 836:	0c 01       	movw	r0, r24
 838:	ca 01       	movw	r24, r20
 83a:	a0 01       	movw	r20, r0
 83c:	11 24       	eor	r1, r1
 83e:	ff 27       	eor	r31, r31
 840:	59 1b       	sub	r21, r25
 842:	99 f0       	breq	.+38     	; 0x86a <__stack+0xb>
 844:	59 3f       	cpi	r21, 0xF9	; 249
 846:	50 f4       	brcc	.+20     	; 0x85c <__addsf3x+0x4e>
 848:	50 3e       	cpi	r21, 0xE0	; 224
 84a:	68 f1       	brcs	.+90     	; 0x8a6 <__stack+0x47>
 84c:	1a 16       	cp	r1, r26
 84e:	f0 40       	sbci	r31, 0x00	; 0
 850:	a2 2f       	mov	r26, r18
 852:	23 2f       	mov	r18, r19
 854:	34 2f       	mov	r19, r20
 856:	44 27       	eor	r20, r20
 858:	58 5f       	subi	r21, 0xF8	; 248
 85a:	f3 cf       	rjmp	.-26     	; 0x842 <__addsf3x+0x34>
 85c:	46 95       	lsr	r20
 85e:	37 95       	ror	r19
 860:	27 95       	ror	r18
 862:	a7 95       	ror	r26
 864:	f0 40       	sbci	r31, 0x00	; 0
 866:	53 95       	inc	r21
 868:	c9 f7       	brne	.-14     	; 0x85c <__addsf3x+0x4e>
 86a:	7e f4       	brtc	.+30     	; 0x88a <__stack+0x2b>
 86c:	1f 16       	cp	r1, r31
 86e:	ba 0b       	sbc	r27, r26
 870:	62 0b       	sbc	r22, r18
 872:	73 0b       	sbc	r23, r19
 874:	84 0b       	sbc	r24, r20
 876:	ba f0       	brmi	.+46     	; 0x8a6 <__stack+0x47>
 878:	91 50       	subi	r25, 0x01	; 1
 87a:	a1 f0       	breq	.+40     	; 0x8a4 <__stack+0x45>
 87c:	ff 0f       	add	r31, r31
 87e:	bb 1f       	adc	r27, r27
 880:	66 1f       	adc	r22, r22
 882:	77 1f       	adc	r23, r23
 884:	88 1f       	adc	r24, r24
 886:	c2 f7       	brpl	.-16     	; 0x878 <__stack+0x19>
 888:	0e c0       	rjmp	.+28     	; 0x8a6 <__stack+0x47>
 88a:	ba 0f       	add	r27, r26
 88c:	62 1f       	adc	r22, r18
 88e:	73 1f       	adc	r23, r19
 890:	84 1f       	adc	r24, r20
 892:	48 f4       	brcc	.+18     	; 0x8a6 <__stack+0x47>
 894:	87 95       	ror	r24
 896:	77 95       	ror	r23
 898:	67 95       	ror	r22
 89a:	b7 95       	ror	r27
 89c:	f7 95       	ror	r31
 89e:	9e 3f       	cpi	r25, 0xFE	; 254
 8a0:	08 f0       	brcs	.+2      	; 0x8a4 <__stack+0x45>
 8a2:	b3 cf       	rjmp	.-154    	; 0x80a <__addsf3+0x1e>
 8a4:	93 95       	inc	r25
 8a6:	88 0f       	add	r24, r24
 8a8:	08 f0       	brcs	.+2      	; 0x8ac <__stack+0x4d>
 8aa:	99 27       	eor	r25, r25
 8ac:	ee 0f       	add	r30, r30
 8ae:	97 95       	ror	r25
 8b0:	87 95       	ror	r24
 8b2:	08 95       	ret

000008b4 <__cmpsf2>:
 8b4:	40 d0       	rcall	.+128    	; 0x936 <__fp_cmp>
 8b6:	08 f4       	brcc	.+2      	; 0x8ba <__cmpsf2+0x6>
 8b8:	81 e0       	ldi	r24, 0x01	; 1
 8ba:	08 95       	ret

000008bc <__floatunsisf>:
 8bc:	e8 94       	clt
 8be:	09 c0       	rjmp	.+18     	; 0x8d2 <__floatsisf+0x12>

000008c0 <__floatsisf>:
 8c0:	97 fb       	bst	r25, 7
 8c2:	3e f4       	brtc	.+14     	; 0x8d2 <__floatsisf+0x12>
 8c4:	90 95       	com	r25
 8c6:	80 95       	com	r24
 8c8:	70 95       	com	r23
 8ca:	61 95       	neg	r22
 8cc:	7f 4f       	sbci	r23, 0xFF	; 255
 8ce:	8f 4f       	sbci	r24, 0xFF	; 255
 8d0:	9f 4f       	sbci	r25, 0xFF	; 255
 8d2:	99 23       	and	r25, r25
 8d4:	a9 f0       	breq	.+42     	; 0x900 <__floatsisf+0x40>
 8d6:	f9 2f       	mov	r31, r25
 8d8:	96 e9       	ldi	r25, 0x96	; 150
 8da:	bb 27       	eor	r27, r27
 8dc:	93 95       	inc	r25
 8de:	f6 95       	lsr	r31
 8e0:	87 95       	ror	r24
 8e2:	77 95       	ror	r23
 8e4:	67 95       	ror	r22
 8e6:	b7 95       	ror	r27
 8e8:	f1 11       	cpse	r31, r1
 8ea:	f8 cf       	rjmp	.-16     	; 0x8dc <__floatsisf+0x1c>
 8ec:	fa f4       	brpl	.+62     	; 0x92c <__floatsisf+0x6c>
 8ee:	bb 0f       	add	r27, r27
 8f0:	11 f4       	brne	.+4      	; 0x8f6 <__floatsisf+0x36>
 8f2:	60 ff       	sbrs	r22, 0
 8f4:	1b c0       	rjmp	.+54     	; 0x92c <__floatsisf+0x6c>
 8f6:	6f 5f       	subi	r22, 0xFF	; 255
 8f8:	7f 4f       	sbci	r23, 0xFF	; 255
 8fa:	8f 4f       	sbci	r24, 0xFF	; 255
 8fc:	9f 4f       	sbci	r25, 0xFF	; 255
 8fe:	16 c0       	rjmp	.+44     	; 0x92c <__floatsisf+0x6c>
 900:	88 23       	and	r24, r24
 902:	11 f0       	breq	.+4      	; 0x908 <__floatsisf+0x48>
 904:	96 e9       	ldi	r25, 0x96	; 150
 906:	11 c0       	rjmp	.+34     	; 0x92a <__floatsisf+0x6a>
 908:	77 23       	and	r23, r23
 90a:	21 f0       	breq	.+8      	; 0x914 <__floatsisf+0x54>
 90c:	9e e8       	ldi	r25, 0x8E	; 142
 90e:	87 2f       	mov	r24, r23
 910:	76 2f       	mov	r23, r22
 912:	05 c0       	rjmp	.+10     	; 0x91e <__floatsisf+0x5e>
 914:	66 23       	and	r22, r22
 916:	71 f0       	breq	.+28     	; 0x934 <__floatsisf+0x74>
 918:	96 e8       	ldi	r25, 0x86	; 134
 91a:	86 2f       	mov	r24, r22
 91c:	70 e0       	ldi	r23, 0x00	; 0
 91e:	60 e0       	ldi	r22, 0x00	; 0
 920:	2a f0       	brmi	.+10     	; 0x92c <__floatsisf+0x6c>
 922:	9a 95       	dec	r25
 924:	66 0f       	add	r22, r22
 926:	77 1f       	adc	r23, r23
 928:	88 1f       	adc	r24, r24
 92a:	da f7       	brpl	.-10     	; 0x922 <__floatsisf+0x62>
 92c:	88 0f       	add	r24, r24
 92e:	96 95       	lsr	r25
 930:	87 95       	ror	r24
 932:	97 f9       	bld	r25, 7
 934:	08 95       	ret

00000936 <__fp_cmp>:
 936:	99 0f       	add	r25, r25
 938:	00 08       	sbc	r0, r0
 93a:	55 0f       	add	r21, r21
 93c:	aa 0b       	sbc	r26, r26
 93e:	e0 e8       	ldi	r30, 0x80	; 128
 940:	fe ef       	ldi	r31, 0xFE	; 254
 942:	16 16       	cp	r1, r22
 944:	17 06       	cpc	r1, r23
 946:	e8 07       	cpc	r30, r24
 948:	f9 07       	cpc	r31, r25
 94a:	c0 f0       	brcs	.+48     	; 0x97c <__fp_cmp+0x46>
 94c:	12 16       	cp	r1, r18
 94e:	13 06       	cpc	r1, r19
 950:	e4 07       	cpc	r30, r20
 952:	f5 07       	cpc	r31, r21
 954:	98 f0       	brcs	.+38     	; 0x97c <__fp_cmp+0x46>
 956:	62 1b       	sub	r22, r18
 958:	73 0b       	sbc	r23, r19
 95a:	84 0b       	sbc	r24, r20
 95c:	95 0b       	sbc	r25, r21
 95e:	39 f4       	brne	.+14     	; 0x96e <__fp_cmp+0x38>
 960:	0a 26       	eor	r0, r26
 962:	61 f0       	breq	.+24     	; 0x97c <__fp_cmp+0x46>
 964:	23 2b       	or	r18, r19
 966:	24 2b       	or	r18, r20
 968:	25 2b       	or	r18, r21
 96a:	21 f4       	brne	.+8      	; 0x974 <__fp_cmp+0x3e>
 96c:	08 95       	ret
 96e:	0a 26       	eor	r0, r26
 970:	09 f4       	brne	.+2      	; 0x974 <__fp_cmp+0x3e>
 972:	a1 40       	sbci	r26, 0x01	; 1
 974:	a6 95       	lsr	r26
 976:	8f ef       	ldi	r24, 0xFF	; 255
 978:	81 1d       	adc	r24, r1
 97a:	81 1d       	adc	r24, r1
 97c:	08 95       	ret

0000097e <__fp_inf>:
 97e:	97 f9       	bld	r25, 7
 980:	9f 67       	ori	r25, 0x7F	; 127
 982:	80 e8       	ldi	r24, 0x80	; 128
 984:	70 e0       	ldi	r23, 0x00	; 0
 986:	60 e0       	ldi	r22, 0x00	; 0
 988:	08 95       	ret

0000098a <__fp_nan>:
 98a:	9f ef       	ldi	r25, 0xFF	; 255
 98c:	80 ec       	ldi	r24, 0xC0	; 192
 98e:	08 95       	ret

00000990 <__fp_pscA>:
 990:	00 24       	eor	r0, r0
 992:	0a 94       	dec	r0
 994:	16 16       	cp	r1, r22
 996:	17 06       	cpc	r1, r23
 998:	18 06       	cpc	r1, r24
 99a:	09 06       	cpc	r0, r25
 99c:	08 95       	ret

0000099e <__fp_pscB>:
 99e:	00 24       	eor	r0, r0
 9a0:	0a 94       	dec	r0
 9a2:	12 16       	cp	r1, r18
 9a4:	13 06       	cpc	r1, r19
 9a6:	14 06       	cpc	r1, r20
 9a8:	05 06       	cpc	r0, r21
 9aa:	08 95       	ret

000009ac <__fp_round>:
 9ac:	09 2e       	mov	r0, r25
 9ae:	03 94       	inc	r0
 9b0:	00 0c       	add	r0, r0
 9b2:	11 f4       	brne	.+4      	; 0x9b8 <__fp_round+0xc>
 9b4:	88 23       	and	r24, r24
 9b6:	52 f0       	brmi	.+20     	; 0x9cc <__fp_round+0x20>
 9b8:	bb 0f       	add	r27, r27
 9ba:	40 f4       	brcc	.+16     	; 0x9cc <__fp_round+0x20>
 9bc:	bf 2b       	or	r27, r31
 9be:	11 f4       	brne	.+4      	; 0x9c4 <__fp_round+0x18>
 9c0:	60 ff       	sbrs	r22, 0
 9c2:	04 c0       	rjmp	.+8      	; 0x9cc <__fp_round+0x20>
 9c4:	6f 5f       	subi	r22, 0xFF	; 255
 9c6:	7f 4f       	sbci	r23, 0xFF	; 255
 9c8:	8f 4f       	sbci	r24, 0xFF	; 255
 9ca:	9f 4f       	sbci	r25, 0xFF	; 255
 9cc:	08 95       	ret

000009ce <__fp_split3>:
 9ce:	57 fd       	sbrc	r21, 7
 9d0:	90 58       	subi	r25, 0x80	; 128
 9d2:	44 0f       	add	r20, r20
 9d4:	55 1f       	adc	r21, r21
 9d6:	59 f0       	breq	.+22     	; 0x9ee <__fp_splitA+0x10>
 9d8:	5f 3f       	cpi	r21, 0xFF	; 255
 9da:	71 f0       	breq	.+28     	; 0x9f8 <__fp_splitA+0x1a>
 9dc:	47 95       	ror	r20

000009de <__fp_splitA>:
 9de:	88 0f       	add	r24, r24
 9e0:	97 fb       	bst	r25, 7
 9e2:	99 1f       	adc	r25, r25
 9e4:	61 f0       	breq	.+24     	; 0x9fe <__fp_splitA+0x20>
 9e6:	9f 3f       	cpi	r25, 0xFF	; 255
 9e8:	79 f0       	breq	.+30     	; 0xa08 <__fp_splitA+0x2a>
 9ea:	87 95       	ror	r24
 9ec:	08 95       	ret
 9ee:	12 16       	cp	r1, r18
 9f0:	13 06       	cpc	r1, r19
 9f2:	14 06       	cpc	r1, r20
 9f4:	55 1f       	adc	r21, r21
 9f6:	f2 cf       	rjmp	.-28     	; 0x9dc <__fp_split3+0xe>
 9f8:	46 95       	lsr	r20
 9fa:	f1 df       	rcall	.-30     	; 0x9de <__fp_splitA>
 9fc:	08 c0       	rjmp	.+16     	; 0xa0e <__fp_splitA+0x30>
 9fe:	16 16       	cp	r1, r22
 a00:	17 06       	cpc	r1, r23
 a02:	18 06       	cpc	r1, r24
 a04:	99 1f       	adc	r25, r25
 a06:	f1 cf       	rjmp	.-30     	; 0x9ea <__fp_splitA+0xc>
 a08:	86 95       	lsr	r24
 a0a:	71 05       	cpc	r23, r1
 a0c:	61 05       	cpc	r22, r1
 a0e:	08 94       	sec
 a10:	08 95       	ret

00000a12 <__fp_zero>:
 a12:	e8 94       	clt

00000a14 <__fp_szero>:
 a14:	bb 27       	eor	r27, r27
 a16:	66 27       	eor	r22, r22
 a18:	77 27       	eor	r23, r23
 a1a:	cb 01       	movw	r24, r22
 a1c:	97 f9       	bld	r25, 7
 a1e:	08 95       	ret

00000a20 <__gesf2>:
 a20:	8a df       	rcall	.-236    	; 0x936 <__fp_cmp>
 a22:	08 f4       	brcc	.+2      	; 0xa26 <__gesf2+0x6>
 a24:	8f ef       	ldi	r24, 0xFF	; 255
 a26:	08 95       	ret

00000a28 <__mulsf3>:
 a28:	0b d0       	rcall	.+22     	; 0xa40 <__mulsf3x>
 a2a:	c0 cf       	rjmp	.-128    	; 0x9ac <__fp_round>
 a2c:	b1 df       	rcall	.-158    	; 0x990 <__fp_pscA>
 a2e:	28 f0       	brcs	.+10     	; 0xa3a <__mulsf3+0x12>
 a30:	b6 df       	rcall	.-148    	; 0x99e <__fp_pscB>
 a32:	18 f0       	brcs	.+6      	; 0xa3a <__mulsf3+0x12>
 a34:	95 23       	and	r25, r21
 a36:	09 f0       	breq	.+2      	; 0xa3a <__mulsf3+0x12>
 a38:	a2 cf       	rjmp	.-188    	; 0x97e <__fp_inf>
 a3a:	a7 cf       	rjmp	.-178    	; 0x98a <__fp_nan>
 a3c:	11 24       	eor	r1, r1
 a3e:	ea cf       	rjmp	.-44     	; 0xa14 <__fp_szero>

00000a40 <__mulsf3x>:
 a40:	c6 df       	rcall	.-116    	; 0x9ce <__fp_split3>
 a42:	a0 f3       	brcs	.-24     	; 0xa2c <__mulsf3+0x4>

00000a44 <__mulsf3_pse>:
 a44:	95 9f       	mul	r25, r21
 a46:	d1 f3       	breq	.-12     	; 0xa3c <__mulsf3+0x14>
 a48:	95 0f       	add	r25, r21
 a4a:	50 e0       	ldi	r21, 0x00	; 0
 a4c:	55 1f       	adc	r21, r21
 a4e:	62 9f       	mul	r22, r18
 a50:	f0 01       	movw	r30, r0
 a52:	72 9f       	mul	r23, r18
 a54:	bb 27       	eor	r27, r27
 a56:	f0 0d       	add	r31, r0
 a58:	b1 1d       	adc	r27, r1
 a5a:	63 9f       	mul	r22, r19
 a5c:	aa 27       	eor	r26, r26
 a5e:	f0 0d       	add	r31, r0
 a60:	b1 1d       	adc	r27, r1
 a62:	aa 1f       	adc	r26, r26
 a64:	64 9f       	mul	r22, r20
 a66:	66 27       	eor	r22, r22
 a68:	b0 0d       	add	r27, r0
 a6a:	a1 1d       	adc	r26, r1
 a6c:	66 1f       	adc	r22, r22
 a6e:	82 9f       	mul	r24, r18
 a70:	22 27       	eor	r18, r18
 a72:	b0 0d       	add	r27, r0
 a74:	a1 1d       	adc	r26, r1
 a76:	62 1f       	adc	r22, r18
 a78:	73 9f       	mul	r23, r19
 a7a:	b0 0d       	add	r27, r0
 a7c:	a1 1d       	adc	r26, r1
 a7e:	62 1f       	adc	r22, r18
 a80:	83 9f       	mul	r24, r19
 a82:	a0 0d       	add	r26, r0
 a84:	61 1d       	adc	r22, r1
 a86:	22 1f       	adc	r18, r18
 a88:	74 9f       	mul	r23, r20
 a8a:	33 27       	eor	r19, r19
 a8c:	a0 0d       	add	r26, r0
 a8e:	61 1d       	adc	r22, r1
 a90:	23 1f       	adc	r18, r19
 a92:	84 9f       	mul	r24, r20
 a94:	60 0d       	add	r22, r0
 a96:	21 1d       	adc	r18, r1
 a98:	82 2f       	mov	r24, r18
 a9a:	76 2f       	mov	r23, r22
 a9c:	6a 2f       	mov	r22, r26
 a9e:	11 24       	eor	r1, r1
 aa0:	9f 57       	subi	r25, 0x7F	; 127
 aa2:	50 40       	sbci	r21, 0x00	; 0
 aa4:	8a f0       	brmi	.+34     	; 0xac8 <__mulsf3_pse+0x84>
 aa6:	e1 f0       	breq	.+56     	; 0xae0 <__mulsf3_pse+0x9c>
 aa8:	88 23       	and	r24, r24
 aaa:	4a f0       	brmi	.+18     	; 0xabe <__mulsf3_pse+0x7a>
 aac:	ee 0f       	add	r30, r30
 aae:	ff 1f       	adc	r31, r31
 ab0:	bb 1f       	adc	r27, r27
 ab2:	66 1f       	adc	r22, r22
 ab4:	77 1f       	adc	r23, r23
 ab6:	88 1f       	adc	r24, r24
 ab8:	91 50       	subi	r25, 0x01	; 1
 aba:	50 40       	sbci	r21, 0x00	; 0
 abc:	a9 f7       	brne	.-22     	; 0xaa8 <__mulsf3_pse+0x64>
 abe:	9e 3f       	cpi	r25, 0xFE	; 254
 ac0:	51 05       	cpc	r21, r1
 ac2:	70 f0       	brcs	.+28     	; 0xae0 <__mulsf3_pse+0x9c>
 ac4:	5c cf       	rjmp	.-328    	; 0x97e <__fp_inf>
 ac6:	a6 cf       	rjmp	.-180    	; 0xa14 <__fp_szero>
 ac8:	5f 3f       	cpi	r21, 0xFF	; 255
 aca:	ec f3       	brlt	.-6      	; 0xac6 <__mulsf3_pse+0x82>
 acc:	98 3e       	cpi	r25, 0xE8	; 232
 ace:	dc f3       	brlt	.-10     	; 0xac6 <__mulsf3_pse+0x82>
 ad0:	86 95       	lsr	r24
 ad2:	77 95       	ror	r23
 ad4:	67 95       	ror	r22
 ad6:	b7 95       	ror	r27
 ad8:	f7 95       	ror	r31
 ada:	e7 95       	ror	r30
 adc:	9f 5f       	subi	r25, 0xFF	; 255
 ade:	c1 f7       	brne	.-16     	; 0xad0 <__mulsf3_pse+0x8c>
 ae0:	fe 2b       	or	r31, r30
 ae2:	88 0f       	add	r24, r24
 ae4:	91 1d       	adc	r25, r1
 ae6:	96 95       	lsr	r25
 ae8:	87 95       	ror	r24
 aea:	97 f9       	bld	r25, 7
 aec:	08 95       	ret

00000aee <swapfunc>:
 aee:	dc 01       	movw	r26, r24
 af0:	fb 01       	movw	r30, r22
 af2:	8c 91       	ld	r24, X
 af4:	90 81       	ld	r25, Z
 af6:	9d 93       	st	X+, r25
 af8:	81 93       	st	Z+, r24
 afa:	41 50       	subi	r20, 0x01	; 1
 afc:	51 09       	sbc	r21, r1
 afe:	14 16       	cp	r1, r20
 b00:	15 06       	cpc	r1, r21
 b02:	bc f3       	brlt	.-18     	; 0xaf2 <swapfunc+0x4>
 b04:	08 95       	ret

00000b06 <med3>:
 b06:	a0 e0       	ldi	r26, 0x00	; 0
 b08:	b0 e0       	ldi	r27, 0x00	; 0
 b0a:	e8 e8       	ldi	r30, 0x88	; 136
 b0c:	f5 e0       	ldi	r31, 0x05	; 5
 b0e:	da c1       	rjmp	.+948    	; 0xec4 <__prologue_saves__+0x14>
 b10:	6c 01       	movw	r12, r24
 b12:	7b 01       	movw	r14, r22
 b14:	8a 01       	movw	r16, r20
 b16:	e9 01       	movw	r28, r18
 b18:	f9 01       	movw	r30, r18
 b1a:	09 95       	icall
 b1c:	b8 01       	movw	r22, r16
 b1e:	97 ff       	sbrs	r25, 7
 b20:	0f c0       	rjmp	.+30     	; 0xb40 <med3+0x3a>
 b22:	c7 01       	movw	r24, r14
 b24:	fe 01       	movw	r30, r28
 b26:	09 95       	icall
 b28:	97 fd       	sbrc	r25, 7
 b2a:	08 c0       	rjmp	.+16     	; 0xb3c <med3+0x36>
 b2c:	b8 01       	movw	r22, r16
 b2e:	c6 01       	movw	r24, r12
 b30:	fe 01       	movw	r30, r28
 b32:	09 95       	icall
 b34:	97 fd       	sbrc	r25, 7
 b36:	14 c0       	rjmp	.+40     	; 0xb60 <med3+0x5a>
 b38:	86 01       	movw	r16, r12
 b3a:	12 c0       	rjmp	.+36     	; 0xb60 <med3+0x5a>
 b3c:	87 01       	movw	r16, r14
 b3e:	10 c0       	rjmp	.+32     	; 0xb60 <med3+0x5a>
 b40:	c7 01       	movw	r24, r14
 b42:	fe 01       	movw	r30, r28
 b44:	09 95       	icall
 b46:	18 16       	cp	r1, r24
 b48:	19 06       	cpc	r1, r25
 b4a:	44 f0       	brlt	.+16     	; 0xb5c <med3+0x56>
 b4c:	b8 01       	movw	r22, r16
 b4e:	c6 01       	movw	r24, r12
 b50:	fe 01       	movw	r30, r28
 b52:	09 95       	icall
 b54:	97 ff       	sbrs	r25, 7
 b56:	04 c0       	rjmp	.+8      	; 0xb60 <med3+0x5a>
 b58:	c6 01       	movw	r24, r12
 b5a:	03 c0       	rjmp	.+6      	; 0xb62 <med3+0x5c>
 b5c:	c7 01       	movw	r24, r14
 b5e:	01 c0       	rjmp	.+2      	; 0xb62 <med3+0x5c>
 b60:	c8 01       	movw	r24, r16
 b62:	cd b7       	in	r28, 0x3d	; 61
 b64:	de b7       	in	r29, 0x3e	; 62
 b66:	e8 e0       	ldi	r30, 0x08	; 8
 b68:	c9 c1       	rjmp	.+914    	; 0xefc <__epilogue_restores__+0x14>

00000b6a <qsort>:
 b6a:	ac e0       	ldi	r26, 0x0C	; 12
 b6c:	b0 e0       	ldi	r27, 0x00	; 0
 b6e:	ea eb       	ldi	r30, 0xBA	; 186
 b70:	f5 e0       	ldi	r31, 0x05	; 5
 b72:	9e c1       	rjmp	.+828    	; 0xeb0 <__prologue_saves__>
 b74:	8c 01       	movw	r16, r24
 b76:	6b 01       	movw	r12, r22
 b78:	5c 87       	std	Y+12, r21	; 0x0c
 b7a:	4b 87       	std	Y+11, r20	; 0x0b
 b7c:	79 01       	movw	r14, r18
 b7e:	51 95       	neg	r21
 b80:	41 95       	neg	r20
 b82:	51 09       	sbc	r21, r1
 b84:	58 87       	std	Y+8, r21	; 0x08
 b86:	4f 83       	std	Y+7, r20	; 0x07
 b88:	2b 85       	ldd	r18, Y+11	; 0x0b
 b8a:	3c 85       	ldd	r19, Y+12	; 0x0c
 b8c:	20 0f       	add	r18, r16
 b8e:	31 1f       	adc	r19, r17
 b90:	3a 83       	std	Y+2, r19	; 0x02
 b92:	29 83       	std	Y+1, r18	; 0x01
 b94:	37 e0       	ldi	r19, 0x07	; 7
 b96:	c3 16       	cp	r12, r19
 b98:	d1 04       	cpc	r13, r1
 b9a:	68 f5       	brcc	.+90     	; 0xbf6 <qsort+0x8c>
 b9c:	89 80       	ldd	r8, Y+1	; 0x01
 b9e:	9a 80       	ldd	r9, Y+2	; 0x02
 ba0:	4b 85       	ldd	r20, Y+11	; 0x0b
 ba2:	5c 85       	ldd	r21, Y+12	; 0x0c
 ba4:	c4 9e       	mul	r12, r20
 ba6:	50 01       	movw	r10, r0
 ba8:	c5 9e       	mul	r12, r21
 baa:	b0 0c       	add	r11, r0
 bac:	d4 9e       	mul	r13, r20
 bae:	b0 0c       	add	r11, r0
 bb0:	11 24       	eor	r1, r1
 bb2:	a0 0e       	add	r10, r16
 bb4:	b1 1e       	adc	r11, r17
 bb6:	8a 14       	cp	r8, r10
 bb8:	9b 04       	cpc	r9, r11
 bba:	08 f0       	brcs	.+2      	; 0xbbe <qsort+0x54>
 bbc:	62 c1       	rjmp	.+708    	; 0xe82 <qsort+0x318>
 bbe:	34 01       	movw	r6, r8
 bc0:	06 15       	cp	r16, r6
 bc2:	17 05       	cpc	r17, r7
 bc4:	98 f4       	brcc	.+38     	; 0xbec <qsort+0x82>
 bc6:	63 01       	movw	r12, r6
 bc8:	8b 85       	ldd	r24, Y+11	; 0x0b
 bca:	9c 85       	ldd	r25, Y+12	; 0x0c
 bcc:	c8 1a       	sub	r12, r24
 bce:	d9 0a       	sbc	r13, r25
 bd0:	b3 01       	movw	r22, r6
 bd2:	c6 01       	movw	r24, r12
 bd4:	f7 01       	movw	r30, r14
 bd6:	09 95       	icall
 bd8:	18 16       	cp	r1, r24
 bda:	19 06       	cpc	r1, r25
 bdc:	3c f4       	brge	.+14     	; 0xbec <qsort+0x82>
 bde:	4b 85       	ldd	r20, Y+11	; 0x0b
 be0:	5c 85       	ldd	r21, Y+12	; 0x0c
 be2:	b6 01       	movw	r22, r12
 be4:	c3 01       	movw	r24, r6
 be6:	83 df       	rcall	.-250    	; 0xaee <swapfunc>
 be8:	36 01       	movw	r6, r12
 bea:	ea cf       	rjmp	.-44     	; 0xbc0 <qsort+0x56>
 bec:	2b 85       	ldd	r18, Y+11	; 0x0b
 bee:	3c 85       	ldd	r19, Y+12	; 0x0c
 bf0:	82 0e       	add	r8, r18
 bf2:	93 1e       	adc	r9, r19
 bf4:	e0 cf       	rjmp	.-64     	; 0xbb6 <qsort+0x4c>
 bf6:	c6 01       	movw	r24, r12
 bf8:	96 95       	lsr	r25
 bfa:	87 95       	ror	r24
 bfc:	4b 85       	ldd	r20, Y+11	; 0x0b
 bfe:	5c 85       	ldd	r21, Y+12	; 0x0c
 c00:	84 9f       	mul	r24, r20
 c02:	50 01       	movw	r10, r0
 c04:	85 9f       	mul	r24, r21
 c06:	b0 0c       	add	r11, r0
 c08:	94 9f       	mul	r25, r20
 c0a:	b0 0c       	add	r11, r0
 c0c:	11 24       	eor	r1, r1
 c0e:	a0 0e       	add	r10, r16
 c10:	b1 1e       	adc	r11, r17
 c12:	c6 01       	movw	r24, r12
 c14:	01 97       	sbiw	r24, 0x01	; 1
 c16:	9e 83       	std	Y+6, r25	; 0x06
 c18:	8d 83       	std	Y+5, r24	; 0x05
 c1a:	97 e0       	ldi	r25, 0x07	; 7
 c1c:	c9 16       	cp	r12, r25
 c1e:	d1 04       	cpc	r13, r1
 c20:	09 f4       	brne	.+2      	; 0xc24 <qsort+0xba>
 c22:	48 c0       	rjmp	.+144    	; 0xcb4 <qsort+0x14a>
 c24:	ed 81       	ldd	r30, Y+5	; 0x05
 c26:	fe 81       	ldd	r31, Y+6	; 0x06
 c28:	e4 9f       	mul	r30, r20
 c2a:	30 01       	movw	r6, r0
 c2c:	e5 9f       	mul	r30, r21
 c2e:	70 0c       	add	r7, r0
 c30:	f4 9f       	mul	r31, r20
 c32:	70 0c       	add	r7, r0
 c34:	11 24       	eor	r1, r1
 c36:	60 0e       	add	r6, r16
 c38:	71 1e       	adc	r7, r17
 c3a:	f9 e2       	ldi	r31, 0x29	; 41
 c3c:	cf 16       	cp	r12, r31
 c3e:	d1 04       	cpc	r13, r1
 c40:	90 f1       	brcs	.+100    	; 0xca6 <qsort+0x13c>
 c42:	c6 01       	movw	r24, r12
 c44:	23 e0       	ldi	r18, 0x03	; 3
 c46:	96 95       	lsr	r25
 c48:	87 95       	ror	r24
 c4a:	2a 95       	dec	r18
 c4c:	e1 f7       	brne	.-8      	; 0xc46 <qsort+0xdc>
 c4e:	84 9f       	mul	r24, r20
 c50:	40 01       	movw	r8, r0
 c52:	85 9f       	mul	r24, r21
 c54:	90 0c       	add	r9, r0
 c56:	94 9f       	mul	r25, r20
 c58:	90 0c       	add	r9, r0
 c5a:	11 24       	eor	r1, r1
 c5c:	14 01       	movw	r2, r8
 c5e:	22 0c       	add	r2, r2
 c60:	33 1c       	adc	r3, r3
 c62:	a8 01       	movw	r20, r16
 c64:	42 0d       	add	r20, r2
 c66:	53 1d       	adc	r21, r3
 c68:	b8 01       	movw	r22, r16
 c6a:	68 0d       	add	r22, r8
 c6c:	79 1d       	adc	r23, r9
 c6e:	97 01       	movw	r18, r14
 c70:	c8 01       	movw	r24, r16
 c72:	49 df       	rcall	.-366    	; 0xb06 <med3>
 c74:	2c 01       	movw	r4, r24
 c76:	a5 01       	movw	r20, r10
 c78:	48 0d       	add	r20, r8
 c7a:	59 1d       	adc	r21, r9
 c7c:	91 94       	neg	r9
 c7e:	81 94       	neg	r8
 c80:	91 08       	sbc	r9, r1
 c82:	97 01       	movw	r18, r14
 c84:	b5 01       	movw	r22, r10
 c86:	c5 01       	movw	r24, r10
 c88:	88 0d       	add	r24, r8
 c8a:	99 1d       	adc	r25, r9
 c8c:	3c df       	rcall	.-392    	; 0xb06 <med3>
 c8e:	5c 01       	movw	r10, r24
 c90:	b3 01       	movw	r22, r6
 c92:	68 0d       	add	r22, r8
 c94:	79 1d       	adc	r23, r9
 c96:	97 01       	movw	r18, r14
 c98:	a3 01       	movw	r20, r6
 c9a:	c3 01       	movw	r24, r6
 c9c:	82 19       	sub	r24, r2
 c9e:	93 09       	sbc	r25, r3
 ca0:	32 df       	rcall	.-412    	; 0xb06 <med3>
 ca2:	3c 01       	movw	r6, r24
 ca4:	01 c0       	rjmp	.+2      	; 0xca8 <qsort+0x13e>
 ca6:	28 01       	movw	r4, r16
 ca8:	97 01       	movw	r18, r14
 caa:	a3 01       	movw	r20, r6
 cac:	b5 01       	movw	r22, r10
 cae:	c2 01       	movw	r24, r4
 cb0:	2a df       	rcall	.-428    	; 0xb06 <med3>
 cb2:	5c 01       	movw	r10, r24
 cb4:	4b 85       	ldd	r20, Y+11	; 0x0b
 cb6:	5c 85       	ldd	r21, Y+12	; 0x0c
 cb8:	b5 01       	movw	r22, r10
 cba:	c8 01       	movw	r24, r16
 cbc:	18 df       	rcall	.-464    	; 0xaee <swapfunc>
 cbe:	89 80       	ldd	r8, Y+1	; 0x01
 cc0:	9a 80       	ldd	r9, Y+2	; 0x02
 cc2:	4d 81       	ldd	r20, Y+5	; 0x05
 cc4:	5e 81       	ldd	r21, Y+6	; 0x06
 cc6:	8b 85       	ldd	r24, Y+11	; 0x0b
 cc8:	9c 85       	ldd	r25, Y+12	; 0x0c
 cca:	48 9f       	mul	r20, r24
 ccc:	90 01       	movw	r18, r0
 cce:	49 9f       	mul	r20, r25
 cd0:	30 0d       	add	r19, r0
 cd2:	58 9f       	mul	r21, r24
 cd4:	30 0d       	add	r19, r0
 cd6:	11 24       	eor	r1, r1
 cd8:	3c 83       	std	Y+4, r19	; 0x04
 cda:	2b 83       	std	Y+3, r18	; 0x03
 cdc:	39 01       	movw	r6, r18
 cde:	60 0e       	add	r6, r16
 ce0:	71 1e       	adc	r7, r17
 ce2:	13 01       	movw	r2, r6
 ce4:	54 01       	movw	r10, r8
 ce6:	20 e0       	ldi	r18, 0x00	; 0
 ce8:	30 e0       	ldi	r19, 0x00	; 0
 cea:	6a 14       	cp	r6, r10
 cec:	7b 04       	cpc	r7, r11
 cee:	08 f4       	brcc	.+2      	; 0xcf2 <qsort+0x188>
 cf0:	3f c0       	rjmp	.+126    	; 0xd70 <qsort+0x206>
 cf2:	b8 01       	movw	r22, r16
 cf4:	c5 01       	movw	r24, r10
 cf6:	29 87       	std	Y+9, r18	; 0x09
 cf8:	3a 87       	std	Y+10, r19	; 0x0a
 cfa:	f7 01       	movw	r30, r14
 cfc:	09 95       	icall
 cfe:	29 85       	ldd	r18, Y+9	; 0x09
 d00:	3a 85       	ldd	r19, Y+10	; 0x0a
 d02:	18 16       	cp	r1, r24
 d04:	19 06       	cpc	r1, r25
 d06:	a4 f1       	brlt	.+104    	; 0xd70 <qsort+0x206>
 d08:	89 2b       	or	r24, r25
 d0a:	81 f4       	brne	.+32     	; 0xd2c <qsort+0x1c2>
 d0c:	4b 85       	ldd	r20, Y+11	; 0x0b
 d0e:	5c 85       	ldd	r21, Y+12	; 0x0c
 d10:	b5 01       	movw	r22, r10
 d12:	89 81       	ldd	r24, Y+1	; 0x01
 d14:	9a 81       	ldd	r25, Y+2	; 0x02
 d16:	eb de       	rcall	.-554    	; 0xaee <swapfunc>
 d18:	29 81       	ldd	r18, Y+1	; 0x01
 d1a:	3a 81       	ldd	r19, Y+2	; 0x02
 d1c:	4b 85       	ldd	r20, Y+11	; 0x0b
 d1e:	5c 85       	ldd	r21, Y+12	; 0x0c
 d20:	24 0f       	add	r18, r20
 d22:	35 1f       	adc	r19, r21
 d24:	3a 83       	std	Y+2, r19	; 0x02
 d26:	29 83       	std	Y+1, r18	; 0x01
 d28:	21 e0       	ldi	r18, 0x01	; 1
 d2a:	30 e0       	ldi	r19, 0x00	; 0
 d2c:	8b 85       	ldd	r24, Y+11	; 0x0b
 d2e:	9c 85       	ldd	r25, Y+12	; 0x0c
 d30:	a8 0e       	add	r10, r24
 d32:	b9 1e       	adc	r11, r25
 d34:	da cf       	rjmp	.-76     	; 0xcea <qsort+0x180>
 d36:	b8 01       	movw	r22, r16
 d38:	c3 01       	movw	r24, r6
 d3a:	29 87       	std	Y+9, r18	; 0x09
 d3c:	3a 87       	std	Y+10, r19	; 0x0a
 d3e:	f7 01       	movw	r30, r14
 d40:	09 95       	icall
 d42:	23 01       	movw	r4, r6
 d44:	4b 85       	ldd	r20, Y+11	; 0x0b
 d46:	5c 85       	ldd	r21, Y+12	; 0x0c
 d48:	44 1a       	sub	r4, r20
 d4a:	55 0a       	sbc	r5, r21
 d4c:	29 85       	ldd	r18, Y+9	; 0x09
 d4e:	3a 85       	ldd	r19, Y+10	; 0x0a
 d50:	97 fd       	sbrc	r25, 7
 d52:	12 c0       	rjmp	.+36     	; 0xd78 <qsort+0x20e>
 d54:	89 2b       	or	r24, r25
 d56:	59 f4       	brne	.+22     	; 0xd6e <qsort+0x204>
 d58:	4b 85       	ldd	r20, Y+11	; 0x0b
 d5a:	5c 85       	ldd	r21, Y+12	; 0x0c
 d5c:	b1 01       	movw	r22, r2
 d5e:	c3 01       	movw	r24, r6
 d60:	c6 de       	rcall	.-628    	; 0xaee <swapfunc>
 d62:	2b 85       	ldd	r18, Y+11	; 0x0b
 d64:	3c 85       	ldd	r19, Y+12	; 0x0c
 d66:	22 1a       	sub	r2, r18
 d68:	33 0a       	sbc	r3, r19
 d6a:	21 e0       	ldi	r18, 0x01	; 1
 d6c:	30 e0       	ldi	r19, 0x00	; 0
 d6e:	32 01       	movw	r6, r4
 d70:	6a 14       	cp	r6, r10
 d72:	7b 04       	cpc	r7, r11
 d74:	00 f7       	brcc	.-64     	; 0xd36 <qsort+0x1cc>
 d76:	0d c0       	rjmp	.+26     	; 0xd92 <qsort+0x228>
 d78:	4b 85       	ldd	r20, Y+11	; 0x0b
 d7a:	5c 85       	ldd	r21, Y+12	; 0x0c
 d7c:	b3 01       	movw	r22, r6
 d7e:	c5 01       	movw	r24, r10
 d80:	b6 de       	rcall	.-660    	; 0xaee <swapfunc>
 d82:	4b 85       	ldd	r20, Y+11	; 0x0b
 d84:	5c 85       	ldd	r21, Y+12	; 0x0c
 d86:	a4 0e       	add	r10, r20
 d88:	b5 1e       	adc	r11, r21
 d8a:	32 01       	movw	r6, r4
 d8c:	21 e0       	ldi	r18, 0x01	; 1
 d8e:	30 e0       	ldi	r19, 0x00	; 0
 d90:	ac cf       	rjmp	.-168    	; 0xcea <qsort+0x180>
 d92:	23 2b       	or	r18, r19
 d94:	09 f4       	brne	.+2      	; 0xd98 <qsort+0x22e>
 d96:	4b c0       	rjmp	.+150    	; 0xe2e <qsort+0x2c4>
 d98:	4b 80       	ldd	r4, Y+3	; 0x03
 d9a:	5c 80       	ldd	r5, Y+4	; 0x04
 d9c:	4f 81       	ldd	r20, Y+7	; 0x07
 d9e:	58 85       	ldd	r21, Y+8	; 0x08
 da0:	44 1a       	sub	r4, r20
 da2:	55 0a       	sbc	r5, r21
 da4:	40 0e       	add	r4, r16
 da6:	51 1e       	adc	r5, r17
 da8:	65 01       	movw	r12, r10
 daa:	29 81       	ldd	r18, Y+1	; 0x01
 dac:	3a 81       	ldd	r19, Y+2	; 0x02
 dae:	c2 1a       	sub	r12, r18
 db0:	d3 0a       	sbc	r13, r19
 db2:	a9 01       	movw	r20, r18
 db4:	40 1b       	sub	r20, r16
 db6:	51 0b       	sbc	r21, r17
 db8:	c4 16       	cp	r12, r20
 dba:	d5 06       	cpc	r13, r21
 dbc:	0c f4       	brge	.+2      	; 0xdc0 <qsort+0x256>
 dbe:	a6 01       	movw	r20, r12
 dc0:	14 16       	cp	r1, r20
 dc2:	15 06       	cpc	r1, r21
 dc4:	2c f4       	brge	.+10     	; 0xdd0 <qsort+0x266>
 dc6:	b5 01       	movw	r22, r10
 dc8:	64 1b       	sub	r22, r20
 dca:	75 0b       	sbc	r23, r21
 dcc:	c8 01       	movw	r24, r16
 dce:	8f de       	rcall	.-738    	; 0xaee <swapfunc>
 dd0:	41 01       	movw	r8, r2
 dd2:	86 18       	sub	r8, r6
 dd4:	97 08       	sbc	r9, r7
 dd6:	a2 01       	movw	r20, r4
 dd8:	42 19       	sub	r20, r2
 dda:	53 09       	sbc	r21, r3
 ddc:	8b 85       	ldd	r24, Y+11	; 0x0b
 dde:	9c 85       	ldd	r25, Y+12	; 0x0c
 de0:	48 1b       	sub	r20, r24
 de2:	59 0b       	sbc	r21, r25
 de4:	84 16       	cp	r8, r20
 de6:	95 06       	cpc	r9, r21
 de8:	08 f4       	brcc	.+2      	; 0xdec <qsort+0x282>
 dea:	a4 01       	movw	r20, r8
 dec:	14 16       	cp	r1, r20
 dee:	15 06       	cpc	r1, r21
 df0:	2c f4       	brge	.+10     	; 0xdfc <qsort+0x292>
 df2:	b2 01       	movw	r22, r4
 df4:	64 1b       	sub	r22, r20
 df6:	75 0b       	sbc	r23, r21
 df8:	c5 01       	movw	r24, r10
 dfa:	79 de       	rcall	.-782    	; 0xaee <swapfunc>
 dfc:	eb 85       	ldd	r30, Y+11	; 0x0b
 dfe:	fc 85       	ldd	r31, Y+12	; 0x0c
 e00:	ec 15       	cp	r30, r12
 e02:	fd 05       	cpc	r31, r13
 e04:	38 f4       	brcc	.+14     	; 0xe14 <qsort+0x2aa>
 e06:	c6 01       	movw	r24, r12
 e08:	bf 01       	movw	r22, r30
 e0a:	3e d0       	rcall	.+124    	; 0xe88 <__udivmodhi4>
 e0c:	97 01       	movw	r18, r14
 e0e:	af 01       	movw	r20, r30
 e10:	c8 01       	movw	r24, r16
 e12:	ab de       	rcall	.-682    	; 0xb6a <qsort>
 e14:	2b 85       	ldd	r18, Y+11	; 0x0b
 e16:	3c 85       	ldd	r19, Y+12	; 0x0c
 e18:	28 15       	cp	r18, r8
 e1a:	39 05       	cpc	r19, r9
 e1c:	90 f5       	brcc	.+100    	; 0xe82 <qsort+0x318>
 e1e:	82 01       	movw	r16, r4
 e20:	08 19       	sub	r16, r8
 e22:	19 09       	sbc	r17, r9
 e24:	c4 01       	movw	r24, r8
 e26:	b9 01       	movw	r22, r18
 e28:	2f d0       	rcall	.+94     	; 0xe88 <__udivmodhi4>
 e2a:	6b 01       	movw	r12, r22
 e2c:	ad ce       	rjmp	.-678    	; 0xb88 <qsort+0x1e>
 e2e:	8b 85       	ldd	r24, Y+11	; 0x0b
 e30:	9c 85       	ldd	r25, Y+12	; 0x0c
 e32:	c8 9e       	mul	r12, r24
 e34:	50 01       	movw	r10, r0
 e36:	c9 9e       	mul	r12, r25
 e38:	b0 0c       	add	r11, r0
 e3a:	d8 9e       	mul	r13, r24
 e3c:	b0 0c       	add	r11, r0
 e3e:	11 24       	eor	r1, r1
 e40:	a0 0e       	add	r10, r16
 e42:	b1 1e       	adc	r11, r17
 e44:	8a 14       	cp	r8, r10
 e46:	9b 04       	cpc	r9, r11
 e48:	e0 f4       	brcc	.+56     	; 0xe82 <qsort+0x318>
 e4a:	34 01       	movw	r6, r8
 e4c:	06 15       	cp	r16, r6
 e4e:	17 05       	cpc	r17, r7
 e50:	98 f4       	brcc	.+38     	; 0xe78 <qsort+0x30e>
 e52:	63 01       	movw	r12, r6
 e54:	8b 85       	ldd	r24, Y+11	; 0x0b
 e56:	9c 85       	ldd	r25, Y+12	; 0x0c
 e58:	c8 1a       	sub	r12, r24
 e5a:	d9 0a       	sbc	r13, r25
 e5c:	b3 01       	movw	r22, r6
 e5e:	c6 01       	movw	r24, r12
 e60:	f7 01       	movw	r30, r14
 e62:	09 95       	icall
 e64:	18 16       	cp	r1, r24
 e66:	19 06       	cpc	r1, r25
 e68:	3c f4       	brge	.+14     	; 0xe78 <qsort+0x30e>
 e6a:	4b 85       	ldd	r20, Y+11	; 0x0b
 e6c:	5c 85       	ldd	r21, Y+12	; 0x0c
 e6e:	b6 01       	movw	r22, r12
 e70:	c3 01       	movw	r24, r6
 e72:	3d de       	rcall	.-902    	; 0xaee <swapfunc>
 e74:	36 01       	movw	r6, r12
 e76:	ea cf       	rjmp	.-44     	; 0xe4c <qsort+0x2e2>
 e78:	2b 85       	ldd	r18, Y+11	; 0x0b
 e7a:	3c 85       	ldd	r19, Y+12	; 0x0c
 e7c:	82 0e       	add	r8, r18
 e7e:	93 1e       	adc	r9, r19
 e80:	e1 cf       	rjmp	.-62     	; 0xe44 <qsort+0x2da>
 e82:	2c 96       	adiw	r28, 0x0c	; 12
 e84:	e2 e1       	ldi	r30, 0x12	; 18
 e86:	30 c0       	rjmp	.+96     	; 0xee8 <__epilogue_restores__>

00000e88 <__udivmodhi4>:
 e88:	aa 1b       	sub	r26, r26
 e8a:	bb 1b       	sub	r27, r27
 e8c:	51 e1       	ldi	r21, 0x11	; 17
 e8e:	07 c0       	rjmp	.+14     	; 0xe9e <__udivmodhi4_ep>

00000e90 <__udivmodhi4_loop>:
 e90:	aa 1f       	adc	r26, r26
 e92:	bb 1f       	adc	r27, r27
 e94:	a6 17       	cp	r26, r22
 e96:	b7 07       	cpc	r27, r23
 e98:	10 f0       	brcs	.+4      	; 0xe9e <__udivmodhi4_ep>
 e9a:	a6 1b       	sub	r26, r22
 e9c:	b7 0b       	sbc	r27, r23

00000e9e <__udivmodhi4_ep>:
 e9e:	88 1f       	adc	r24, r24
 ea0:	99 1f       	adc	r25, r25
 ea2:	5a 95       	dec	r21
 ea4:	a9 f7       	brne	.-22     	; 0xe90 <__udivmodhi4_loop>
 ea6:	80 95       	com	r24
 ea8:	90 95       	com	r25
 eaa:	bc 01       	movw	r22, r24
 eac:	cd 01       	movw	r24, r26
 eae:	08 95       	ret

00000eb0 <__prologue_saves__>:
 eb0:	2f 92       	push	r2
 eb2:	3f 92       	push	r3
 eb4:	4f 92       	push	r4
 eb6:	5f 92       	push	r5
 eb8:	6f 92       	push	r6
 eba:	7f 92       	push	r7
 ebc:	8f 92       	push	r8
 ebe:	9f 92       	push	r9
 ec0:	af 92       	push	r10
 ec2:	bf 92       	push	r11
 ec4:	cf 92       	push	r12
 ec6:	df 92       	push	r13
 ec8:	ef 92       	push	r14
 eca:	ff 92       	push	r15
 ecc:	0f 93       	push	r16
 ece:	1f 93       	push	r17
 ed0:	cf 93       	push	r28
 ed2:	df 93       	push	r29
 ed4:	cd b7       	in	r28, 0x3d	; 61
 ed6:	de b7       	in	r29, 0x3e	; 62
 ed8:	ca 1b       	sub	r28, r26
 eda:	db 0b       	sbc	r29, r27
 edc:	0f b6       	in	r0, 0x3f	; 63
 ede:	f8 94       	cli
 ee0:	de bf       	out	0x3e, r29	; 62
 ee2:	0f be       	out	0x3f, r0	; 63
 ee4:	cd bf       	out	0x3d, r28	; 61
 ee6:	09 94       	ijmp

00000ee8 <__epilogue_restores__>:
 ee8:	2a 88       	ldd	r2, Y+18	; 0x12
 eea:	39 88       	ldd	r3, Y+17	; 0x11
 eec:	48 88       	ldd	r4, Y+16	; 0x10
 eee:	5f 84       	ldd	r5, Y+15	; 0x0f
 ef0:	6e 84       	ldd	r6, Y+14	; 0x0e
 ef2:	7d 84       	ldd	r7, Y+13	; 0x0d
 ef4:	8c 84       	ldd	r8, Y+12	; 0x0c
 ef6:	9b 84       	ldd	r9, Y+11	; 0x0b
 ef8:	aa 84       	ldd	r10, Y+10	; 0x0a
 efa:	b9 84       	ldd	r11, Y+9	; 0x09
 efc:	c8 84       	ldd	r12, Y+8	; 0x08
 efe:	df 80       	ldd	r13, Y+7	; 0x07
 f00:	ee 80       	ldd	r14, Y+6	; 0x06
 f02:	fd 80       	ldd	r15, Y+5	; 0x05
 f04:	0c 81       	ldd	r16, Y+4	; 0x04
 f06:	1b 81       	ldd	r17, Y+3	; 0x03
 f08:	aa 81       	ldd	r26, Y+2	; 0x02
 f0a:	b9 81       	ldd	r27, Y+1	; 0x01
 f0c:	ce 0f       	add	r28, r30
 f0e:	d1 1d       	adc	r29, r1
 f10:	0f b6       	in	r0, 0x3f	; 63
 f12:	f8 94       	cli
 f14:	de bf       	out	0x3e, r29	; 62
 f16:	0f be       	out	0x3f, r0	; 63
 f18:	cd bf       	out	0x3d, r28	; 61
 f1a:	ed 01       	movw	r28, r26
 f1c:	08 95       	ret

00000f1e <_exit>:
 f1e:	f8 94       	cli

00000f20 <__stop_program>:
 f20:	ff cf       	rjmp	.-2      	; 0xf20 <__stop_program>
